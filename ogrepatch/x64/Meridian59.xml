<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meridian59</name>
    </assembly>
    <members>
        <member name="T:Meridian59.Client.BaseClient`4">
            <summary>
            Still abstract and generic client extending RootClient class.
            This adds internal server-connection and message enrichment modules
            to the RootClient implementation, so it's able to maintain it's own
            connection to a server and send game messages.
            </summary>
            <remarks>
            The generics are supposed to allow you to use the abstract
            client class-hierarchy, but plug in your own/modified, deriving module-implementations.
            </remarks>
            <typeparam name="T">Type of GameTick or deriving class</typeparam>
            <typeparam name="R">Type of ResourceManager or deriving class</typeparam>
            <typeparam name="D">Type of DataController or deriving class</typeparam>
            <typeparam name="C">Type of Config or deriving class</typeparam>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Connect">
            <summary>
            Connects to the currently selected ConnectionInfo in Config
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Disconnect">
            <summary>
            Disconnects from the server and resets datalayer.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.OnExitRequestHandler(System.Object,System.EventArgs)">
            <summary>
            Sets IsRunning to false and results in the client being closed.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Update">
            <summary>
            Implement this with your code for each tick/update.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.UpdateTPS">
            <summary>
            Updates the TPS value in DataController with
            ticks processed in last second.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.OnServerConnectionException(System.Exception)">
            <summary>
            Executed when an exception was asynchronously received from the ServerConnection
            through it ExceptionQueue
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.OnActionButtonListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.OnActionButtonActivated(System.Object,System.EventArgs)">
            <summary>
            Executed when an actionbutton in the datacontroller is activated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Cleanup">
            <summary>
            Cleanup, runs after loop exits
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.ProcessQueues">
            <summary>
            Handles the queues of other threads (network/enrichment)
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLoginModeMessage(Meridian59.Protocol.GameMessages.LoginModeMessage)">
            <summary>
            Will be executed for any new LoginMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            Will be executed for any new GameMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleGetClientMessage(Meridian59.Protocol.GameMessages.GetClientMessage)">
            <summary>
            Your client major/minor versions don't match server. 
            Implement this with a proper response.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleClientPatchMessage(Meridian59.Protocol.GameMessages.ClientPatchMessage)">
            <summary>
            Your client major/minor versions don't match server.
            Server responds with download info for patchinfo.txt.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleGetLoginMessage(Meridian59.Protocol.GameMessages.GetLoginMessage)">
            <summary>
            Implement this with a proper Login response
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleGetChoiceMessage(Meridian59.Protocol.GameMessages.GetChoiceMessage)">
            <summary>
            Internally handled, no need for extra stuff
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLoginOKMessage(Meridian59.Protocol.GameMessages.LoginOKMessage)">
            <summary>
            Overwrite with your code for successful login credentials
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLoginFailedMessage(Meridian59.Protocol.GameMessages.LoginFailedMessage)">
            <summary>
            Overwrite with your code for unsuccessful login credentials
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleNoCharactersMessage(Meridian59.Protocol.GameMessages.NoCharactersMessage)">
            <summary>
            Overwrite with your code for no characters error
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLoginModeMessageMessage(Meridian59.Protocol.GameMessages.LoginModeMessageMessage)">
            <summary>
            Overwrite with your code for a message instead of succssful login
            (i.e. account blocked, maintenance...)
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleDownloadMessage(Meridian59.Protocol.GameMessages.DownloadMessage)">
            <summary>
            Overwrite with your code for a mismatch resources situation (update/download)
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleCharInfoOKMessage(Meridian59.Protocol.GameMessages.CharInfoOkMessage)">
            <summary>
            Handles the "CharInfoOK" message.
            Sends a UseCharacter as reply to login the accepted avatar.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLoadModuleMessage(Meridian59.Protocol.GameMessages.LoadModuleMessage)">
            <summary>
            Handles the "LoadModule" message, basically obsolete for this framework
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleMailMessage(Meridian59.Protocol.GameMessages.MailMessage)">
            <summary>
            Handle the "Mail" message.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandlePlayerMessage(Meridian59.Protocol.GameMessages.PlayerMessage)">
            <summary>
            Handles a player info message (initializes a room)
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleCharactersMessage(Meridian59.Protocol.GameMessages.CharactersMessage)">
            <summary>
            Implement this with your handler when server sends your available characters,
            this is not stored in datalayer.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleQuitMessage(Meridian59.Protocol.GameMessages.QuitMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLookNewsGroupMessage(Meridian59.Protocol.GameMessages.LookNewsGroupMessage)">
            <summary>
            Handles a LookNewsGroupMessage by requesting its articles.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleLookupNamesMessage(Meridian59.Protocol.GameMessages.LookupNamesMessage)">
            <summary>
            Handles a LookupNames message.
            Does nothing in this base class. Overwrite it.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleSaidMessage(Meridian59.Protocol.GameMessages.SaidMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleUserCommandMessage(Meridian59.Protocol.GameMessages.UserCommandMessage)">
            <summary>
            Handles UserCommand messages
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleAdminMessage(Meridian59.Protocol.GameMessages.AdminMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleInvalidateDataMessage(Meridian59.Protocol.GameMessages.InvalidateDataMessage)">
            <summary>
            Handles the invalidate request which resetted the datalayer
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleWaitMessage(Meridian59.Protocol.GameMessages.WaitMessage)">
            <summary>
            Handles the wait request which pauses the client.
            Used in server-saves. Triggers maximum .NET Garbage Collection.
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.HandleMessageMessage(Meridian59.Protocol.GameMessages.MessageMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendGameMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendLoginMessage(System.String,System.String)">
            <summary>
            Sends the account credentials to the server (use in respond to ReqLogin)
            </summary>
            <param name="Username">accountname</param>
            <param name="Password">password for account</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqGameStateMessage">
            <summary>
            Requests a switch to gamemode protocol with final verification data (like the downloadversion)
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendCharactersMessage">
            <summary>
            Requests the characters belonging to the current account.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUseCharacterMessage(Meridian59.Data.Models.ObjectID,System.Boolean,System.String)">
            <summary>
            Requests to login with the selected avatar ID (used in selection screen).
            </summary>
            <param name="ID">Avatar ID</param>
            <param name="RequestBasicInfo">Will automatically also request required info for play</param>
            <param name="Name">A name of the character as shown with the ID</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUseCharacterMessage(System.Int32,System.Boolean)">
            <summary>
            Requests to login with the avatar at Index in
            DataController WelcomeInfo
            </summary>
            <param name="Index">Index to login from WelcomeInfo</param>
            <param name="RequestBasicInfo">Will automatically also request required info for play</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendStatsMessage(Meridian59.Common.Enums.StatGroup)">
            <summary>
            Requests your avatar's stats
            </summary>
            <param name="Type">Condition, attributes, skills, ...</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqInventoryMessage">
            <summary>
            Requests current inventory from server
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendEnchantmentsMessage(Meridian59.Common.Enums.BuffType)">
            <summary>
            Requests current enchantments from the server.
            </summary>
            <param name="Type">Either for player or for room</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendSpellsMessage">
            <summary>
            Requests avatar's known spells.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendSkillsMessage">
            <summary>
            Requests avatar's known skills
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommand(Meridian59.Data.Models.UserCommand)">
            <summary>
            Sends a self created UserCommand
            </summary>
            <param name="UserCommand"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandSendPreferences">
            <summary>
            Sends client preferences to server
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandTime">
            <summary>
            Requests the time from the server.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandDeposit(System.UInt32)">
            <summary>
            Requests to deposit something to the closest NPC? (no ID!)
            </summary>
            <param name="Amount">Amount to try to deposit</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandWithDraw(System.UInt32)">
            <summary>
            Requests to withdraw something from the closest NPC (no ID!)
            </summary>
            <param name="Amount">Amount to try to withdraw</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandBalance">
            <summary>
            Requests to have bank balance displayed.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildInfoReq">
            <summary>
            Requests the basic info about your guild
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildGuildListReq">
            <summary>
            Requests the list of existing guilds and your relation to them
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildShieldListReq">
            <summary>
            Requests the list of existing guildshields
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildShieldInfoReq">
            <summary>
            Requests data for your guildshield design.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildAbdicate(System.UInt32)">
            <summary>
            Requests to give leadership of your guild to someone else
            </summary>
            <param name="ID">ID of new leader</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildExile(System.UInt32)">
            <summary>
            Requests to exile a member of your guild.
            </summary>
            <param name="ID">ID of member to exile</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildSetRank(System.UInt32,System.Byte)">
            <summary>
            Requests to set rank of a guildmember
            </summary>
            <param name="Member"></param>
            <param name="Rank"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildVote(System.UInt32)">
            <summary>
            Requests to vote for a guildmember for leadership
            </summary>
            <param name="Member"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildInvite">
            <summary>
            Tries to invite your current target to your guild
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildInvite(System.UInt32)">
            <summary>
            Tries to invite the specified player (by object ID) into your guild
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildSetPassword(System.String)">
            <summary>
            Requests to set the guild password
            </summary>
            <param name="Password"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildRenounce">
            <summary>
            Requests to renounce your ties to your guild
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildDisband">
            <summary>
            Requests to disband your guild
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildAbandonHall">
            <summary>
            Requests to abandon your current guild hall.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildRent(System.UInt32,System.String)">
            <summary>
            Requests to rent a specific guildhall.
            </summary>
            <param name="HallID">Object ID of hall to rent</param>
            <param name="Password">Guild password for verification</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildMakeAlliance(System.UInt32)">
            <summary>
            Requests to make a guild your ally
            </summary>
            <param name="GuildID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildMakeEnemy(System.UInt32)">
            <summary>
            Requests to make a guild your enemy
            </summary>
            <param name="GuildID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildEndEnemy(System.UInt32)">
            <summary>
            Requests to turn a guild from enemy to neutral
            </summary>
            <param name="GuildID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildEndAlliance(System.UInt32)">
            <summary>
            Requests to turn a guild from ally to neutral
            </summary>
            <param name="GuildID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandClaimShield(System.Boolean)">
            <summary>
            Tries to claim the guildshield as currently stored
            in DataController GuildShieldInfo or to retrieve just data about it.
            </summary>
            <param name="ReallyClaim">Set to false to retrieve data, true to claim it</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandGuildCreate(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Requests to create a guild with given info.
            </summary>
            <param name="GuildName"></param>
            <param name="Rank1Male"></param>
            <param name="Rank2Male"></param>
            <param name="Rank3Male"></param>
            <param name="Rank4Male"></param>
            <param name="Rank5Male"></param>
            <param name="Rank1Female"></param>
            <param name="Rank2Female"></param>
            <param name="Rank3Female"></param>
            <param name="Rank4Female"></param>
            <param name="Rank5Female"></param>
            <param name="SecretGuild"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandRest">
            <summary>
            Requests to start resting
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandStand">
            <summary>
            Requests to stop resting
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandChangeURL(System.String)">
            <summary>
            Changes the URL in your avatar's details/description.
            </summary>
            <param name="URL"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandSuicide">
            <summary>
            WARNING: This will delete your current avatar.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandReqPreferences">
            <summary>
            Request client preferences stored for character on server.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqInventoryMoveMessage(System.UInt32,System.UInt32)">
            <summary>
            Requests to move inventoryitem 'FromID' right in front of 'ToID'.
            </summary>
            <param name="FromID">Item ID to move</param>
            <param name="ToID">Item ID where to move</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendActionMessage(Meridian59.Common.Enums.ActionType)">
            <summary>
            Sends a custom Action request
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqAttackMessage">
            <summary>
            Requests to hit your current target or highlighted target
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqAttackMessage(System.UInt32)">
            <summary>
            Requests to attack an object ID.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqAttackMessage(Meridian59.Data.Models.RoomObject)">
            <summary>
            Requests to attack a RoomObject.
            </summary>
            <param name="Target">The object to attack.</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqGo(System.Boolean)">
            <summary>
            Requests to Go somewhere (i.e. change room by door)
            </summary>
            <param name="SendPositionBefore"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqTurnMessage(System.UInt16,System.UInt32,System.Boolean)">
            <summary>
            Requests a turn of an ID by given Angle.
            </summary>
            <param name="Angle">New angle in binary-measurement value (0 = UNIT_X, 0 = 0°, 4096 = 0°, counterclockwise)</param>
            <param name="ID">An object ID to turn, usually your avatar ID</param>
            <param name="Forced">True ignores the delay checker</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqTurnMessage(System.Boolean)">
            <summary>
            Requests a turn of your avatar to current datamodels
            orientation (angle).
            </summary>
            <param name="Forced">True ignores the delay checker</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqMoveMessage(System.UInt16,System.UInt16,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Requests a move of your avatar
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Speed"></param>
            <param name="Angle"></param>
            <param name="ForceSend"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqMoveMessage(System.Boolean)">
            <summary>
            Requests a move of your avatar
            to current datamodels coordinates and speed.
            </summary>
            <param name="ForceSend">Ignores the update-span, but no other conditions.</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqLookMessage">
            <summary>
            Requests additional information about the current target, highlighted or closest object 
            (i.e. item or character popup)
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqLookMessage(System.UInt32)">
            <summary>
            Requests additional information about the given ID
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqCastMessage(System.UInt32)">
            <summary>
            Requests to cast a spell on your current targets,
            or on yourself depending on datacontroller values.
            </summary>
            <param name="SpellID">The SpellID to cast</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqCastMessage(Meridian59.Data.Models.SpellObject)">
            <summary>
            Requests to cast a spell on your current targets,
            or on yourself depending on datacontroller values.
            </summary>
            <param name="Spell">The SpellObject to cast</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSayToMessage(Meridian59.Common.Enums.ChatTransmissionType,System.String)">
            <summary>
            Sends chatmessage as say, yell, broadcast, ...
            </summary>
            <param name="Type"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSayGroupMessage(System.UInt32[],System.String)">
            <summary>
            Sends a chatmessage to the given object IDs (group).
            </summary>
            <param name="TargetIDs"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSayGroupMessage(System.UInt32,System.String)">
            <summary>
            Sends a chatmessage to the given object ID (tell).
            </summary>
            <param name="TargetID"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendUserCommandAppeal(System.String)">
            <summary>
            Sends an appeal with a message.
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqUseMessage(System.UInt32)">
            <summary>
            Requests to use (equip) an inventory item.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqApply(System.UInt32)">
            <summary>
            Requests to apply an inventory item with given ID on one of these 
            automatically selected targets.
            1) Highlighted
            2) Yourself
            3) Current Target
            </summary>
            <param name="ID">ID of inventory object to</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqActivate">
            <summary>
            Requests to activate the higlighted object or current target or
            else the closest activatable object.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqActivate(System.UInt32)">
            <summary>
            Requests to activate an object with given ID.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqUnuseMessage(System.UInt32)">
            <summary>
            Requests to unuse (unequip) an inventory item.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqDropMessage(Meridian59.Data.Models.ObjectID)">
            <summary>
            Requests to drop an inventory item.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqBuyMessage">
            <summary>
            Requests the buy menu from a NPC (current target)
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqBuyItemsMessage(System.UInt32,Meridian59.Data.Models.ObjectID[])">
            <summary>
            Requests to buy Items from Target ID
            </summary>
            <param name="TargetID"></param>
            <param name="Items"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqGetMessage(Meridian59.Data.Models.ObjectID)">
            <summary>
            Requests to loot/get an item
            </summary>
            <param name="Target"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqGetMessage">
            <summary>
            Requests to get/loot your current target object
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqAdminMessageLoginMode">
            <summary>
            Requests admin access in login protocol mode (AP_REQ_ADMIN)
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqAdminMessage(System.String)">
            <summary>
            Requests to execute an admin command. (BP_REQ_ADMIN).
            This is strictly for admin console command.
            See SendReqDM() and SendSayTo() for others.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqArticles(System.UInt16)">
            <summary>
            Requests the articles of Newsglobe given by ID
            </summary>
            <param name="NewsGroupID"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqArticles">
            <summary>
            Requests the articles of last look newsglobe
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqArticle(System.UInt32,System.UInt32)">
            <summary>
            Requests an article with num from globe with ID
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqArticle(System.UInt32)">
            <summary>
            Requests an article with num from last look newsglobe
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendPostArticle(System.UInt16,System.String,System.String)">
            <summary>
            Requests to post an article in a newsgroup (globe).
            </summary>
            <param name="GlobeID"></param>
            <param name="Title"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqOffer(Meridian59.Data.Models.ObjectID,Meridian59.Data.Models.ObjectID[])">
            <summary>
            Offers a set of items to an object as trade initiation
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqDeposit(Meridian59.Data.Models.ObjectID,Meridian59.Data.Models.ObjectID[])">
            <summary>
            Requests to deposit items into an holder.
            </summary>
            <param name="Holder"></param>
            <param name="Items"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqCounterOffer(Meridian59.Data.Models.ObjectID[])">
            <summary>
            Offers a set of items as respone to a trade initiated by other party.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendChangedStatsMessage">
            <summary>
            Sends modified stat values from datalayer to the server, requesting a stat change.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendAcceptOffer">
            <summary>
            Accepts a pending trade/offer.
            This also clears the Trade in the DataController afterwards.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendCancelOffer">
            <summary>
            Rejects a pending trade/offer.
            This also clears the Trade in DataController afterwards.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendPlayer">
            <summary>
            Request the basic room/player info
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendRoomContents">
            <summary>
            Request the room contents
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendObjectContents(System.UInt32)">
            <summary>
            Requests the contents of an object
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendObjectContents">
            <summary>
            Requests the contents of the higlighted object or current target or
            else the closest object marked as container.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqPut(Meridian59.Data.Models.ObjectID,Meridian59.Data.Models.ObjectID)">
            <summary>
            Requests to put 'Item' into 'Target'
            </summary>
            <param name="Item"></param>
            <param name="Target"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendPlayers">
            <summary>
            Request the list of online players
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqDM(Meridian59.Common.Enums.DMCommandType,System.String)">
            <summary>
            Sends a ReqDM message with commands: go, goplayer, getplayer.
            For admin-console commands see SendReqAdmin()
            For "dm" commands see SendSayTo()
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendChangeDescription(System.String)">
            <summary>
            Changes your avatar's description in your details window.
            </summary>
            <param name="Description"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendChangeDescription(System.UInt32,System.String)">
            <summary>
            Changes the inscription of editable object details
            </summary>
            <param name="ID"></param>
            <param name="Description"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSystemMessageSendCharInfo(System.UInt32)">
            <summary>
            Requests the avatar creation wizard info
            </summary>
            <param name="SlotID">
            Optional and not transfered to the server here.
            If set it will update DataController.CharCreationInfo.SlotID
            </param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSystemMessageNewCharInfo">
            <summary>
            Requests to create an avatar with the data from
            DataController.CharCreationInfo.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqQuit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendDeleteMail(System.UInt32)">
            <summary>
            Requests to delete the mail with Num on server.
            </summary>
            <param name="Num"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendDeleteNews(System.UInt16,System.UInt32)">
            <summary>
            Requests to delete the newsgroup article with Num in a globe from the server.
            </summary>
            <param name="NewsGroupID"></param>
            <param name="Num"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqGetMail">
            <summary>
            Requests to download all mails from the server.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendReqLookupNames(System.String[])">
            <summary>
            Requests the current object IDs for players with given names.
            Server will respond a "LookupNames" message result.
            </summary>
            <param name="Names"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.SendSendMail(Meridian59.Data.Models.ObjectID[],System.String,System.String)">
            <summary>
            Requests to send a mail with given Subject and Text to Recipients.
            </summary>
            <param name="RecipientIDs"></param>
            <param name="Subject"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.RequestInfoAfterLogin">
            <summary>
            Requests basic info not automatically transmitted after login
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.RequestInfoAfterServerSave">
            <summary>
            Requests all invalidated info after server save
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.TryMove(Meridian59.Common.V2,System.Byte,System.Double)">
            <summary>
            Tries to move your avatar in the given 2D direction on the ground.
            Call this method each gametick (=threadloop) you want to process a movement.
            This honors map collisions and object collisions.
            </summary>
            <param name="Direction">Direction vector, gets normalized</param>
            <param name="Speed">The speed of the movement.</param>
            <param name="PlayerHeight">Height of the player for ceiling collisions (in ROO scale!)</param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.TryYaw(System.Double)">
            <summary>
            Tries to yaw your avatar by given radian angle.
            Negative and Positive gives direction.
            </summary>
            <param name="Radian"></param>
            <returns>Whether the yaw was successful or not</returns>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.LootAll">
            <summary>
            This loots all objects in range.
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.LootAllStackables">
            <summary>
            Loot all stackables
            </summary>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.UseUnuseApply(Meridian59.Data.Models.InventoryObject)">
            <summary>
            Uses, unuses or applies an item based on its flags/inuse state.
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.ExecChatCommand(System.String)">
            <summary>
            Try to execute a known command from chat/textinput
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.ExecAction(Meridian59.Common.Enums.AvatarAction)">
            <summary>
            Try to execute a defined action.
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:Meridian59.Client.BaseClient`4.Suicide">
            <summary>
            By default this function does nothing.
            It's executed by 'Suicide' ChatCommand and must be overwritten with code calling
            SendUserCommandSuicide() to actually perform the suicide.
            </summary>
        </member>
        <member name="T:Meridian59.Client.RootClient`4">
            <summary>
            The root class of the client-class hierarchy.
            Just a very basic skeleton witout a real server-connection.
            </summary>
            <remarks>
            The generics are supposed to allow you to use the abstract
            client class-hierarchy, but plug in your own/modified, deriving module-implementations.
            </remarks>
            <typeparam name="T">Type of GameTick or deriving class</typeparam>
            <typeparam name="R">Type of ResourceManager or deriving class</typeparam>
            <typeparam name="D">Type of DataController or deriving class</typeparam>
            <typeparam name="C">Type of Config or deriving class</typeparam>
        </member>
        <member name="F:Meridian59.Client.RootClient`4.MODULENAME">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Client.RootClient`4.CHARDLL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Client.RootClient`4.SLEEPTIME">
            <summary>
            Sleep this long at the end of Tick()
            </summary>
        </member>
        <member name="F:Meridian59.Client.RootClient`4.IsRunning">
            <summary>
            If this turns false the application quits
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.MainThread">
            <summary>
            The mainthread that created the client instance
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.GameTick">
            <summary>
            Current GameTick data
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.ResourceManager">
            <summary>
            Legacy ResourceManager
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.Data">
            <summary>
            DataController
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.Config">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.CurrentRoom">
            <summary>
            Shortcut to roomdata in DataController
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.Outfitter">
            <summary>
            An outfit helper
            </summary>
        </member>
        <member name="P:Meridian59.Client.RootClient`4.Process">
            <summary>
            The process that has started OgreClient
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.Start(System.Boolean,System.String,System.String)">
            <summary>
            Starts the application.
            </summary>
            <param name="ConfigFile"></param>
            <param name="ConfigFileAlt"></param>
            <param name="AutoTick">Set this to false to call Tick() manually and not lock the thread.</param>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.Tick">
            <summary>
            Process a game tick.
            Call this yourself only if you had set AutoTick to false
            when executed Start()
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.Init">
            <summary>
            Overwrite with additional startup code. This is not part of the object construction.
            It will be called by Start() before entering the application loop.
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.Update">
            <summary>
            Implement this with your code for each tick/update.
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.Cleanup">
            <summary>
            Cleanup, runs after loop exits
            </summary>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.HandleGameMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Top level handler for a new GameMessage from server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.HandleLoginModeMessage(Meridian59.Protocol.GameMessages.LoginModeMessage)">
            <summary>
            Will be executed for any new LoginMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            Will be executed for any new GameMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Client.RootClient`4.SendGameMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Sends a GameMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Meridian59.Client.SingletonClient`5">
            <summary>
            Extends the BaseClient class by adding a Singleton pattern/instance.
            Use this if you want only one client instance within your application
            and want it to be easy accessible as Singleton.
            </summary>
            <remarks>
            The generics are supposed to allow you to use the abstract
            client class-hierarchy, but plug in your own/modified, deriving module-implementations.
            </remarks>
            <typeparam name="T">Type of GameTick or deriving class</typeparam>
            <typeparam name="R">Type of ResourceManager or deriving class</typeparam>
            <typeparam name="D">Type of DataController or deriving class</typeparam>
            <typeparam name="C">Type of Config or deriving class</typeparam>
            <typeparam name="S">Type of SingletonClient or deriving class</typeparam>
        </member>
        <member name="P:Meridian59.Client.SingletonClient`5.Singleton">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Meridian59.Client.SingletonClient`5.#cctor">
            <summary>
            Static constructor creating singleton instance.
            </summary>
        </member>
        <member name="T:Meridian59.Bot.BotConfig">
            <summary>
            Reads bot configuration file
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotConfig.IsAdmin(System.String)">
            <summary>
            Says whether a name is on the admin list
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Bot.BotConfig.HasLogFile">
            <summary>
            Whether a logfile is set or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Bot.BotConfig.ReadXml(System.Xml.XmlDocument)">
            <summary>
            
            </summary>
            <param name="Document"></param>
        </member>
        <member name="T:Meridian59.Bot.BotServiceWrapper`5">
            <summary>
            Wraps a BotClient or deriving client class instance
            into a Windows service.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <typeparam name="D"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="X"></typeparam>
        </member>
        <member name="F:Meridian59.Bot.BotServiceWrapper`5.workThread">
            <summary>
            This thread will run the client
            </summary>
        </member>
        <member name="F:Meridian59.Bot.BotServiceWrapper`5.isRunning">
            <summary>
            Flag for our recreate-client loop
            </summary>
        </member>
        <member name="F:Meridian59.Bot.BotServiceWrapper`5.client">
            <summary>
            This client will be executed by the service
            </summary>
        </member>
        <member name="F:Meridian59.Bot.BotServiceWrapper`5.configFile">
            <summary>
            Stores config file to use
            </summary>
        </member>
        <member name="F:Meridian59.Bot.BotServiceWrapper`5.configFileAlt">
            <summary>
            Stores alternative config file to use
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotServiceWrapper`5.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotServiceWrapper`5.OnStart(System.String[])">
            <summary>
            Executed when service starts.
            Do not lock here!
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Meridian59.Bot.BotServiceWrapper`5.OnStop">
            <summary>
            Executed when service is requested to stop
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotServiceWrapper`5.ThreadProc">
            <summary>
            Executed by internal thread.
            This thread runs the client.
            </summary>
        </member>
        <member name="T:Meridian59.Bot.BotClient`4">
            <summary>
            A still abstract and generic bot client class extending BaseClient.
            </summary>
            <typeparam name="T">Type of GameTick or deriving class</typeparam>
            <typeparam name="R">Type of ResourceManager or deriving class</typeparam>
            <typeparam name="D">Type of DataController or deriving class</typeparam>
            <typeparam name="C">Type of Config or deriving class</typeparam>
        </member>
        <member name="F:Meridian59.Bot.BotClient`4.logWriter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Bot.BotClient`4.logLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Bot.BotClient`4.IsService">
            <summary>
            Set this to true if you run the instance in a windows service environment.
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.Log(System.String,System.String)">
            <summary>
            Logs to file or console
            </summary>
            <param name="Type"></param>
            <param name="Text"></param>
        </member>
        <member name="P:Meridian59.Bot.BotClient`4.AppVersionMajor">
            <summary>
            Major version of the client
            </summary>
        </member>
        <member name="P:Meridian59.Bot.BotClient`4.AppVersionMinor">
            <summary>
            Minor version of the client
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnServerConnectionException(System.Exception)">
            <summary>
            
            </summary>
            <param name="Error"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleGetClientMessage(Meridian59.Protocol.GameMessages.GetClientMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleGetLoginMessage(Meridian59.Protocol.GameMessages.GetLoginMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleLoginOKMessage(Meridian59.Protocol.GameMessages.LoginOKMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleLoginFailedMessage(Meridian59.Protocol.GameMessages.LoginFailedMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleLoginModeMessageMessage(Meridian59.Protocol.GameMessages.LoginModeMessageMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleDownloadMessage(Meridian59.Protocol.GameMessages.DownloadMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleCharactersMessage(Meridian59.Protocol.GameMessages.CharactersMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandlePlayerMessage(Meridian59.Protocol.GameMessages.PlayerMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleOfferMessage(Meridian59.Protocol.GameMessages.OfferMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleCounterOfferMessage(Meridian59.Protocol.GameMessages.CounterOfferMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleCreateMessage(Meridian59.Protocol.GameMessages.CreateMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.HandleSaidMessage(Meridian59.Protocol.GameMessages.SaidMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.ProcessCommand(System.UInt32,System.String[])">
            <summary>
            Override with main handler for received chat textcommands
            </summary>
            <param name="PartnerID">Command invoked by this (player) id</param>
            <param name="Words">First elment is command name</param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomObjectsListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomObjectAdded(Meridian59.Data.Models.RoomObject)">
            <summary>
            Executed when roomobjectlist added an item
            </summary>
            <param name="RoomObject"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomObjectRemoved(Meridian59.Data.Models.RoomObject)">
            <summary>
            Executed when roomobject list removed an item
            </summary>
            <param name="RoomObject"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomObjectReset">
            <summary>
            Executed when roomobject list has been reset
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomObjectChanged(Meridian59.Data.Models.RoomObject)">
            <summary>
            Executed when roomobject list changed an item
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnRoomInformationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnDataControllerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnAvatarConditionListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnInventoryObjectsListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.OnOnlinePlayersListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.ProcessKeyPress(System.ConsoleKeyInfo)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawCondition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawRoom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawResting">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawRTT">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawCash">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawCoordinates">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Bot.BotClient`4.DrawBoxes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.BoundingBox3D">
            <summary>
            A three dimensional boundingbox described
            by a minimum and a maxmimum point.
            </summary>
        </member>
        <member name="P:Meridian59.Common.BoundingBox3D.NULL">
            <summary>
            A box with both points zero.
            </summary>
        </member>
        <member name="F:Meridian59.Common.BoundingBox3D.Min">
            <summary>
            The Minimum
            </summary>
        </member>
        <member name="F:Meridian59.Common.BoundingBox3D.Max">
            <summary>
            The Maximum
            </summary>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.#ctor(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Constructor using two initial points.
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.ExtendByPoint(Meridian59.Common.V3)">
            <summary>
            Adjusts the current min, max accordingly in case
            the new point lies outside the current box.
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.ExtendByBoundingBox(Meridian59.Common.BoundingBox3D)">
            <summary>
            Possibly extends the Min and Max by the
            Min and Max of parameter.
            </summary>
            <param name="Box"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.IsValid">
            <summary>
            True if all components of Min are
            smaller than the components of Max.
            No valid box if both are the same (point) or
            have same value in a component (line).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.Equals(System.Object)">
            <summary>
            Overridden equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.Equals(Meridian59.Common.BoundingBox3D)">
            <summary>
            Typed equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.op_Equality(Meridian59.Common.BoundingBox3D,Meridian59.Common.BoundingBox3D)">
            <summary>
            Implemented operator
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.op_Inequality(Meridian59.Common.BoundingBox3D,Meridian59.Common.BoundingBox3D)">
            <summary>
            Implemented operator
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox3D.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.BoundingBox2D">
            <summary>
            A two dimensional boundingbox described
            by a minimum and a maxmimum point.
            </summary>
        </member>
        <member name="P:Meridian59.Common.BoundingBox2D.NULL">
            <summary>
            A box with both points zero.
            </summary>
        </member>
        <member name="F:Meridian59.Common.BoundingBox2D.Min">
            <summary>
            The Minimum
            </summary>
        </member>
        <member name="F:Meridian59.Common.BoundingBox2D.Max">
            <summary>
            The Maximum
            </summary>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.#ctor(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Constructor using two initial points.
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.ExtendByPoint(Meridian59.Common.V2)">
            <summary>
            Adjusts the current min, max accordingly in case
            the new point lies outside the current box.
            </summary>
            <param name="Point"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.ExtendByBoundingBox(Meridian59.Common.BoundingBox2D)">
            <summary>
            Possibly extends the Min and Max by the
            Min and Max of parameter.
            </summary>
            <param name="Box"></param>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.IsValid">
            <summary>
            True if all components of Min are
            smaller than the components of Max.
            No valid box if both are the same (point) or
            have same value in a component (line).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.IsInside(Meridian59.Common.V2,System.Double)">
            <summary>
            Checks whether a point is inside the boundingbox
            </summary>
            <param name="P">Point to check</param>
            <param name="Extent"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.Equals(System.Object)">
            <summary>
            Overridden equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.Equals(Meridian59.Common.BoundingBox2D)">
            <summary>
            Typed equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.op_Equality(Meridian59.Common.BoundingBox2D,Meridian59.Common.BoundingBox2D)">
            <summary>
            Implemented operator
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.op_Inequality(Meridian59.Common.BoundingBox2D,Meridian59.Common.BoundingBox2D)">
            <summary>
            Implemented operator
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.BoundingBox2D.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.Config">
            <summary>
            Base class for all configuration files
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.ConfigFile">
            <summary>
            Returns the path/filename of the config file
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.ConfigFileAlt">
            <summary>
            Returns the path/filename of the alternative config file
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.ResourcesVersion">
            <summary>
            Version of Resources
            </summary>
            <remarks>
            This value can also be found in legacy meridian.ini
            It's the value behind Download=XXXXX.
            If you send a value below a server set minimum,
            you will be redirected to a resource update.
            </remarks>
        </member>
        <member name="P:Meridian59.Common.Config.ResourcesPath">
            <summary>
            Path to resources root
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.PreloadRooms">
            <summary>
            Whether to preload room files or not.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.PreloadObjects">
            <summary>
            Whether to preload bgf objects or not.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.PreloadRoomTextures">
            <summary>
            Whether to preload room textures or not.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.PreloadSound">
            <summary>
            Whether to preload sounds or not.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.PreloadMusic">
            <summary>
            Whether to preload music or not.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.Connections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.SelectedConnectionIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.SelectedConnectionInfo">
            <summary>
            Returns the entry from Connections based on SelectedConnectionIndex.
            Or Null if this index does not exist.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.Language">
            <summary>
            Currently selected Language
            </summary>
        </member>
        <member name="P:Meridian59.Common.Config.Aliases">
            <summary>
            
            </summary>
        </member>
        <member name="E:Meridian59.Common.Config.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Common.Config.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Will raise PropertyChangedEvent if a listener exists.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Common.Config.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Meridian59.Common.Config.#ctor">
            <summary>
            Constructor. Will load configuration file directly.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Config.Load(System.String,System.String)">
            <summary>
            Loads the configuration using XmlReader.
            Tries ConfigFile first, then ConfiglFileAlt, otherwise uses defaults.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Config.Save">
            <summary>
            Saves the current configuration to CONFIGFILE.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Config.HasConnection(System.String,System.UInt16)">
            <summary>
            Checks if the given host and port can be found in the connections BindingList.
            </summary>
            <param name="Host"></param>
            <param name="Port"></param>
        </member>
        <member name="M:Meridian59.Common.Config.ReadXml(System.Xml.XmlDocument)">
            <summary>
            Does nothing by default, overwrite if necessary.
            </summary>
            <param name="Document"></param>
        </member>
        <member name="M:Meridian59.Common.Config.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Does nothing by default, overwrite if necessary.
            </summary>
            <param name="Writer"></param>
        </member>
        <member name="T:Meridian59.Common.Constants.ChatSubStrings">
            <summary>
            A set of important M59 substrings in chat
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings">
            <summary>
            A set of important M59 strings
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items">
            <summary>
            All kind of items
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Armor">
            <summary>
            Strings of armors
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Shields">
            <summary>
            Strings of shields
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Helms">
            <summary>
            Strings of helms
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Weapons">
            <summary>
            Strings of weapons
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Food">
            <summary>
            Strings of food
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.ResourceStrings.Items.Food.NUTRITIONS">
            <summary>
            Lookup nutrition / gain in vigor from here. Do not edit at runtime.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.GodGifts">
            <summary>
            Strings of god gifts
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Equipment">
            <summary>
            Strings of other equipment
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Rods">
            <summary>
            Strings of wands
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Reagents">
            <summary>
            Strings of reagents
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Items.Others">
            <summary>
            Others
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Spells">
            <summary>
            All spellnames
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Sounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Rooms">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.Others">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ResourceStrings.BGF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.ResourceStrings.BGF.Icons">
            <summary>
            Filenames of typical game-icons.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.MeridianExeCRCs">
            <summary>
            CRC16 values of recent meridian.exe files
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.ClientVersions">
            <summary>
            Major and minor versions of recent clients
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.StatNums">
            <summary>
            The num for the common stats as they appear in Stat class.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.StatNumsValues">
            <summary>
            Some special values appearing in stats.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.RobesColors">
            <summary>
            Some special colorpalette indices of robes
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.RTTValues">
            <summary>
            Thresholds for categorizing RTT values.
            Defined as "smaller or equal".
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.FPSValues">
            <summary>
            Thresholds for categorizing FPS values.
            Defined as "greater or equal".
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.BlakservStringLengths">
            <summary>
            Defines minimum and maximum string lengths from server-side.
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.GeometryConstants">
            <summary>
            Constants for geometry calculations.
            </summary>
            <remarks>
            This library is build in a scale like fine server/KOD coordinate-system/grid
            interpreted as floating point locally.
            </remarks>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.FINENESS">
            <summary>
            Legacy FINENESS value from drawdefs.h
            This is the highest resolution the legacy client and the rooms are operating in.
            It means 1024 client rows/cols make 1 big row/col in the servergrid.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.KOD_FINENESS">
            <summary>
            Legacy KOD_FINESS value from drawdefs.h.
            This is the highest resolution blakserv is running at.
            It means 64 fine rows/cols make 1 big row/col in the servergrid.
            The new client/renderer also operates in this scale, but with floating point type.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.KODFINETOCLIENTFINE">
            <summary>
            Multiply by this to scale from server and new client FINENESS to legacy client FINENESS
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.CLIENTFINETOKODFINE">
            <summary>
            Multiply by this to scale from legacy client FINENESS to server and new client FINENESS
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.LOG_FINENESS">
            <summary>
            Legacy LOG_FINENESS value from drawdefs.h
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.MAXSTEPHEIGHT">
            <summary>
            Maximum height a player can step across a wall.
            From legacy move.c MAX_STEP_HEIGHT.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.MAXANGLE">
            <summary>
            Max. M59 angle value (in angle units).
            4096 maps back to 0 like 2PI does to 0.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.HALFMAXANGLE">
            <summary>
            Half of the max angle value (in angleunits)
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.QUARTERMAXANGLE">
            <summary>
            Quarter of the max angle (in angleunits)
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.M59ANGLETORADQUOT">
            <summary>
            From angle units to radian
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.RADTOM59ANGLEQUOT">
            <summary>
            From radian to angle units
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.MOVEBASECOEFF">
            <summary>
            Base coefficient for object movements.
            This is the distance moved in 1ms at a speed of 1.
            Distance in floatingpoint scale equal to the server fine-units.
            Multiply with dt in ms and speed (viSpeed).
            </summary>
            <remarks>
            Speed unit is defined as # big server square moves per 10000ms
            Calculates like this:
            ---------------------
             * 0.0001f: # bigsquares per 1ms
                 * 64f: 64 finesquares per square
            </remarks>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.PROJECTILEMOVEBASECOEFF">
            <summary>
            Base coefficient for projectile movement speed
            This is the distance moved in 1ms at a speed of 1.
            </summary>
            <remarks>
            Old client interprets projectile speeds 10x faster as
            object movements:
            # big server square moves per 1000ms
            </remarks>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.SECTORMOVEBASECOEFF">
            <summary>
            Base coefficient for sector move speed.
            This is merged: Multiply by 16 and divide by 10000.
            See original code.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.GRAVITYACCELERATION">
            <summary>
            This is the gravity acceleration in unit/ms².
            Unit is distance in client scale.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.CLOSEDISTANCE">
            <summary>
            Objects must be this close for get, put, etc.
            In client scale.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.CLOSEDISTANCE2">
            <summary>
            CLOSEDISTANCE Squared
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.TWOPI">
            <summary>
            Full period in radian (2*PI)
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.QUARTERPERIOD">
            <summary>
            Radian of quarter period
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.HALFPERIOD">
            <summary>
            Radian of half period
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.PLAYERHEIGHT">
            <summary>
            Estimated player eyes height
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.PLAYERWIDTH">
            <summary>
            Estimated player width in KOD (also new client float) scale.
            </summary>
            <remarks>
            See 'SetPlayerInfo()' in 'clientd3d/game.c'
            </remarks>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.WALLMINDISTANCE">
            <summary>
            Minimum distance player has to stay away from wall.
            This is half of the PLAYERWIDTH.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.WALLMINDISTANCE2">
            <summary>
            Squared minimum distance player has to stay away from wall
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.TARGETBEHINDRADIUS">
            <summary>
            Max. radius for objects behind
            to care about them.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.TARGETFRONTRADIUS">
            <summary>
            Max. radius for objects in front
            to care about them.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.MIN_NOMOVEON">
            <summary>
            Object block radius in world scale.
            See MIN_NOMOVEON in 'clientd3d/move.c'
            </summary>
            <remarks>
            Calculates like this:
            ---------------------
              FINENESS: Use legacy definition as start
               * 0.25f: This is (FINENESS / 4) like in orig.code
             * 0.0625f: This lib uses server-scale in FP, orig is ROO/old client scale
            </remarks>
        </member>
        <member name="F:Meridian59.Common.Constants.GeometryConstants.MIN_NOMOVEON2">
            <summary>
            Simply MIN_NOMOVEON * MIN_NOMOVEON
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.FileExtensions">
            <summary>
            Common used filename lowercase extensions for filetypes (including .)
            </summary>
        </member>
        <member name="T:Meridian59.Common.Constants.TypeSizes">
            <summary>
            TypeSizes in M59
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.CharInfoNotOkError">
            <summary>
            Error codes received from the server during character creation.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.KnownHotspot">
            <summary>
            Known hotspot numbers on objects and their position.
            Like Head/Mouth/Nose/...
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.HealthStatus">
            <summary>
            A basic health status of a RoomObject,
            based on the "ouch" sound levels.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.LanguageCode">
            <summary>
            Language codes as used in RSB files for example.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.RoomAnimationAction">
            <summary>
            Type of WallAnimate action
            </summary>
            <remarks>
            See RA_NONE, RA_PASSABLE_END ... in original proto.h
            </remarks>
        </member>
        <member name="T:Meridian59.Common.Enums.PlayerOverlayHotspot">
            <summary>
            Hotspots for 1. person PlayerOverlays.
            Each one specifies a certain point on the screen.
            </summary>
            <remarks>
            See original: proto.h
            </remarks>
        </member>
        <member name="T:Meridian59.Common.Enums.LogType">
            <summary>
            Type of a logentry
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.UIMode">
            <summary>
            Possible states of the UI
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.AccountType">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ActionButtonType">
            <summary>
            Type of an actionbutton
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.AnimationType">
            <summary>
            The type of an animation
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.AvatarAction">
            <summary>
            Typical actions performed by player
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ChatCommandType">
            <summary>
            Different types of chatcommands
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ChatColor">
            <summary>
            Possible M59 chat colors
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.HotSpotType">
            <summary>
            HotSpot type on BGF frames
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.WorldScaleType">
            <summary>
            The different world-scales / coordinate system sizes.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.StatGroup">
            <summary>
            The Group a stat can belong to
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.BaseRenderType">
            <summary>
            DEPRECATED
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.BuffType">
            <summary>
            Type of a buff (room/player)
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ChatMessageType">
            <summary>
            The subtypes of chatmessages that exist
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ChatTransmissionType">
            <summary>
            How to transmit
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.EffectType">
            <summary>
            Possible effects 
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.Gender">
            <summary>
            Male and female gender
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.InlineVariableType">
            <summary>
            The possible inline variable types (%i, %q, %s) in resource string
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.DMCommandType">
            <summary>
            The DM commandtypes in message "BP_REQ_DM".
            Note: Just these few produce a "BP_REQ_DM", other commands are implemented by other messages.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.StatType">
            <summary>
            The stat subtype.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.TextureScrollSpeed">
            <summary>
            Scroll speeds for room textures
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.TextureScrollDirection">
            <summary>
            Texture scroll direction values
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.WallPartType">
            <summary>
            A wall-side can have 3 parts
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.MovementSpeed">
            <summary>
            The movement speeds.
            These are known as viSpeed of objects on the server-side.
            Defined in blakston.khd and some .kod files
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.SchoolType">
            <summary>
            Possible schooltypes of a spell
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.UserCommandType">
            <summary>
            Subtype of a UserCommand
            </summary>
        </member>
        <member name="T:Meridian59.Common.Enums.ActionType">
            <summary>
            Actions in terms of M59 action definitions and message protocol.
            Differs from "Actions" in the client.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.InventoryObjectEventHandler">
            <summary>
            Delegate for InventoryObjectEventArgs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Events.InventoryObjectEventArgs">
            <summary>
            EventArgs carrying InventoryObject model
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.ActionTypeEventHandler">
            <summary>
            Delegate for ActionTypeEventArgs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Events.ActionTypeEventArgs">
            <summary>
            EventArgs carrying ActionType enum
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.AvatarActionEventHandler">
            <summary>
            Delegate for AvatarActionEventArgs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Events.AvatarActionEventArgs">
            <summary>
            EventArgs carrying AvatarAction enum
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.IntegerEventArgs">
            <summary>
            EventArgs carrying an integer
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.StringEventArgs">
            <summary>
            EventArgs carrying a string
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.ObjectIDEventHandler">
            <summary>
            Delegate for ObjectIDEventArgs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Events.ObjectIDEventArgs">
            <summary>
            EventArgs carrying ObjectID model
            </summary>
        </member>
        <member name="T:Meridian59.Common.Events.SpellObjectEventHandler">
            <summary>
            Delegate for SpellObjectEventArgs
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Events.SpellObjectEventArgs">
            <summary>
            EventArgs carrying SpellObject model
            </summary>
        </member>
        <member name="T:Meridian59.Common.Flags">
            <summary>
            Base class for uint flags.
            </summary>
        </member>
        <member name="F:Meridian59.Common.Flags.PROPNAME_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="E:Meridian59.Common.Flags.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Common.Flags.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Meridian59.Common.Flags.flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Common.Flags.Value">
            <summary>
            The flags
            </summary>
        </member>
        <member name="M:Meridian59.Common.Flags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Meridian59.Common.Flags.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Common.Flags.#ctor(System.Byte*@)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Common.Flags.ToString">
            <summary>
            Overriden. Will return value of flags as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.GameTick">
            <summary>
            A game ticking system with 64-Bit ticks and millisecond resolution.
            </summary>
        </member>
        <member name="F:Meridian59.Common.GameTick.MSINSECOND">
            <summary>
            Milliseconds in a second
            </summary>
        </member>
        <member name="F:Meridian59.Common.GameTick.MSTICKDIVISOR">
            <summary>
            Divide 'ElapsedTicks' of StopWatch by this to get milliseconds.
            </summary>
        </member>
        <member name="F:Meridian59.Common.GameTick.watch">
            <summary>
            Static Stopwatch object, usually high resolution on most CLR.
            Shared across all possible instances!
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Current">
            <summary>
            Current tick
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Last">
            <summary>
            Last tick
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.TPSMeasure">
            <summary>
            Tick we last calculated (T)icks(P)er(S)econd
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqMove">
            <summary>
            Tick we last sent BP_REQ_MOVE to the server
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqTurn">
            <summary>
            Tick we last sent BP_REQ_TURN to the server
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqAttack">
            <summary>
            Tick we last sent BP_REQ_ATTACK to the server
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqCast">
            <summary>
            Tick we last sent BP_REQ_CAST to the server
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqUserCommand">
            <summary>
            Tick we last sent BP_USERCOMMAND
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.ReqAction">
            <summary>
            Tick we last sent BP_ACTION (dance, wave, loot, moods)
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Say">
            <summary>
            Tick we last sent a chatmessage in NORMAL mode
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Broadcast">
            <summary>
            Tick we last sent a chatmessage in ALL mode
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Interactions">
            <summary>
            Ticks we last sent an interaction with an ID, like
            BP_REQ_USE, BP_REQ_APPLY, BP_REQ_UNUSE, BP_REQ_LOOK and others.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.Span">
            <summary>
            Milliseconds elapsed since last tick.
            Calculated once.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanTPSMeasure">
            <summary>
            Milliseconds elapsed since last TPS measuring.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqMove">
            <summary>
            Milliseconds elapsed since last BP_REQ_MOVE.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqTurn">
            <summary>
            Milliseconds elapsed since last BP_REQ_TURN.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqAttack">
            <summary>
            Milliseconds elapsed since last BP_REQ_ATTACK.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqCast">
            <summary>
            Milliseconds elapsed since last BP_REQ_CAST.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqUserCommand">
            <summary>
            Milliseconds elapsed since last BP_USERCOMMAND.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanReqAction">
            <summary>
            Milliseconds elapsed since last BP_ACTION.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanSay">
            <summary>
            Milliseconds elapsed since last said something.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.SpanBroadcast">
            <summary>
            Milliseconds elapsed since last broadcasted something.
            Calculated on-the-fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.GameTick.IsHighResolution">
            <summary>
            Whether the underlying timersystem supports high resolution.
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.Tick">
            <summary>
            Proceed to next game tick.
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.GetUpdatedTick">
            <summary>
            Returns a dedicated ms tick for this moment from the clock.
            This might be later than Current, depending on thread cycle duration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanTPSMeasure">
            <summary>
            Call this to know if you can measure TPS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqMove">
            <summary>
            Call this to know if you can send a BP_REQ_MOVE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqTurn">
            <summary>
            Call this to know if you can send a BP_REQ_TURN
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqAttack">
            <summary>
            Call this to know if you can send a BP_REQ_ATTACK
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqCast">
            <summary>
            Call this to know if you can send a BP_REQ_CAST
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqUserCommand">
            <summary>
            Call this to know if you can send a BP_USERCOMMAND
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanReqAction">
            <summary>
            Call this to know if you can send a BP_ACTION
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanInteract(System.UInt32)">
            <summary>
            Call this to know if you can interact with an ID,
            like BP_REQ_USE, BP_REQ_APPLY, BP_REQ_LOOK and others.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanSay">
            <summary>
            Call this to know if you can say something.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.CanBroadcast">
            <summary>
            Call this to know if you can broadcast something.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidTPSMeasure">
            <summary>
            Call this when you did a TPS measuring
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqMove">
            <summary>
            Call this when you sent a BP_REQ_MOVE
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqTurn">
            <summary>
            Call this when you sent a BP_REQ_TURN
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqAttack">
            <summary>
            Call this when you sent a BP_REQ_ATTACK
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqCast">
            <summary>
            Call this when you sent a BP_REQ_CAST
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqUserCommand">
            <summary>
            Call this when you sent a BP_USERCOMMAND
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidReqAction">
            <summary>
            Call this when you sent a BP_ACTION
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidSay">
            <summary>
            Call this when you said something
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidBroadcast">
            <summary>
            Call this when you broadcasted something
            </summary>
        </member>
        <member name="M:Meridian59.Common.GameTick.DidInteract(System.UInt32)">
            <summary>
            Call this when you interacted with an ID, like
            sent a BP_REQ_USE or BP_REQ_APPLY for an item.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.ITickable">
            <summary>
            Interface for objects requiring repeated updates at runtime.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Interfaces.ITickable.Tick(System.Double,System.Double)">
            <summary>
            Processes a tick.
            </summary>
            <param name="Tick">Current tick</param>
            <param name="Span">Elapsed time since last tick</param>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IByteSerializable">
            <summary>
            Interface for serializing class instances to and from raw bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Interfaces.IByteSerializable.ByteLength">
            <summary>
            The amount of bytes the byte-representation requires.
            </summary>
        </member>
        <member name="P:Meridian59.Common.Interfaces.IByteSerializable.Bytes">
            <summary>
            Serialized bytes of the class implementing this.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Interfaces.IByteSerializable.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Write the bytes to a Buffer starting at StartIndex
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Interfaces.IByteSerializable.ReadFrom(System.Byte[],System.Int32)">
            <summary>
            Reads the bytes from a Buffer starting at StartIndex
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IByteSerializableFast">
            <summary>
            Extended variant of <see cref="T:Meridian59.Common.Interfaces.IByteSerializable" />, adding additional faster, pointer based parser methods.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Interfaces.IByteSerializableFast.WriteTo(System.Byte*@)">
            <summary>
            Writes this instance byte serialized to the pointer.
            </summary>
            <param name="Buffer">Pointer to start writing</param>
        </member>
        <member name="M:Meridian59.Common.Interfaces.IByteSerializableFast.ReadFrom(System.Byte*@)">
            <summary>
            Reads this instance from bytes at pointer.
            </summary>
            <param name="Buffer">Pointer to start reading</param>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IClearable">
            <summary>
            Interface for model supporting clearing
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IGameFile">
            <summary>
            Generic interface for game resources
            </summary>
        </member>
        <member name="P:Meridian59.Common.Interfaces.IViewBinding`1.DataSource">
            <summary>
            The DataSource to read data from and to attach PropertyChanged event-listeners to.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Interfaces.IViewBinding`1.UpdateView">
            <summary>
            Refresh the view with current data.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IStringResolvable">
            <summary>
            Interface for models with strings to resolve from resources
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IUpdatable`1">
            <summary>
            Interface for model supporting updates from another class
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IRooIndicesResolvable">
            <summary>
            Interface for roo items with indices numbers to be resolved from a RooFile
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.IResourceResolvable">
            <summary>
            Interface for models with resources to resolve from resourcemanager
            </summary>
        </member>
        <member name="T:Meridian59.Common.Interfaces.ILightOwner">
            <summary>
            Interface for models which can have a light.
            </summary>
        </member>
        <member name="T:Meridian59.Common.StringDictionary">
            <summary>
            Uses an underlying LockingDictionary with some
            specific additions to handle Meridian 59 resource strings.
            </summary>
            <remarks>
            Multilanguage dictionaries don't have a single unique primary key (resource id).
            Instead a string is addressed by a key tuple (id, language-code).
            To handle this issue we map the 2d tuple address range (id, language code) into a
            1d addressrange where each language-code gets its own bracket of the target id space.
            Using UInt32 as target keyspace (4294967295) for the transformation and assuming all 184 languages
            specified in LanguageCode enum leaves 4294967295/184 = 23342213 available ids for each language.
            </remarks>
        </member>
        <member name="F:Meridian59.Common.StringDictionary.FALLBACKLANGUAGE">
            <summary>
            Language used if the defined lanuage has no result
            </summary>
        </member>
        <member name="F:Meridian59.Common.StringDictionary.BRACKETSIZE">
            <summary>
            The size of an ID space bracket for multilanguage support
            </summary>
        </member>
        <member name="F:Meridian59.Common.StringDictionary.dictionary">
            <summary>
            This is the embedded dictionary we use.
            Seemed cleaner than deriving from it, because of impossible
            override/new due to different function signatures etc.
            </summary>
        </member>
        <member name="P:Meridian59.Common.StringDictionary.Count">
            <summary>
            Count property
            </summary>
        </member>
        <member name="P:Meridian59.Common.StringDictionary.Language">
            <summary>
            This is the default language the dictionary is using,
            if not specified explicitly in function signatures.
            Note: This is NOT the only contained language!
            </summary>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.#ctor(Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.Clear">
            <summary>
            Clears all elements from the dictionary
            </summary>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.Clone">
            <summary>
            Creates a new instance holding all entries of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.TryGetValue(System.UInt32,System.String@,Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Tries to get a string for given ID and Language only.
            </summary>
            <param name="ResourceID"></param>
            <param name="Value"></param>
            <param name="Language"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.TryGetValue(System.UInt32,System.String@)">
            <summary>
            Tries to get a string for given ID for language set in 'Language' property.
            If no entry for this language, will return FALLBACK language
            </summary>
            <param name="ResourceID"></param>
            <param name="Value"></param>
            <returns>False if not found in language AND fallback language</returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.TryAdd(System.UInt32,System.String,Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Tries to add an element to the dictionary.
            </summary>
            <param name="ResourceID"></param>
            <param name="Value"></param>
            <param name="Language"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.UInt32,System.String}})">
            <summary>
            Adds all entries from Values to this instance.
            </summary>
            <param name="Values"></param>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.TryRemove(System.UInt32,System.String@,Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Tries to remove an element from the dictionary
            </summary>
            <param name="ResourceID"></param>
            <param name="Value"></param>
            <param name="Language"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.GetEnumerator">
            <summary>
            Implements foreach
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements foreach
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.StringDictionary.CombineKeys(System.UInt32,Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Returns a combined unique key for given two keys by
            mapping each language into a id space bracket.
            </summary>
            <param name="ResourceID"></param>
            <param name="Language"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.LockingDictionary`2">
            <summary>
            A multithread-safe dictionary allowing multiple threads
            to request and insert entries from and to the dictionary.
            </summary>
            <remarks>
            This class flips its internal implementation based
            on the preprocessor flag CONCURRENT.
            If set it uses ConcurrentDictionary class from CLR,
            otherwise a custom implementation.
            </remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Meridian59.Common.LockingQueue`1">
            <summary>
            A multithread-safe queue allowing multiple threads
            to enqueue and dequeue items in a FIFO order.
            Often used in a producer/consumer pattern.
            </summary>
            <remarks>
            This class flips its internal implementation based
            on the preprocessor flag CONCURRENT.
            If set it uses ConcurrentQueue class from CLR,
            otherwise a custom implementation.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Meridian59.Common.Logger">
            <summary>
            Provides asynchronous writing to logfiles.
            In case these logfiles are not writable, there will be no logging.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Logger.Start(System.Boolean)">
            <summary>
            Starts the internal workthread for the logwriting.
            Does not do anything if already started.
            </summary>
            <param name="IsChatLogEnabled"></param>
        </member>
        <member name="M:Meridian59.Common.Logger.Stop">
            <summary>
            Async marks the internal logthread for stopping.
            May take a bit until it finally ends.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Logger.Log(System.String,Meridian59.Common.Enums.LogType,System.String)">
            <summary>
            Enqueues a log message to be written to main logfile.
            Only if the Logger is started.
            </summary>
            <param name="Module"></param>
            <param name="Type"></param>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Common.Logger.LogChat(System.String)">
            <summary>
            Enqueues a log message to be written to main chat logfile.
            Only if the Logger is started.
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Common.Logger.ThreadProc">
            <summary>
            Internal thread procedure
            </summary>
        </member>
        <member name="M:Meridian59.Common.Logger.WriteLog(Meridian59.Common.LogMessage)">
            <summary>
            
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Common.Logger.WriteLogChat(System.String)">
            <summary>
            
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Meridian59.Common.Logger.WriteHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Common.Logger.WriteHeaderChat">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Common.MeridianMD5">
            <summary>
            Provides MD5 hashes in M59 style (replaced zero bytes).
            </summary>
        </member>
        <member name="F:Meridian59.Common.MeridianMD5.md5">
            <summary>
            MD5 creator from .NET
            </summary>
        </member>
        <member name="M:Meridian59.Common.MeridianMD5.ComputeMD5(System.Byte[])">
            <summary>
            Generates a MD5 in M59 style from bytes input
            </summary>
            <param name="Input">Bytes to generate a M59 MD5 from</param>
            <returns>MD5 bytes with replaced 0x00</returns>
        </member>
        <member name="M:Meridian59.Common.MeridianMD5.ComputeGenericMD5(System.Byte[])">
            <summary>
            Generates an MD5 from bytes input
            </summary>
            <param name="Input">A string to generate an MD5 from</param>
            <returns>MD5 bytes with no modification</returns>
        </member>
        <member name="M:Meridian59.Common.MeridianMD5.ComputeMD5(System.String)">
            <summary>
            Generates a MD5 in M59 style from string input
            </summary>
            <param name="Input">A string to generate a M59 MD5 from</param>
            <returns>MD5 bytes with replaced 0x00</returns>
        </member>
        <member name="M:Meridian59.Common.MeridianMD5.ComputeGenericFileMD5(System.String)">
            <summary>
            Generates an MD5 from the filestream of the given FilePath
            </summary>
            <param name="FilePath">A string file (path and name) to
            generate an MD5 from</param>
            <returns>MD5 bytes with no modification</returns>
        </member>
        <member name="T:Meridian59.Common.Outfitter">
            <summary>
            An outfit helper. Tracks items and switches outfits.
            </summary>
        </member>
        <member name="M:Meridian59.Common.Outfitter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Common.Outfitter.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Common.Outfitter.SwitchOutfit(Meridian59.Common.Outfitter.OutfitType,System.Boolean)">
            <summary>
            Call this to get messages which will switch outfit accordingly
            </summary>
            <param name="TargetOutfit"></param>
            <param name="DoEquippedCheck"></param>
            <returns>A list of GameMessages to send to switch the outfit</returns>
        </member>
        <member name="M:Meridian59.Common.Outfitter.ParseItem(Meridian59.Data.Models.InventoryObject,System.Boolean)">
            <summary>
            
            </summary>
            <param name="InventoryItem"></param>
            <param name="UnsetMode"></param>
        </member>
        <member name="M:Meridian59.Common.Outfitter.OnInventoryItemsListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Common.Polygon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Common.Polygon.Item(System.Int32)">
            <summary>
            Overriden index getter.
            You can use indices above maximum to cycle across the end.
            Or negative ones to cycle across beginning.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.IsIdentical(Meridian59.Common.Polygon)">
            <summary>
            Returns true if two polygons are exactly identical.
            Note: The ordering/start of points also matters here.
            If two polygons contain the same points but indices are shifted,
            the return would be a false.
            </summary>
            <param name="Polygon"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.HasSamePoints(Meridian59.Common.Polygon)">
            <summary>
            Returns true if two polygons contain the
            same points. The ordering does not matter.
            Note: This can return true for two polygons,
            which use the same points, but have different shape
            due to different ordering of these points.
            </summary>
            <param name="Polygon"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.IsPolygon">
            <summary>
            True if the first three points of this polygon
            describe a valid triangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.GetBoundingBox">
            <summary>
            Returns a boundingbox of this polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.IsConvexPolygon">
            <summary>
            Checks if this polygon is convex.
            </summary>
            <remarks>
            http://stackoverflow.com/questions/471962/how-do-determine-if-a-polygon-is-complex-convex-nonconvex
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.RemoveZeroEdges">
            <summary>
            Removes points from the list, which share coordinates with their successor/predecessor
            </summary>
            <returns>Amount of removed points</returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.AddPointOnEdge(Meridian59.Common.V2)">
            <summary>
            Searches for the first edge the new Point lies on.
            If it's not a polygon vertex, it's added at according index.
            </summary>
            <param name="Point"></param>
            <returns>True if the point was added.</returns>
        </member>
        <member name="M:Meridian59.Common.Polygon.AddIndexRangeToOtherPolygon(System.Int32,System.Int32,Meridian59.Common.Polygon)">
            <summary>
            Adds points from this polygon starting at FromIndex up to including ToIndex
            into a Target Polygon. If FromIndex is bigger than ToIndex, it will iterate
            over the zero index (2 chunks: FromIndex->end, 0->ToIndex).
            </summary>
            <param name="FromIndex"></param>
            <param name="ToIndex"></param>
            <param name="Target"></param>
        </member>
        <member name="M:Meridian59.Common.Polygon.SplitConvexPolygon(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Splits this polygon using a infinite line given by P1 (start) and P2 (end).
            Will check for convexity first.
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns>
            Null in case the polygon is not convex or something went wrong.
            A tuple with Item1 (right) and Item2 (left) polygon.
            </returns>
        </member>
        <member name="T:Meridian59.Common.Util">
            <summary>
            General utility functions
            </summary>
        </member>
        <member name="F:Meridian59.Common.Util.Encoding">
            <summary>
            Default binary string encoding used in Meridian 59 (codepage 1252).
            </summary>
        </member>
        <member name="M:Meridian59.Common.Util.ForceMaximumGC">
            <summary>
            Executes a maximum Garbage Collection
            </summary>
        </member>
        <member name="M:Meridian59.Common.Util.LoadFileToUnmanagedMem(System.String)">
            <summary>
            Loads file content from filesystem to unmanaged memory.
            Beware: This does not verify existance of file 
            and does not care about freeing memory again.
            </summary>
            <param name="File">Full filename (including path and extension)</param>
            <returns>Memory pointer and length of loaded data</returns>
        </member>
        <member name="M:Meridian59.Common.Util.GetIntegerBytes(System.UInt32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Returns each byte of a 32-Bit integer.
            </summary>
            <param name="Value"></param>
            <param name="B1">1. Byte</param>
            <param name="B2">2. Byte</param>
            <param name="B3">3. Byte</param>
            <param name="B4">4. Byte</param>
        </member>
        <member name="M:Meridian59.Common.Util.FindSequences(System.Nullable{System.Byte}[],System.Byte[])">
            <summary>
            Searches for all offsets of SearchPattern in Data.
            </summary>
            <param name="SearchPattern">Search for this</param>
            <param name="Data">Search in this</param>
            <returns>A list of all found offsets, can be empty.</returns>
        </member>
        <member name="M:Meridian59.Common.Util.Find(System.Nullable{System.Byte}[],System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Searches for Pattern in Data.
            Uses FindSequences.
            </summary>
            <param name="Pattern"></param>
            <param name="Data"></param>
            <param name="Orig"></param>
            <param name="BaseAddress"></param>
            <returns>Address if exactly one found, otherwise IntPtr.Zero</returns>
        </member>
        <member name="M:Meridian59.Common.Util.CountSubStringOccurences(System.String,System.String,System.Boolean)">
            <summary>
            Counts occurences of string pattern in data.
            </summary>
            <remarks>
            Example:
            --------
             Data    = aaaa
             Pattern = aa
             
            If SkipSubstringLengthOnMatch is true,
            then this function will return 2 occurences.
            At index 0 and 2.
            
            If set to false it returns 3 occurences.
            At index 0, 1 and 2.
            </remarks>
            <param name="Pattern">Search for this</param>
            <param name="Data">Search in this</param>
            <param name="SkipSubstringLengthOnMatch">See remarks</param>
            <returns>Amount of occurences</returns>
        </member>
        <member name="M:Meridian59.Common.Util.GetQuote(System.String,System.Int32,System.Char)">
            <summary>
            Tries to find a quote pattern like "some text" in a string.
            </summary>
            <param name="Text"></param>
            <param name="StartIndex"></param>
            <param name="QuoteChar"></param>
            <returns>
            First value is index of first quotechar, second value is full length (including both quotechars), 
            third is extracted quote string without quote chars. Returns NULL if no quote found.
            </returns>
        </member>
        <member name="M:Meridian59.Common.Util.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first instance of a search string in the string with another string.
            </summary>
            <param name="Text"></param>
            <param name="Search"></param>
            <param name="Replace"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Util.ReplaceFirst(System.String,System.String,System.String,System.Int32)">
            <summary>
            Replaces the first instance of a search string in the string with another string.
            Starts searching at startPos.
            </summary>
            <param name="Text"></param>
            <param name="Search"></param>
            <param name="Replace"></param>
            <param name="StartPos"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.Util.Truncate(System.String,System.Int32)">
            <summary>
            Returns a string which is either the parameter or a first MaxLength characters of it
            </summary>
            <param name="Text"></param>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.Murmur3">
            <summary>
            Murmur3, a fast 32-Bit hash translated from
            http://en.wikipedia.org/wiki/MurmurHash
            </summary>
        </member>
        <member name="M:Meridian59.Common.Murmur3.#ctor(System.UInt32)">
            <summary>
            Constructor - Create new hash
            </summary>
            <param name="Seed">A previously hash to continue</param>
        </member>
        <member name="M:Meridian59.Common.Murmur3.Step(System.UInt32)">
            <summary>
            Compute in another value/step into hashvalue
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Meridian59.Common.Murmur3.Reset(System.UInt32)">
            <summary>
            Resets the hasher to the given seed
            </summary>
            <param name="Seed"></param>
        </member>
        <member name="M:Meridian59.Common.Murmur3.Finish">
            <summary>
            Finish hash computation
            </summary>
            <returns>Hash value</returns>
        </member>
        <member name="T:Meridian59.Common.MeridianDate">
            <summary>
            Provides conversion for Meridian 32-Bit timestamps.
            </summary>
        </member>
        <member name="F:Meridian59.Common.MeridianDate.OFFSET">
            <summary>
            A static seconds offset from UNIXTIMESTAMP ZERO
            to a newer timestamp (currently january 2014).
            Because M59 timestamps are only 32 bit.
            See 'DateFromSeconds()' in 'newsread.c'.
            </summary>
        </member>
        <member name="F:Meridian59.Common.MeridianDate.M59SECONDSPERSECOND">
            <summary>
            How many m59 seconds elapse during one real second
            </summary>
        </member>
        <member name="F:Meridian59.Common.MeridianDate.UNIXZERO">
            <summary>
            DateTime representing the UNIX timestamp zero.
            </summary>
        </member>
        <member name="F:Meridian59.Common.MeridianDate.MERIDIANZERO">
            <summary>
            The Meridian ZERO time
            </summary>
        </member>
        <member name="M:Meridian59.Common.MeridianDate.ToDateTime(System.UInt32)">
            <summary>
            Converts a meridian timestamp into DateTime
            </summary>
            <param name="MeridianDate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MeridianDate.ToMeridianDate(System.DateTime)">
            <summary>
            Converts a DateTime to meridian timestamp
            </summary>
            <param name="DateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MeridianDate.GetMeridianTime">
            <summary>
            Returns the current time in Meridian 59
            with dummy date set to 1/1/1.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Common.V3">
            <summary>
            A basic 3D vector struct (32/64-Bit FP)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.ZERO">
            <summary>
            The zero vector (0,0,0)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.UNITX">
            <summary>
            UNITX (1,0,0)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.UNITY">
            <summary>
            UNITY (0,1,0)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.UNITZ">
            <summary>
            UNITZ (0,0,1)
            </summary>
        </member>
        <member name="F:Meridian59.Common.V3.X">
            <summary>
            The X component
            </summary>
        </member>
        <member name="F:Meridian59.Common.V3.Y">
            <summary>
            The Y component
            </summary>
        </member>
        <member name="F:Meridian59.Common.V3.Z">
            <summary>
            The Z component
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.XProp">
            <summary>
            X as a property
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.YProp">
            <summary>
            Y as a property
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.ZProp">
            <summary>
            Z as a property
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.XY">
            <summary>
            Creates V2 instances of XY values or sets XY from V2
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.XZ">
            <summary>
            Creates V2 instance of XZ values or sets XZ from V2
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.XZY">
            <summary>
            Returns a new V3 with Y and Z Components flipped or sets
            the Y value from Z and Z from Y.
            </summary>
        </member>
        <member name="M:Meridian59.Common.V3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:Meridian59.Common.V3.op_Addition(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Subtraction(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_UnaryNegation(Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Multiply(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Multiply(Meridian59.Common.V3,System.Double)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Multiply(System.Double,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Equality(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.op_Inequality(Meridian59.Common.V3,Meridian59.Common.V3)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.Equals(System.Object)">
            <summary>
            Overridden equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.Equals(Meridian59.Common.V3)">
            <summary>
            Typed equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.Clone">
            <summary>
            Create a new instance with same values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridian59.Common.V3.Length">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="P:Meridian59.Common.V3.LengthSquared">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:Meridian59.Common.V3.CrossProduct(Meridian59.Common.V3)">
            <summary>
            Returns the crossproduct of this
            and another V3 vector.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.ToString">
            <summary>
            Returns a string like (0,0,0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V3.Scale(System.Double)">
            <summary>
            Scales the vector by scalar
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Meridian59.Common.V3.ScaleToLength(System.Double)">
            <summary>
            Scales the vector to given length
            </summary>
            <param name="newlength"></param>
        </member>
        <member name="M:Meridian59.Common.V3.Normalize">
            <summary>
            Scales the vector to length 1.0
            </summary>
        </member>
        <member name="M:Meridian59.Common.V3.ConvertToROO">
            <summary>
            Multiplies components by 16 and subtracts an 1024 offset
            </summary>
        </member>
        <member name="M:Meridian59.Common.V3.ConvertToWorld">
            <summary>
            Divides components by 16 and adds an 64 offset
            </summary>
        </member>
        <member name="T:Meridian59.Common.LogMessage">
            <summary>
            An internal log message for debugging
            </summary>
        </member>
        <member name="T:Meridian59.Common.LineLineIntersectionType">
            <summary>
            Different cases two finite line segments can intersect.
            </summary>
            <remarks>
            NoIntersection: No intersection or boundary point
            OneIntersection: Exactly one intersection
            OneBoundaryPoint: Exactly one boundary point
            FullyCoincide: Finite lines are exactly equal
            PartiallyCoincide: Finite lines partially overlap
            </remarks>
        </member>
        <member name="T:Meridian59.Common.LineInfiniteLineIntersectionType">
            <summary>
            Different cases a finite line segment can intersect with an infinite line.
            </summary>
            <remarks>
            NoIntersection: No intersection or boundary point
            OneIntersection: Exactly one intersection
            OneBoundaryPoint: Exactly one boundary point
            FullyCoincide: Finite line segment is included in infinite line
            </remarks>
        </member>
        <member name="T:Meridian59.Common.MathUtil">
            <summary>
            Contains some static math util functions
            </summary>
        </member>
        <member name="F:Meridian59.Common.MathUtil.Random">
            <summary>
            Random generator
            </summary>
        </member>
        <member name="M:Meridian59.Common.MathUtil.M59FPToFloat(System.Int32)">
            <summary>
            Converts a M59 FixedPoint value (8 fract bits) to a float
            </summary>
            <param name="FPValue"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.FloatToM59FP(System.Double)">
            <summary>
            Converts a float to a M59 FixedPoint value (8 fract bits)
            </summary>
            <param name="FloatValue"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.BinaryAngleToRadian(System.UInt16)">
            <summary>
            Converts angle units to radian.
            </summary>
            <param name="Value">Angle units (0 - 4096)</param>
            <returns>Radian (0 - 2PI)</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.RadianToBinaryAngle(System.Double)">
            <summary>
            Converts radian to angle units.
            </summary>
            <param name="Value">Radian (0 - 2PI)</param>
            <returns>Angle units (0 - 4096)</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.NextPowerOf2(System.UInt32)">
            <summary>
            Returns next greater power of 2
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.NextMultipleOf4(System.UInt32)">
            <summary>
            Returns next greater multiple of 4 of n,
            or n, if n is a multiple of 4.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Max(System.Double,System.Double)">
            <summary>
            Returns the maximum of two floats.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Max(System.Int32,System.Int32)">
            <summary>
            Returns the maximum of two ints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Max(System.UInt16,System.UInt16)">
            <summary>
            Returns the minimum of two ushorts.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Min(System.Double,System.Double)">
            <summary>
            Returns the minimum of two floats.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Min(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of two ints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Min(System.UInt16,System.UInt16)">
            <summary>
            Returns the minimum of two ushorts.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Bound(System.Double,System.Double,System.Double)">
            <summary>
            Bounds value into range (min, max combined)
            </summary>
            <param name="a"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Bound(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bounds value into range (min, max combined)
            </summary>
            <param name="a"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.Bound(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Bounds value into range (min, max combined)
            </summary>
            <param name="a"></param>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GCD(System.Int64,System.Int64)">
            <summary>
            Returns the Greatest Common Divisor
            </summary>
            <param name="a">Number a</param>
            <param name="b">Number b</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GCD(System.Int32,System.Int32)">
            <summary>
            Returns the Greatest Common Divisor
            </summary>
            <param name="a">Number a</param>
            <param name="b">Number b</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.LCM(System.Int64,System.Int64)">
            <summary>
            Returns the Least Common Multiple
            </summary>
            <param name="a">Number a</param>
            <param name="b">Number b</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.LCM(System.Int32,System.Int32)">
            <summary>
            Returns the Least Common Multiple
            </summary>
            <param name="a">Number a</param>
            <param name="b">Number b</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.RandomPointInTriangle(Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Returns a random point within a 2D triangle.
            </summary>
            <remarks>
            See:
            http://math.stackexchange.com/questions/18686/uniform-random-point-in-triangle
            </remarks>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <returns>Random point</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.TriangleArea(Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Returns the area of the 2D triangle.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.IntersectLineInfiniteLine(Meridian59.Common.V2,Meridian59.Common.V2,Meridian59.Common.V2,Meridian59.Common.V2,Meridian59.Common.V2@)">
            <summary>
            Checks a finite line segment for intersection with infinite line.
            </summary>
            <param name="P1">First point of finite line segment</param>
            <param name="P2">Second point of finite line segment</param>
            <param name="Q1">First point in infinte line</param>
            <param name="Q2">Second point in infinite line</param>
            <param name="Intersect"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.IntersectLineLine(Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Checks two finite line segments for intersection.
            </summary>
            <param name="P1">First point of first line segment</param>
            <param name="P2">Second point of first line segment</param>
            <param name="Q1">First point of second line segment</param>
            <param name="Q2">Second point of second line segment</param>
            <param name="Intersect">Intersection point</param>
            <returns>LineLineIntersectionType</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.IntersectLineCircle(Meridian59.Common.V2@,Meridian59.Common.V2@,Meridian59.Common.V2@,System.Double,Meridian59.Common.V2@)">
            <summary>
            Calculates the FIRST (entry) intersection point of a line and a circle.
            </summary>
            <remarks>
            http://stackoverflow.com/questions/1073336/circle-line-collision-detection
            </remarks>
            <param name="LineStart"></param>
            <param name="LineEnd"></param>
            <param name="CircleCenter"></param>
            <param name="Radius"></param>
            <param name="Intersect"></param>
            <returns>True if interesction, false if none.</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GetDirectionForRadian(System.Double)">
            <summary>
            Converts radian angle to V2 direction
            </summary>
            <param name="Angle">Direction in angle 0-2pi</param>
            <returns>Direction vector with length 1</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GetRadianForDirection(Meridian59.Common.V2@)">
            <summary>
            Converts V2 direction to radian angle.
            </summary>
            <param name="Direction">Direction vector</param>
            <returns>Value in [0..2PI]</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GetAngleForDirection(Meridian59.Common.V2@)">
            <summary>
            Converts V2 direction to M59 angle.
            </summary>
            <example>
               V2           M59
            -------------------------   
            (1,   0)      = 0
            (1,   1)      = 512
            (0,   1)      = 1024
            (-1,  1)      = 1536
            (-1,  0)      = 2048
            (-1, -1)      = 2560
            (0,  -1)      = 3072
            (1,  -1)      = 3584
            (1,  -0.0001) = 4096
            </example>
            <param name="Direction">Direction vector</param>        
            <returns>Value in [0..4096]</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.GetAngle(Meridian59.Common.V2@,Meridian59.Common.V2@,System.UInt16,System.Boolean)">
            <summary>
            Gets a delta M59 angle based on positions and angle.
            </summary>
            <example>
            
            Values:
                T = (1, 1)
                V = (4, 1)
                A = 1024
             => R = 1024 (90°)
            ------------------------
                y
                ^
                |  ^   {R=90°}
                |  | 
              1 |  T--[TV]-->V
                |
                |-------------->x
                   1         4
            </example>
            <param name="V">Position 1</param>
            <param name="T">Position 2</param>
            <param name="Angle">Angle</param>
            <param name="GetSmallOne">Returns 2PI-ANGLE for ANGLE>PI, if set to true.</param>
            <returns>Value in [0..4096] or [0..2048], if GetSmallOne is true</returns>
        </member>
        <member name="M:Meridian59.Common.MathUtil.IntersectLineTriangle(Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@)">
            <summary>
            Checks for intersection of 3D line and 3D triangle.
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
            </remarks>
            <param name="S">Start</param>
            <param name="E">End</param>
            <param name="P1">Triangle P1</param>
            <param name="P2">Triangle P2</param>
            <param name="P3">Triangle P3</param>
            <param name="I">Intersection Point</param>
            <returns>True or False</returns>
        </member>
        <member name="T:Meridian59.Common.V2">
            <summary>
            A basic 2D vector struct (32/64-Bit FP)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.ZERO">
            <summary>
            The zero vector (0,0)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.UNITX">
            <summary>
            UNITX (1,0)
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.UNITY">
            <summary>
            UNITY (0,1)
            </summary>
        </member>
        <member name="F:Meridian59.Common.V2.X">
            <summary>
            The X component
            </summary>
        </member>
        <member name="F:Meridian59.Common.V2.Y">
            <summary>
            The Y component
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.XProp">
            <summary>
            X as a property
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.YProp">
            <summary>
            Y as a property
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.Length">
            <summary>
            The length of the vector. Calculated on the fly.
            </summary>
        </member>
        <member name="P:Meridian59.Common.V2.LengthSquared">
            <summary>
            The squared length of the vector. Calcalulated on the fly.
            </summary>
        </member>
        <member name="M:Meridian59.Common.V2.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Meridian59.Common.V2.op_Addition(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Subtraction(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_UnaryNegation(Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Multiply(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Multiply(Meridian59.Common.V2,System.Double)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Multiply(System.Double,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Equality(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.op_Inequality(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Implemented operator
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.Equals(System.Object)">
            <summary>
            Overridden equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.Equals(Meridian59.Common.V2)">
            <summary>
            Typed equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetHashCode">
            <summary>
            Overriden
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.Clone">
            <summary>
            Create a new instance with same values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.ToString">
            <summary>
            Returns a string like (0,0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.Scale(System.Double)">
            <summary>
            Scales the vector by scalar
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Meridian59.Common.V2.ScaleToLength(System.Double)">
            <summary>
            Scales this V2 instance to given length
            </summary>
            <param name="newlength"></param>
        </member>
        <member name="M:Meridian59.Common.V2.Normalize">
            <summary>
            Normalizes this V2 instance (length=1.0)
            </summary>
        </member>
        <member name="M:Meridian59.Common.V2.Rotate(System.Double)">
            <summary>
            Rotates this V2 instance anti-clockwise by given radian.
            </summary>
            <example>
            Rotating the unit-x (1, 0) vector by 90° (PI/2)
            creates the unit-y (0, 1) vector .
            </example>
            <param name="Radian">Rotate by this value.</param>
        </member>
        <member name="M:Meridian59.Common.V2.DistanceTo(Meridian59.Common.V2@)">
            <summary>
            Returns the distance to another point
            </summary>
            <param name="Destination"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.DistanceToSquared(Meridian59.Common.V2@)">
            <summary>
            Returns the squared distance to another point
            </summary>
            <param name="Destination"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.MinDistanceToLineSegment(Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Returns the minimum distance of this instance to a
            line segment given by points P1, P2.
            Note: line segment != infinite line
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.MinSquaredDistanceToLineSegment(Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Returns the minimum squared distance of this instance to a
            line segment given by points P1, P2.
            Note: line segment != infinite line
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetSide(Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Returns the side (-1 or 1) of this (point) instance
            for the line given by points P1 and P2.
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetSide(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            See and prefer the variant with ref params!
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.IsOnLineSegment(Meridian59.Common.V2@,Meridian59.Common.V2@)">
            <summary>
            Tests whether this V2 instance lies on a line segment
            given by points P1 and P2.
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.IsOnLineSegment(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            See and prefer variant with ref params!
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetProjection(Meridian59.Common.V2@)">
            <summary>
            Returns a projection of this instance on another vector.
            </summary>
            <param name="Vector"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetPerpendicular1">
            <summary>
            Returns a vector with values (y, -x)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.GetPerpendicular2">
            <summary>
            Returns a vector with values (-y, x)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.CrossProduct(Meridian59.Common.V2@)">
            <summary>
            Returns the scalar crossproduct of this vector
            and the parameter vector.
            </summary>
            <remarks>
            http://stackoverflow.com/questions/243945/calculating-a-2d-vectors-cross-product
            </remarks>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Common.V2.ConvertToROO">
            <summary>
            Multiplies components by 16 and subtracts an 1024 offset
            </summary>
        </member>
        <member name="M:Meridian59.Common.V2.ConvertToWorld">
            <summary>
            Divides components by 16 and adds an 64 offset
            </summary>
        </member>
        <member name="T:Meridian59.Common.Crc32">
            <summary>
            Generic CRC32 hash generator.
            </summary>
        </member>
        <member name="T:Meridian59.Common.Hash128Bit">
            <summary>
            A struct to store 128-Bit hashes in 4x 32-Bit blocks.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.GroupMemberList">
            <summary>
            List for GroupMember
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.GroupMemberList.FindSortedIndexByName(Meridian59.Data.Models.GroupMember)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.GroupMemberList.CompareByName(Meridian59.Data.Models.GroupMember,Meridian59.Data.Models.GroupMember)">
            <summary>
            Compares two GroupMember by Name property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Lists.GroupList">
            <summary>
            List for Group
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.GroupList.FindSortedIndexByName(Meridian59.Data.Models.Group)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.GroupList.CompareByName(Meridian59.Data.Models.Group,Meridian59.Data.Models.Group)">
            <summary>
            Compares two Group by Name property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Lists.KeyValuePairStringList">
            <summary>
            List of KeyValuePairString
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.MailList">
            <summary>
            List for Mail objects
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.RoomObjectListFiltered">
            <summary>
            This list is a filter on the RoomObjectList.
            It's initialized on an existing list and filters
            items from it accordingly. Will also live-update from source.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.RoomObjectListFiltered.FlagsFilter">
            <summary>
            These flags are OR to each other - It's enough if one of the flags filter in here matches.
            Otherwise just specify only 1 ObjectFlags with all required bits set.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.RoomObjectListFiltered.PlayerTypesFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.RoomObjectListFiltered.SquaredDistanceToAvatarFilter">
            <summary>
            Maximum value for SquaredDistanceToAvatar property (0=disabled)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.RoomObjectListFiltered.IsSquaredDistancetoAvatarFilterEnabled">
            <summary>
            True if SquaredDistanceToAvatarFilter is greater than 0.0
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectListFiltered.#ctor(Meridian59.Data.Lists.RoomObjectList)">
            <summary>
            Constructor
            </summary>
            <param name="Source"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectListFiltered.Refresh">
            <summary>
            Call this after you've changed something in the Filter settings.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.BackgroundOverlayList">
            <summary>
            List for BackgroundOverlay
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.BackgroundOverlayList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Capacity"></param>
        </member>
        <member name="T:Meridian59.Data.Lists.BaseList`1">
            <summary>
            A generic, bindable list implementing IBindingList
            </summary>
            <typeparam name="T">Must implement INotifyPropertyChanged and must have empty constructor.</typeparam>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="Collection"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts item at index
            </summary>
            <param name="Index"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.Remove(`0)">
            <summary>
            Removes specific item
            </summary>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at index
            </summary>
            <param name="Index"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.BaseList`1.Item(System.Int32)">
            <summary>
            Index accessor
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two entries.
            </summary>
            <param name="Index1"></param>
            <param name="Index2"></param>
        </member>
        <member name="E:Meridian59.Data.Lists.BaseList`1.ListChanged">
            <summary>
            Triggered when list changed somehow
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.OnListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Executed when list changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.BaseList`1.OnItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when an item triggered PropertyChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Data.Lists.GuildMemberList">
            <summary>
            List for GuildMemberEntry
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.InventoryObjectList">
            <summary>
            List for InventoryObject
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.InventoryObjectList.RefreshNumOfSameName(Meridian59.Data.Models.InventoryObject)">
            <summary>
            Update the NumOfSameName property of all
            items with the same name as the argument.
            </summary>
            <param name="Item"></param>
        </member>
        <member name="T:Meridian59.Data.Lists.ArticleHeadList">
            <summary>
            List for newsglobe articles
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.ProjectileList">
            <summary>
            List of Projectile
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.ObjectBaseList`1">
            <summary>
            List for ObjectBase
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectBaseList`1.FindSortedIndexByName(Meridian59.Data.Models.ObjectBase)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectBaseList`1.FindSortedIndexByOverlayFile(Meridian59.Data.Models.ObjectBase)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectBaseList`1.CompareByName(Meridian59.Data.Models.ObjectBase,Meridian59.Data.Models.ObjectBase)">
            <summary>
            Compares two ObjectBase by Name property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectBaseList`1.CompareByOverlayFile(Meridian59.Data.Models.ObjectBase,Meridian59.Data.Models.ObjectBase)">
            <summary>
            Compares two ObjectBase by OverlayFile property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Lists.ObjectIDList`1">
            <summary>
            List of ObjectID (or higher)
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Capacity"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.GetMaximumID">
            <summary>
            Gets the maximum ID in the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.GetMinimumID">
            <summary>
            Gets the minimum ID in the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.GetIndexByID(System.UInt32)">
            <summary>
            Gets the index of an ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.GetItemByID(System.UInt32)">
            <summary>
            Returns the item with given ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.GetItemsByIDs(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Returns all items for given IDs
            </summary>
            <param name="IDs"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.RemoveByID(System.UInt32)">
            <summary>
            Removes an item by ID
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Overridden
            </summary>
            <param name="Property"></param>
            <param name="Direction"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.Insert(System.Int32,`0)">
            <summary>
            Overridden
            </summary>
            <param name="Index"></param>
            <param name="Item"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.SortByID">
            <summary>
            Sorts the list by ascending ID
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.FindSortedIndexByID(Meridian59.Data.Models.ObjectID)">
            <summary>
            Finds the index for a new entry in a sorted list
            based on ID value.
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.ObjectIDList`1.CompareByID(Meridian59.Data.Models.ObjectID,Meridian59.Data.Models.ObjectID)">
            <summary>
            Compares two ObjectID by ID
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Lists.OnlinePlayerList">
            <summary>
            List of current online players
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.RoomObjectList">
            <summary>
            List of RoomObject
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.RoomObjectList.HighlightedID">
            <summary>
            Last ID Hightlight() was called with
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Capacity"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.GetHighlightedItem">
            <summary>
            Returns the first object marked highlighted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.GetClosestCreature(Meridian59.Data.Models.RoomObject)">
            <summary>
            Returns the closest RoomObject from another RoomObject
            </summary>
            <param name="RoomObject"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.GetItemsByBaseRenderTypes(System.Byte[])">
            <summary>
            
            </summary>
            <param name="BaseRenderTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.GetItemsByPVPFlags">
            <summary>
            Returns list with contained items flagged as Enemy, GuildMate or Friend.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.HasInvisibleRoomObject">
            <summary>
            Checks whether there's an object
            with invisible effect flags in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.HighlightObject(System.UInt32)">
            <summary>
            Marks the object with given ID as highlighted,
            if contained in the list. Any other as not highlighted.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.ResetHighlighted">
            <summary>
            Marks any contained RoomObject as not highlighted.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.CloneAndSortByDistanceToAvatarSquared">
            <summary>
            Creates a new instance with all entries sorted by 'DistanceToAvatarSquared'
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.CloneAndSortByDistanceToViewerSquared">
            <summary>
            Creates a new instance with all entries sorted by 'DistanceToViewerSquared'
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.SortByDistanceToAvatarSquared">
            <summary>
            Sorts this list ascending by the 'DistanceToAvatarSquared' property
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.SortByDistanceToViewerSquared">
            <summary>
            Sorts this list ascending by the 'DistanceToViewerSquared' property
            </summary>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.FindSortedIndexByDistanceToAvatarSquared(Meridian59.Data.Models.RoomObject)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.FindSortedIndexByDistanceToViewerSquared(Meridian59.Data.Models.RoomObject)">
            <summary>
            Finds the index for an entry in a sorted list
            </summary>
            <param name="Candidate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.CompareByDistanceToAvatarSquared(Meridian59.Data.Models.RoomObject,Meridian59.Data.Models.RoomObject)">
            <summary>
            Compares two RoomObjects by their DistanceToAvatarSquared property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Lists.RoomObjectList.CompareByDistanceToViewerSquared(Meridian59.Data.Models.RoomObject,Meridian59.Data.Models.RoomObject)">
            <summary>
            Compares two RoomObjects by their DistanceToViewerSquared property
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Lists.SkillList">
            <summary>
            List for skills
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.SpellObjectList">
            <summary>
            List for spellobject
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.StringList">
            <summary>
            List for RsbResourceID
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.StatNumericList">
            <summary>
            List for StatNumeric
            </summary>
        </member>
        <member name="T:Meridian59.Data.Lists.ActionButtonList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Lists.ActionButtonList.DEFAULT">
            <summary>
            Returns a new instance of a default button set
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AdminInfoProperty">
            <summary>
            A property of a blakserv object described by
            Name (like 'piRow'), Type (like 'INT') and Value (like '22')
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoProperty.PropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoProperty.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoProperty.PropertyValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfoProperty.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfoProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor by values
            </summary>
            <param name="PropertyName"></param>
            <param name="PropertyType"></param>
            <param name="PropertyValue"></param>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfoProperty.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.AdminInfoObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoObject.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoObject.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfoObject.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfoObject.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfoObject.#ctor(System.UInt32,System.String,System.Collections.Generic.IEnumerable{Meridian59.Data.Models.AdminInfoProperty})">
            <summary>
            Constructor by values
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AdminInfo">
            <summary>
            A set of information for the admin console
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfo.ServerResponses">
            <summary>
            Received text responses from server
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AdminInfo.TrackedObjects">
            <summary>
            Tracking responses to 'show object' responses here
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AdminInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Meridian59.Data.Models.AdminInfo.DEFAULTCOMMANDS">
            <summary>
            Default commands for blakserv.
            Please keep alphabetically ordered.
            </summary>
            <remarks>
            {0} are variables for possible use of String.Format() function.
            Like %i in sprintf()
            </remarks>
        </member>
        <member name="T:Meridian59.Data.Models.ClientPatchInfo">
            <summary>
            ClientPatchInfo for updates
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ClientPatchInfo.GetUpdateBasePath">
            <summary>
            Returns the base path which must be used as a prefix
            on the JSON entries to build the full http path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ClientPatchInfo.GetUpdaterURL">
            <summary>
            Returns the URL of the updater binary.
            Built from machine, patchPath and updaterFile values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ClientPatchInfo.GetJsonDataURL">
            <summary>
            Returns the URL of the JSON datafile
            providing entries for all game files.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.GroupMember">
            <summary>
            A member (m59 player) of a Group.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.GuildHall">
            <summary>
            A Meridian59 GuildHall object
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildHall.NameRID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildHall.Cost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildHall.Rent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildHall.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildHall.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildHall.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Constructor by values
            </summary>
            <param name="Name"></param>
            <param name="ID"></param>
            <param name="Count"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildHall.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildHall.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildHall.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.LightingInfo">
            <summary>
            Info about an objects lighting.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.LightingInfo.Flags">
            <summary>
            Light flags, e.g. on, dynamic, wavering
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.LightingInfo.LightIntensity">
            <summary>
            Intensity of light (0-255).
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.LightingInfo.LightColor">
            <summary>
            A 16-Bit(A1R5G5B5?) color of the light.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.LightingInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.LightingInfo.#ctor(System.UInt32,System.Byte,System.UInt16)">
            <summary>
            Constructor by values
            </summary>
            <param name="Flags"></param>
            <param name="LightIntensity"></param>
            <param name="LightColor"></param>
        </member>
        <member name="M:Meridian59.Data.Models.LightingInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RawData"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.LightingInfo.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.LightingInfo.ToString">
            <summary>
            Returns a string like (0,0,0)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.LootInfo">
            <summary>
            Bundles a distance-filtered roomobjects-list with an observable
            IsVisible property.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.Group">
            <summary>
            A group of Meridian 59 players.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectFlagsUpdate">
            <summary>
            ObjectFlagsUpdate for updating ObjectFlags on an object
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.WallAnimationChange">
            <summary>
            Wall animation change info.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.WallAnimationChange.SideDefServerID">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.WallAnimationChange.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.SectorChange">
            <summary>
            Sector movement info.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SectorChange.SectorNr">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.SectorChange.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.SkillInfo">
            <summary>
            A set of information about a spell object (when requesting to look at)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.SpellInfo">
            <summary>
            A set of information about a spell object (when requesting to look at)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.StopSound">
            <summary>
            Info for Sound playback
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ResourceID">
            <summary>
            A Meridian59 ResourceID notation.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PreferencesFlags">
            <summary>
            Client preference flags.
            </summary>
        </member>
        <member name="F:Meridian59.Data.Models.PreferencesFlags.CF_SAFETY_OFF">
            Flags for client preference options, e.g. safety.
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.Enabled">
             <summary>
             Stores whether the flags have been received/enabled or not.
             </summary>
            
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.IsSafetyOff">
             <summary>
             Whether safety is enabled or not
             </summary>
            
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.TempSafe">
            <summary>
            Whether tempsafe is enabled or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.Grouping">
            <summary>
            Whether grouping is enabled or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.ReagentBag">
            <summary>
            Whether reagent bag use is enabled or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.AutoLoot">
            <summary>
            Whether autolooting items is enabled or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.AutoCombine">
            <summary>
            Whether autocombining spellitems is enabled or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PreferencesFlags.SpellPower">
            <summary>
            Whether to display spellpower for spell cast or not
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.PreferencesFlags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value">Old flags</param>
        </member>
        <member name="M:Meridian59.Data.Models.PreferencesFlags.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.PreferencesFlags.#ctor(System.Byte*@)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.PreferencesFlags.UpdateFromModel(Meridian59.Data.Models.PreferencesFlags,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Flags"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.StatChangeInfo">
            <summary>
            The underlying data shown in a stat change dialog
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatChangeInfo.TotalLevels">
            <summary>
            Returns total number of levels.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatChangeInfo.SchoolCount">
            <summary>
            Returns current number of schools level 1 or greater.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatChangeInfo.IntellectNeeded">
            <summary>
            Returns the amount of intellect needed for the schools
            and levels we have set.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.CharCreationInfo">
            <summary>
            Info for the character creation wizard.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.SlotID">
            <summary>
            Not transferred, has to be set when invoking the wizard with a char slot.
            Can be used to create the avatar at the end.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.Gender">
            <summary>
            Not transferred.
            Use SetExampleModel() to set.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.HairColor">
            <summary>
            Not transferred.
            Use SetExampleModel() to set.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.SkinColor">
            <summary>
            Not transferred.
            Use SetExampleModel() to set.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.AvatarName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.AvatarDescription">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.CharCreationInfo.CharInfoNotOkError">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.#ctor(System.Byte[],System.Byte[],Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF,Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF,Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF[],Meridian59.Data.Models.ResourceIDBGF[],System.Collections.Generic.IEnumerable{Meridian59.Data.Models.AvatarCreatorSpellObject},System.Collections.Generic.IEnumerable{Meridian59.Data.Models.AvatarCreatorSkillObject})">
            <summary>
            Constructor by values
            </summary>
            <param name="HairColors"></param>
            <param name="SkinColors"></param>
            <param name="MaleHairIDs"></param>
            <param name="MaleSkullID"></param>
            <param name="MaleEyeIDs"></param>
            <param name="MaleNoseIDs"></param>
            <param name="MaleMouthIDs"></param>
            <param name="FemaleHairIDs"></param>
            <param name="FemaleSkullID"></param>
            <param name="FemaleEyeIDs"></param>
            <param name="FemaleNoseIDs"></param>
            <param name="FemaleMouthIDs"></param>
            <param name="Spells"></param>
            <param name="Skills"></param>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.GetAttributesArray">
            <summary>
            Returns all stat values as array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.GetSelectedSpellIDs">
            <summary>
            Returns all "ExtraID" values from instances in SelectedSpells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.GetSelectedSkillIDs">
            <summary>
            Returns all "ExtraID" values from instances in SelectedSkills.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.GetSelectedResourceIDs">
            <summary>
            Returns resource IDs or NULL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.SetAttributesToMage">
            <summary>
            Sets attributes such as Might, Stamina, ... to a
            predefined set suitable for mages.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.SetAttributesToWarrior">
            <summary>
            Sets attributes such as Might, Stamina, ... to a
            predefined set suitable for warriors.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.SetAttributesToHybrid">
            <summary>
            Sets attributes such as Might, Stamina, ... to a
            predefined set suitable for hybrids.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.CharCreationInfo.SetExampleModel(Meridian59.Common.Enums.Gender,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adjusts the ExampleModel instance
            </summary>
            <param name="Gender"></param>
            <param name="SkinColorIndex"></param>
            <param name="HairColorIndex"></param>
            <param name="HairIndex"></param>
            <param name="EyesIndex"></param>
            <param name="NoseIndex"></param>
            <param name="MouthIndex"></param>
        </member>
        <member name="T:Meridian59.Data.Models.Effects">
            <summary>
            Cumulated model for Effects in Meridian
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Blind">
            <summary>
            The Blind effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Paralyze">
            <summary>
            The Paralyze/Hold effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Raining">
            <summary>
            The raining effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Snowing">
            <summary>
            The snowing effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Sand">
            <summary>
            The sandstorm effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Invert">
            <summary>
            The invert effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Pain">
            <summary>
            The pain effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Whiteout">
            <summary>
            The whiteout effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.Blur">
            <summary>
            The blur effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.FlashXLat">
            <summary>
            The flash xlat effect
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Effects.XLatOverride">
            <summary>
            The xlat override effect
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Effects.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Effects.Tick(System.Double,System.Double)">
            <summary>
            Call regularly to update durationeffect progress.
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Effects.HandleEffect(Meridian59.Data.Models.Effect)">
            <summary>
            Handles a new effect information into the current state.
            </summary>
            <param name="Effect"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Effects.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.DurationEffect">
            <summary>
            An Effect which has a Duration.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.DurationEffect.Duration">
            <summary>
            The duration the effect lasts.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.DurationEffect.Progress">
            <summary>
            This value is between 0.0 (playback start)
            and 1.0 (playback finished).
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.BuyInfo">
            <summary>
            A set of information for the buy window (buy from NPC)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.BuyInfo.TradePartner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.BuyInfo.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.BuyInfo.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.GuildFlags">
            <summary>
            Wrapper around 32bit Guild flags
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.GuildAskData">
            <summary>
            Data of GuildAsk UC
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.GuildShieldInfo">
            <summary>
            Data of GuildShield
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.GuildID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.GuildName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.Color1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.Color2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.Design">
            <summary>
            The selected design.
            Note: This is not zero based. First one is '1'.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.Shields">
            <summary>
            Not contained in serialization.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildShieldInfo.ExampleModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectContents">
            <summary>
            A set of information for the contentswindow of objects (like chests)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PlayerOverlay">
            <summary>
            A model for first person weapon/shield/... overlays
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.PlayerOverlay.RenderPosition">
            <summary>
            Hotspot index where to show overlay
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.KeyValuePairString">
            <summary>
            An keyvalue pair with both strings
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommandGuildHalls.CommandType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.WelcomeInfo">
            <summary>
            A set of information for avatar selection with MOTD.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.LookTypeFlags">
            <summary>
            Wrapper around looktype flags
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ResourceIDBGF">
            <summary>
            Extends ResourceID with a BgfFile resource property.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PlayMusic">
            <summary>
            Info for Music playback
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.SectorMove">
            <summary>
            Sector movement info.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SectorMove.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.SectorMove.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.TradeInfo">
            <summary>
            Cumulated info for trade.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.IsVisible">
            <summary>
            This is true once the trade is switched visible,
            even before it might be server recognized.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.IsPending">
            <summary>
            This is true once the trade is server-recognized,
            so once at least one party has offered their items.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.IsBackgroundOffer">
            <summary>
            Whether this trade was created by BP_OFFER in background
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.IsItemsYouSet">
            <summary>
            Whether you have defined your items yet or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.IsItemsPartnerSet">
            <summary>
            Whether your partner has set his items yet or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.TradePartner">
            <summary>
            Your current tradepartner or NULL.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.ItemsPartner">
            <summary>
            The last set of items you have been offered.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeInfo.ItemsYou">
            <summary>
            The last set of items you offered.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.TradeInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.TradeInfo.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.TradeInfo.Tick(System.Double,System.Double)">
            <summary>
            Call regularly to update objects
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.Models.TradeInfo.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Data.Models.ActionButtonConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ActionButtonConfig.GetAction(System.String)">
            <summary>
            Returns an AvatarAction from a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.Animation">
            <summary>
            Abstract animation base class.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Animation.CurrentGroup">
            <summary>
            Current group from the BGF to show.
            Updated by calling Update()
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Animation.GroupMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Animation.AnimationLength">
            <summary>
            The ms it requires to play the full animation once.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.IsValid(System.Int32)">
            <summary>
            True if Group values set on in this instance
            are valid for Num of Groups in Bgf (e.g. in range)
            </summary>
            <param name="GroupsInBgf"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.ExtractAnimation(System.Byte[],System.Int32)">
            <summary>
            Extracts an animation from Buffer, 
            if the 1. read byte signals a known animation type.
            </summary>
            <param name="Buffer">Buffer to extract from</param>
            <param name="StartIndex">Index to start reading</param>
            <returns>Typed animation class instance or NULL</returns>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.ExtractAnimation(System.Byte*@)">
            <summary>
            See managed variant.
            </summary>
            <param name="Buffer">Referenced pointer to Animation start</param>
            <returns>Typed animation class instance or NULL</returns>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.ExtractAnimation(System.String,System.Char)">
            <summary>
            Tries to extract an animation instance from delimiter seperated string value
            </summary>
            <param name="Value"></param>
            <param name="Delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.SetValues(System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Sets group values and fires a single propertychanged for currentgroup
            </summary>
            <param name="CurrentGroup"></param>
            <param name="GroupMax"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Animation.Tick(System.Double,System.Double)">
            <summary>
            Call regularly to update CurrentGroup
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationCycle.AnimationType">
            <summary>
            Type of the animation
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationCycle.AnimationLength">
            <summary>
            This is the period value multiplied by the amount of different frames
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationCycle.Period">
            <summary>
            Milliseconds between frames
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationCycle.GroupLow">
            <summary>
            Group to start with.
            Note: Setting to 0 results in setting to 1
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationCycle.GroupHigh">
            <summary>
            Iterate up to this group
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AnimationNone">
            <summary>
            An animation which has just a static frame
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationNone.AnimationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationNone.AnimationLength">
            <summary>
            This is 0 for type 'None'
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationNone.CurrentGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationNone.Group">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AnimationOnce">
            <summary>
            An animation which is played once without repeat.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.AnimationType">
            <summary>
            Type of this animation
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.AnimationLength">
            <summary>
            This is the period value multiplied by the amount of different frames + one more
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.Period">
            <summary>
            Interval for changing to next frame
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.GroupLow">
            <summary>
            Group to start with
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.GroupHigh">
            <summary>
            Group to go up to
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.GroupFinal">
            <summary>
            Group to show when finished
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.AnimationOnce.Finished">
            <summary>
            Whether the animation is finished or not
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.AnimationOnce.Tick(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="T:Meridian59.Data.Models.ArticleHead">
            <summary>
            An article header used in messages overview of newsglobes.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ArticleHead.Number">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ArticleHead.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ArticleHead.Poster">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ArticleHead.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AvatarCreatorSkillObject">
            <summary>
            Contains information about a selectable skill during avatar creation wizard.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.AvatarCreatorSpellObject">
            <summary>
            Contains information about a selectable spell during avatar creation wizard.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.BackgroundOverlay">
            <summary>
            A BackgroundOverlay
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.CharSelectAd">
            <summary>
            An advertise item in the character selectionscreen.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.CharSelectItem">
            <summary>
            A character item in the selectionscreen.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ChatCommand">
            <summary>
            A command parsed from a user input / text (i.e. say)
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.Parse(System.String,Meridian59.Data.DataController,Meridian59.Common.Config)">
            <summary>
            Parses a ChatCommand instance from string input and available data.
            </summary>
            <param name="Text">Text input to parse</param>
            <param name="DataController">Reference to DataController instance</param>
            <param name="Config">Reference to Config instance</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseTell(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseGoPlayer(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            Very much like ParseTell (copy'n'paste)!
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseGetPlayer(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            Almost exactly like ParseGoPlayer
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseCast(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            Almost exactly like ParseGoPlayer
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseTempSafe(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseGrouping(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseAutoLoot(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseAutoCombine(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseReagentBag(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseSpellPower(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatCommand.ParseInvite(System.String[],System.String,Meridian59.Data.DataController)">
            <summary>
            Very much like ParseGoPlayer (copy'n'paste)!
            </summary>
            <param name="Words"></param>
            <param name="Text"></param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.ChatStyle">
            <summary>
            Defines a style for a part of a chat string
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.ProcessStyleCharacter(System.Char,Meridian59.Common.Enums.ChatMessageType)">
            <summary>
            Changes properties based on a known StyleChar
            </summary>
            <param name="StyleCharacter"></param>
            <param name="MessageType"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.IsInlineStyle(System.String,System.Int32)">
            <summary>
            Checks whether there is a known inline style character pair
            in given Text at given Position
            </summary>
            <param name="Text"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.IsMarker(System.Char)">
            <summary>
            Tells whether given Character is a MARKER
            for beginning of inline formatting tag.
            </summary>
            <param name="Character"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.IsStyleChar(System.Char)">
            <summary>
            Checks if a character is one of the characters
            known inline style characters after MARKER
            </summary>
            <param name="Character"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.GetIndexWithoutInlineStyle(System.String,System.Int32)">
            <summary>
            Returns the index of a given index without any
            characters belonging to inline styles before it.
            </summary>
            <param name="Text"></param>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.RemoveInlineStyles(System.String)">
            <summary>
            Returns a cleaned up variant of Text without any inline text styles
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ChatStyle.GetStyles(System.String,Meridian59.Common.Enums.ChatMessageType)">
            <summary>
            Returns a list of TextStyles for a given Text
            </summary>
            <param name="Text"></param>
            <param name="MessageType"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.ServerString">
            <summary>
            M59 chat message model
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.Variables">
            <summary>
            Attached variables
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.Styles">
            <summary>
            Styles of messageparts.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.ChatMessageType">
            <summary>
            Type of this chatmessage
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.ResourceID">
            <summary>
            Main ResourceID of the message
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.ResourceName">
            <summary>
            Main string
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ServerString.FullString">
            <summary>
            Resolved and constructed full string.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ServerString.HasVariable(System.String,System.Int32)">
            <summary>
            Checks whether a string still contains an inline variable
            </summary>
            <param name="String">string to check</param>
            <param name="StartIndex"></param>
            <returns>index of the next inline variable (-1 if none found)</returns>
        </member>
        <member name="M:Meridian59.Data.Models.ServerString.ExtractPosition(System.String,System.Int32,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Tries to extract a $pos number from string and removes it.
            </summary>
            <param name="String"></param>
            <param name="StartIndex"></param>
            <param name="Edited"></param>
            <param name="Position"></param>
            <param name="Removed"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ServerString.BuildString(System.Boolean)">
            <summary>
            Builds the 'FullString' property based on 
            the available parameters in 'Variables',
            the root resource id and the user-language dependent strings.
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ServerString.GetServerStringForString(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Meridian59.Common.Enums.ChatColor)">
            <summary>
            Creates a local 'ServerString' instance for given text and
            style settings.
            </summary>
            <param name="Text"></param>
            <param name="IsBold"></param>
            <param name="IsCursive"></param>
            <param name="IsUnderline"></param>
            <param name="IsStrikeout"></param>
            <param name="IsLink"></param>
            <param name="Color"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.ConnectionInfo">
            <summary>
            Set of data representing a connection to a M59 server.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.DownloadFileInfo">
            <summary>
            DownloadFileInfo for updates.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.DownloadInfo">
            <summary>
            DownloadInfo for updates
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Effect.ExtractEffect(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts an effect from Buffer, 
            </summary>
            <param name="Buffer">Buffer to extract from</param>
            <param name="StartIndex">Index to start reading</param>
            <param name="Length">Bytes to read</param>
            <returns>Typed effect class instance or NULL</returns>
        </member>
        <member name="M:Meridian59.Data.Models.Effect.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.EffectBlind">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectBlur">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectClearSand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectClearWeather">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectFlashXLat">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectGeneric">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectInvert">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectPain">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectParalyze">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectRaining">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectRelease">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectSand">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectSee">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectShake">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectSnowing">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectWaver">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectWhiteOut">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.EffectXLatOverride">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.GuildEntry">
            <summary>
            A Meridian59 Guild notation in Guild window.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildEntry.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildEntry.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildEntry.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Constructor by values
            </summary>
            <param name="Name"></param>
            <param name="ID"></param>
            <param name="Count"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildEntry.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildEntry.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildEntry.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.GuildInfo">
            <summary>
            Info about your own guild.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.GuildName">
            <summary>
            Name of the guild
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.PasswordSetFlag">
            <summary>
            If chestpassword is set or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.ChestPassword">
            <summary>
            Chest password
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.GuildID">
            <summary>
            Unique ID of the guild on the server.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank1Male">
            <summary>
            Male rank 1 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank1Female">
            <summary>
            Female rank 1 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank2Male">
            <summary>
            Male rank 2 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank2Female">
            <summary>
            Female rank 2 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank3Male">
            <summary>
            Male rank 3 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank3Female">
            <summary>
            Female rank 3 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank4Male">
            <summary>
            Male rank 4 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank4Female">
            <summary>
            Female rank 4 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank5Male">
            <summary>
            Male rank 5 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.Rank5Female">
            <summary>
            Female rank 5 name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.SupportedMember">
            <summary>
            The member you currently support for leadership
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.GuildMembers">
            <summary>
            List of guild members
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.GuildInfo.IsVisible">
            <summary>
            Whether the corresponding view attached to this model
            should be visible or not.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.GuildInfo.#ctor(System.String,System.Byte,System.String,Meridian59.Data.Models.GuildFlags,Meridian59.Data.Models.ObjectID,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Meridian59.Data.Models.ObjectID,System.Collections.Generic.IEnumerable{Meridian59.Data.Models.GuildMemberEntry})">
            <summary>
            Constructor by values
            </summary>
            <param name="GuildName"></param>
            <param name="PasswordSetFlag"></param>
            <param name="ChestPassword"></param>
            <param name="Flags"></param>
            <param name="GuildID"></param>
            <param name="Rank1Male"></param>
            <param name="Rank1Female"></param>
            <param name="Rank2Male"></param>
            <param name="Rank2Female"></param>
            <param name="Rank3Male"></param>
            <param name="Rank3Female"></param>
            <param name="Rank4Male"></param>
            <param name="Rank4Female"></param>
            <param name="Rank5Male"></param>
            <param name="Rank5Female"></param>
            <param name="SupportedMember"></param>
            <param name="GuildMembers"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RawData"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.GuildInfo.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="T:Meridian59.Data.Models.GuildMemberEntry">
            <summary>
            An entry of the own guild memberlist.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.InlineVariable">
            <summary>
            Inline variables like %s, %i. Used in chat, stringresources, ...
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.InventoryObject">
            <summary>
            An object in your inventory.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.InventoryObject.IsInUse">
            <summary>
            Whether the item is currently in use or not.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.InventoryObject.NumOfSameName">
            <summary>
            Used to keep track if this is the first (0) , second (1), ... of
            the item-name within a collection it is contained in.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.InventoryObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.InventoryObject.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Meridian59.Data.Models.LightingInfo,Meridian59.Common.Enums.AnimationType,System.Byte,System.Byte,Meridian59.Data.Models.Animation,Meridian59.Data.Lists.BaseList{Meridian59.Data.Models.SubOverlay},System.Boolean)">
            <summary>
            Constructor by values
            </summary>
            <param name="ID"></param>
            <param name="Count"></param>
            <param name="OverlayFileRID"></param>
            <param name="NameRID"></param>
            <param name="Flags"></param>
            <param name="LightingInfo"></param>
            <param name="FirstAnimationType"></param>
            <param name="ColorTranslation"></param>
            <param name="Effect"></param>
            <param name="Animation"></param>
            <param name="SubOverlays"></param>
            <param name="IsInUse"></param>
        </member>
        <member name="M:Meridian59.Data.Models.InventoryObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.InventoryObject.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointerbased parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.InventoryObject.GetAppearanceHash">
            <summary>
            Creates a 32bit hash for the appearance of the InventoryObject.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.TextureChangeInfo">
            <summary>
            Info about a texture change on a room element (wall/floors/...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TextureChangeInfo.ServerID">
            <summary>
            ServerID of the roomelement to change.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TextureChangeInfo.TextureNum">
            <summary>
            New texture num.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TextureChangeInfo.Flags">
            <summary>
            Flags for the changes.
            Defines what kind of element.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TextureChangeInfo.Resource">
            <summary>
            Resource of the new texture.
            Set by ResolveResources().
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.TextureChangeInfo.ChangeFlags">
            <summary>
            Wrapper around 8 !! bit sidedef flags
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.NewsGroup">
            <summary>
            A set of basic information about a newsglobe object
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PlayerInfo">
            <summary>
            A set of information about a player object (when requesting to look at)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectInfo">
            <summary>
            A set of information about a nonplayer object (when requesting to look at)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PlaySound">
            <summary>
            Info for Sound playback
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.PlaySound.Flags">
            <summary>
            Nested class. Flags for Playback.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.Stat">
            <summary>
            A M59 stat (like spellist entry, avatar status, ...)
            </summary>
        </member>
        <member name="F:Meridian59.Data.Models.Stat.TypeOffset">
            <summary>
            The offset to preread the type when parsing
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Stat.Type">
            <summary>
            The type of the stat
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Stat.Num">
            <summary>
            Num of the stat.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Stat.ResourceID">
            <summary>
            The unique ID of the resource.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Stat.ResourceName">
            <summary>
            The name.
            Set in ResolveStrings()
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Stat.Resource">
            <summary>
            The resource.
            Set in ResolveResources()
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Stat.ExtractStat(System.Byte[],System.Int32)">
            <summary>
            Extract a stat object from byte array
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Stat.ExtractStat(System.Byte*@)">
            <summary>
            Extract a stat object from byte pointer
            </summary>
            <param name="Buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.Mail">
            <summary>
            A M59 mail
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Mail.Load(System.String)">
            <summary>
            Load from XML file.
            </summary>
            <returns>False if an exception was raised.</returns>
        </member>
        <member name="M:Meridian59.Data.Models.Mail.Save(System.String)">
            <summary>
            Save to XML file
            </summary>
            <returns>False if an exception was raised.</returns>
        </member>
        <member name="M:Meridian59.Data.Models.Mail.GetFilename">
            <summary>
            Creates a filename for the mail based on Num.
            Example: 00001.xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Mail.IsMessageForNoMessages">
            <summary>
            True if the Mail is no real mail but 
            indicates that there are no new mails.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.Mail.ParseTitle(System.String,System.String@,System.String@)">
            <summary>
            Message title is encoded into the message text.
            It's the first line until the first line break.
            It also contains a string: "Subject: ", which depends
            on the language of the client sending it.
            </summary>
            <param name="FullText">Full input text</param>
            <param name="Title">Out variable storing parsed title. Default: String.Empty</param>
            <param name="Text">Out variable storing parsed text. Default: String.Empty</param>
            <returns>Successful or not</returns>
        </member>
        <member name="T:Meridian59.Data.Models.LightShading">
            <summary>
            Sphere position in M59 style
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectBase">
            <summary>
            An often used base notation of an object (e.g. inventory)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.HasLight">
            <summary>
            ObjectBase or deriving class instances can support a light or not.
            This does not reflect an active or inactive light on the object, but instead the general
            capability to carry a light, so it's not changeable and depends on the use case of this class.
            Affects the parser.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.OverlayFileRID">
            <summary>
            The resource ID of the main overlay/image
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.NameRID">
            <summary>
            The resource ID of the object's name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.Flags">
            <summary>
            Some flags for object behaviour/appearance/...
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.LightingInfo">
            <summary>
            Flags for a possibly attached lightsource
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.FirstAnimationType">
            <summary>
            The type of the first animation,
            should be TRANSLATION or EFFECT.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.ColorTranslation">
            <summary>
            The color palette nr to use on main overlay,
            if FirstAnimationType is set to TRANSLATION
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.Effect">
            <summary>
            The effect value to use on main overlay
            if FirstAnimationType is set to EFFECT
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.Animation">
            <summary>
            The 'real' Animation for the main overlay,
            should be NONE, ONCE or CYCLE.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.SubOverlays">
            <summary>
            The SubOverlays attached to the object (arms, legs, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.Name">
            <summary>
            The resolved Name for NameRID
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.OverlayFile">
            <summary>
            The resolved Filename for OverlayFileRID
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.Resource">
            <summary>
            The resolved resource for main overlay.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.ViewerFrameIndex">
            <summary>
            Index of Frame in resource for current ViewerAngle,
            or -1 if no resource or nonavailable Group.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.ViewerFrame">
            <summary>
            The frame of resource for current ViewerAngle,
            or null if not available.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.ViewerAngle">
            <summary>
            An angle a viewer has on the object
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.AnimationLength">
            <summary>
            The ms of the longest animation (main or suboverlay)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.NextUpdate">
            <summary>
            Can keep track of an update to be processed on this object
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Meridian59.Data.Models.LightingInfo,Meridian59.Common.Enums.AnimationType,System.Byte,System.Byte,Meridian59.Data.Models.Animation,System.Collections.Generic.IEnumerable{Meridian59.Data.Models.SubOverlay},System.Boolean)">
            <summary>
            Constructor by values
            </summary>
            <param name="ID"></param>
            <param name="Count"></param>
            <param name="OverlayFileRID"></param>
            <param name="NameRID"></param>
            <param name="Flags"></param>
            <param name="LightingInfo"></param>
            <param name="FirstAnimationType"></param>
            <param name="ColorTranslation"></param>
            <param name="Effect"></param>
            <param name="Animation"></param>
            <param name="SubOverlays"></param>
            <param name="HasLight"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.#ctor(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Constructor by parser.
            </summary>
            <param name="HasLight"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.#ctor(System.Boolean,System.Byte*@)">
            <summary>
            Constructor by pointerbased parser
            </summary>
            <param name="HasLight"></param>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.UpdateFromModel(Meridian59.Data.Models.ObjectUpdate,System.Boolean)">
            <summary>
            Updates values of this instance to values taken from parameter instance.
            </summary>
            <param name="Model"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.UpdateFromModel(Meridian59.Data.Models.ObjectBase,System.Boolean)">
            <summary>
            Updates values of this instance to values taken from parameter instance.
            </summary>
            <param name="Model"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.UpdateFromModel(Meridian59.Data.Models.ObjectFlagsUpdate,System.Boolean)">
            <summary>
            Updates values of this instance to values taken from parameter instance.
            </summary>
            <param name="Model"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.OnAnimationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when animation triggered PropertyChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.OnSubOverlayPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when suboverlay triggered PropertyChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.OnSubOverlaysListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.OnFlagsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when flags triggered PropertyChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.OnLightingInfoPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when ligntinginfo triggered PropertyChanged
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.Tick(System.Double,System.Double)">
            <summary>
            Processes the animations of the objects,
            call regularly in threadloop.
            May raise AppearanceChanged event.
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.DecompressResources">
            <summary>
            Decompresses all not yet decompressed resources.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.CurrentSubOverlays">
            <summary>
            Returns SubOverlays.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.GetSubOverlayByHotspot(System.Byte)">
            <summary>
            Try to find a SubOverlay with given Hotspot index
            </summary>
            <param name="Hotspot"></param>
            <returns></returns>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectBase.AppearanceHash">
            <summary>
            A unique hash of the appearance of the object
            </summary>
        </member>
        <member name="E:Meridian59.Data.Models.ObjectBase.AppearanceChanged">
            <summary>
            Triggered when the appearance has changed
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.ProcessAppearance(System.Boolean)">
            <summary>
            Call to possibly raise an AppearanceChanged event
            if new AppearanceHash.
            </summary>
            <param name="Force"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.UpdateFrameIndices">
            <summary>
            Updates the ViewerFrameIndex for this instance
            and all suboverlays.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.GetAppearanceHash">
            <summary>
            Creates a 32bit hash for the appearance of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.RaiseAppearanceChanged">
            <summary>
            Raise AppearanceChanged event if listener set.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectBase.MarkForAppearanceChange">
            <summary>
            Mark the object to have changed appearance,
            forces a redraw.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectChatMessage">
            <summary>
            Derived from ServerString.
            Additionally has blakserv ID and resource ID of sender of the message.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectFlags">
            <summary>
            Wrapper around 28-Bit ObjectFlags (for VANILLA), or with several extended datavalues (OpenMeridian).
            </summary>
            <remarks>
            * Blakserv is using 28-Bit (but 32-Bit are shown here, so upper 4 bits are always 0)
            * Bitmasks sections marked with ENUM: Must interpret all bits together as type value
            * Bitmasks sections marked with BOOLS: Must interpret each bit as boolean
            * See official manual pages 92-93 (is a bit outdated)
            * Definitions for C in 'include\proto.h'
            * Definitions for KOD in 'kod\include\blakston.khd'
            </remarks>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectFlags.MoveOnType">
            <summary>
            Possible MoveOnTypes
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectFlags.PlayerType">
            <summary>
            Possible PlayerTypes
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectFlags.DrawingType">
            <summary>
            Possible DrawingTypes
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.NameColor">
            <summary>
            32-Bit name color
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.Minimap">
            <summary>
            Minimap flags
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.MoveOn">
            <summary>
            MoveOnType as embedded in this flags
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.Player">
            <summary>
            PlayerType as embedded in this flags
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.Drawing">
            <summary>
            DrawingType as embedded in this flags
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.#ctor(System.UInt32,Meridian59.Data.Models.ObjectFlags.DrawingType,System.UInt32,System.UInt32,Meridian59.Data.Models.ObjectFlags.PlayerType,Meridian59.Data.Models.ObjectFlags.MoveOnType)">
            <summary>
            Constructor
            </summary>
            <param name="Value">Old flags</param>
            <param name="Drawing">Dedicated drawing type</param>
            <param name="Minimap">Dedicated minimap flags</param>
            <param name="NameColor">Dedicated name color</param>
            <param name="Player">Dedicated player type</param>
            <param name="MoveOn">Dedicated moveon type</param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.#ctor(System.Byte*@)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.UpdateFromModel(Meridian59.Data.Models.ObjectFlags,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Flags"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsDisplayName">
            <summary>
            True if the object should have a name displayed.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsSign">
            <summary>
            True if the object is a sign.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsPlayer">
            <summary>
            True if the object is a player.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsAttackable">
            <summary>
            True if the object is attackable.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsGettable">
            <summary>
            True if the object is gettable.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsContainer">
            <summary>
            True if the object is a container.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsNoExamine">
            <summary>
            True if the object can't be examined.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMagicItem">
            <summary>
            True if the object is a magic item.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsHanging">
            <summary>
            True if the object is hanging from the ceiling.
            Note: For VANILLA this overlaps with PF_CREATOR
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsOfferable">
            <summary>
            True if the object can be offered to.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsBuyable">
            <summary>
            True if you can buy from the object.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsActivatable">
            <summary>
            True if the object can be activated.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsApplyable">
            <summary>
            True if the object can be applied.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsNPC">
            <summary>
            True if the object is a NPC.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsFlickering">
            <summary>
            True if the object is flickering.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsFlashing">
            <summary>
            True if the object is flashing.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsBouncing">
            <summary>
            True if the object is bouncing.
            Note: Overlaps. Bouncing if Flickering AND Flashing true
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsPhasing">
            <summary>
            True if the object is phasing.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapPlayer">
            <summary>
            True for a standard blue player dot in minimap.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapEnemy">
            <summary>
            True if the object is an enemy player.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapFriend">
            <summary>
            True if the object is a friendly player.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapGuildMate">
            <summary>
            True if the object is a guildmate.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapBuilderGroup">
            <summary>
            True if the minimap should show buildergroup dot
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapMonster">
            <summary>
            True if the object should get a monster minimap dot.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapNPC">
            <summary>
            True if the object should get a NPC minimap dot.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapMinionSelf">
            <summary>
            Set if a monster is our minion
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapMinionOther">
            <summary>
            Set if monster is other's minion
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapTempSafe">
            <summary>
            Set if player has a temporary angel.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapMiniBoss">
            <summary>
            Set if mob is a miniboss (survival arena).
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapBoss">
            <summary>
            Set if mob is a boss (survival arena).
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsRareItem">
            <summary>
            Set if an object is a rare item.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapAggroSelf">
            <summary>
            Set if mob is aggroed on us.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapAggroOther">
            <summary>
            Set if mob is aggroed on someone else.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsMinimapMercenary">
            <summary>
            Set if mob is our mercenary/follower.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.IsSubset(Meridian59.Data.Models.ObjectFlags)">
            <summary>
            Returns true if all bits from Flags parameter
            are also set in the current value or if Flags
            paramter is null.
            </summary>
            <param name="Flags"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.ObjectFlags.IsSubset(Meridian59.Data.Models.ObjectFlags[])">
            <summary>
            Returns true if at least one (=OR) of Flags parameters
            is a subset of this objectflags.
            </summary>
            <param name="Flags"></param>
            <returns></returns>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectFlags.IsCreature">
            <summary>
            True if attackable, not a player and moveon=no
            </summary>     
        </member>
        <member name="T:Meridian59.Data.Models.ObjectID">
            <summary>
            A Meridian59 ID notation. It's the current listindex on the server, changing with server GC.
            It's 28-Bit only, 4 high Bits are flag whether it's a single or multi/stackable object.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectID.ID">
            <summary>
            The unique ID of the object on the server.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectID.Count">
            <summary>
            The amount of the item.
            0 if not stackable.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.ObjectID.IsStackable">
            <summary>
            True if count is greater than zero (stackable).
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.ObjectUpdate">
            <summary>
            ObjectUpdate for an Object known to the client (like a RoomObject or InventoryObject)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.OnlinePlayer">
            <summary>
            Online player information (id, name, flags, ...)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.Projectile">
            <summary>
            A projectile like a fireball or an arrow.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Projectile.ViewerAngle">
            <summary>
            An angle a viewer has on the projectile
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Projectile.ViewerFrameIndex">
            <summary>
            Index of Frame in resource for ViewerAngle
            or -1 if no resource or nonavailable Group.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Projectile.ViewerFrame">
            <summary>
            The frame of resource for current ViewerAngle
            or null if not available.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Projectile.UserData">
            <summary>
            User attached undefined data
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.Tick(System.Double,System.Double)">
            <summary>
            Processes the animations of the projectile,
            call regularly in threadloop.
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.UpdateViewerAngle(Meridian59.Common.V2)">
            <summary>
            Recalculates the ViewerAngle property based on a viewer's position.
            </summary>
            <param name="ViewerPosition"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.ResolveSourceTarget(System.Collections.Generic.IList{Meridian59.Data.Models.RoomObject},System.Boolean)">
            <summary>
            Tries to resolve the source and target RoomObject
            references from RoomObjects parameter, also sets the start position.
            </summary>
            <param name="RoomObjects"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.animation_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when animation changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.DecompressResources">
            <summary>
            Decompresses all not yet decompressed resources.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.Projectile.AppearanceHash">
            <summary>
            A unique hash of the appearance of the projectile
            </summary>
        </member>
        <member name="E:Meridian59.Data.Models.Projectile.AppearanceChanged">
            <summary>
            Triggered when the appearance has changed
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.ProcessAppearance">
            <summary>
            Call to possibly raise an AppearanceChanged event
            if new AppearanceHash.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.UpdateFrameIndices">
            <summary>
            Updates the ViewerFrameIndex for this instance.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.Projectile.GetAppearanceHash">
            <summary>
            Creates a 32bit hash for the appearance of the projectile.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.RoomInfo">
            <summary>
            Roominformation (MapID, Brigthness, ...)
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.RoomObject">
            <summary>
            A server created element in the room.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.CoordinateY">
            <summary>
            2D (UInt16) of the Z component of Position3D
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.CoordinateX">
            <summary>
            2D (UInt16) of X component of Position3D
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.Angle">
            <summary>
            The orientation of the RoomObject in radian.
            This is the clockwise measured angle between world x-Axis and object's x-Axis,
            assuming the object's y-Axis (height) is always parallel to world's y-Axis.
            Stays within bounds 0 to 2PI.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.AngleUnits">
            <summary>
            The orientation of the RoomObject in M59 angle units.
            This is converted from Angle property.
            Always stays within bounds 0 to 4096.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MotionFirstAnimationType">
            <summary>
            The type of the MotionAnimation
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MotionColorTranslation">
            <summary>
            The color palette for mainoverlay in case of motions
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MotionEffect">
            <summary>
            The effect for mainoverlay in case of motions
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MotionAnimation">
            <summary>
            The animation to use in case object is moving
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MotionSubOverlays">
            <summary>
            The SubOverlays to use in case object is moving
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.HealthStatus">
            <summary>
            Currently estimated health-status of the roomobject,
            either unknown or based on the last received ouch sound.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.HealthStatusLastUpdate">
            <summary>
            Internal time we last updated the health status.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.IsTarget">
            <summary>
            Whether this is the current target or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.IsHighlighted">
            <summary>
            Whether this is object is highlighted or not (e.g. mouseover)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.DistanceToAvatarSquared">
            <summary>
            The squared distance between this roomobject and the player's avatar object.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.DistanceToViewerSquared">
            <summary>
            The squared distance between this roomobject and viewer's (camera) position.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.UserData">
            <summary>
            User attached undefined data
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.Position2D">
            <summary>
            The 2D position of the object on groundplane (x=x, y=z)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.IsAvatar">
            <summary>
            Whether this is our avatar or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.FrontFrameIndex">
            <summary>
            Index of Frame in resource for angle = 0,
            or -1 if no resource or nonavailable Group.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.FrontFrame">
            <summary>
            The frame of resource for a frontal view on the object
            or null if not available.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.CurrentSubOverlays">
            <summary>
            Returns either SubOverlays or MotionSubOverlys property,
            depending on IsMoving state.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.SubSector">
            <summary>
            The Roo SubSector this object is contained in or NULL
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointerbased parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.Clear(System.Boolean)">
            <summary>
            Resets the object to default state/values
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.Position3D">
            <summary>
            Current 3D position of the RoomObject
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.IsMoving">
            <summary>
            Whether or not the object is currently moving
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.VerticalSpeed">
            <summary>
            The vertical speed of the object (falling, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.HorizontalSpeed">
            <summary>
            The horizontal speed of the object
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MoveDestination">
            <summary>
            The destination of last/current movement in 2D
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MoveStart">
            <summary>
            The start of the last/current movement in 2D
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MoveSpeedFactor">
            <summary>
            Used for dynamic move interpolation adjust (speed-up)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MoveSpeedStart">
            <summary>
            Used for dynamic move interpolation adjust (slow-down)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.MoveLength">
            <summary>
            Length from MoveStart to MoveDestination
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdatePosition(System.Double,Meridian59.Data.Models.RoomInfo)">
            <summary>
            Updates the position (including height) of the RoomObject in a timedelta based step
            closer to the Destination.
            </summary>
            <param name="TickSpan">Elapsed ms since last call</param>
            <param name="RoomInfo">Server sent room information, also has loaded reference to ROO</param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdateHeightPosition(Meridian59.Data.Models.RoomInfo)">
            <summary>
            Instantly updates the height from ROO
            </summary>
            <param name="RoomInfo"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.StartMoveTo(Meridian59.Common.V2@,System.Byte)">
            <summary>
            Sets a destination and marks the object as moving,
            the movement will be processed step by step in UpdatePosition().
            </summary>
            <param name="Destination"></param>
            <param name="Speed"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.OnMotionAnimationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when MotionAnimation changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.OnMotionSubOverlayPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when a MotionSuboverlay changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.OnMotionSubOverlaysListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.Tick(System.Double,System.Double)">
            <summary>
            Processes continuous changes of the objects,
            call regularly in threadloop.
            May raise AppearanceChanged event and others.
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdateViewerAngle(Meridian59.Common.V2@)">
            <summary>
            Recalculates the ViewerAngle property based on a viewer's position.
            Call this when your viewer changes his position.
            </summary>
            <param name="ViewerPosition"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdateDistanceToAvatarSquared(Meridian59.Data.Models.RoomObject)">
            <summary>
            Recalculates the DistanceToAvatarSquared property
            based on the AvatarObject parameter.
            </summary>
            <param name="AvatarObject"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdateDistanceToViewerSquared(Meridian59.Common.V3@)">
            <summary>
            Recalculates the DistanceToViewerSquared property
            based on the Viewer parameter.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetROOPosition3D">
            <summary>
            Current 3D position converted to ROO format
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.DecompressResources">
            <summary>
            Decompresses all not yet decompressed resources.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistance(Meridian59.Data.Models.RoomObject)">
            <summary>
            Gets the distance between this and another RoomObject
            </summary>
            <param name="RoomObject"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistanceSquared(Meridian59.Data.Models.RoomObject)">
            <summary>
            Gets the squared distance between this and another RoomObject
            </summary>
            <param name="RoomObject"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistanceSquared(Meridian59.Common.V3@)">
            <summary>
            Gets the squared distance between this object and a location.
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetAngleTo(Meridian59.Data.Models.RoomObject)">
            <summary>
            Gets the angle that needs to bet set 
            to make this RoomObject
            look at another RoomObject
            </summary>
            <param name="LookAt"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetAngleBetween(Meridian59.Data.Models.RoomObject)">
            <summary>
            Returns the smaller angle between this RoomObject
            and its angle and another RoomObject.
            </summary>
            <param name="RoomObject"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.IsVisibleFrom(Meridian59.Common.V3@,Meridian59.Files.ROO.RooFile)">
            <summary>
            Checks if this object is visible from a position
            in a room.
            </summary>
            <param name="Position"></param>
            <param name="Room"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetObjectsWithinDistance(System.Collections.Generic.IEnumerable{Meridian59.Data.Models.RoomObject},Meridian59.Files.ROO.RooFile,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns all visible RoomObjects within given distance
            from this instance.
            </summary>
            <param name="RoomObjects">Objects to check</param>
            <param name="Room">Room used for collision</param>
            <param name="BackRadius">Max. distance behind</param>
            <param name="FrontRadius">Max. distance in front</param>
            <param name="AddAvatar">If also to add avatar roomobject</param>
            <returns></returns>
        </member>
        <member name="E:Meridian59.Data.Models.RoomObject.ViewerAppearanceChanged">
            <summary>
            Triggered when the viewerappearance has changed
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.RoomObject.ViewerAppearanceHash">
            <summary>
            A unique hash of the viewer's appearance of the object
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetAppearanceHash">
            <summary>
            Creates a 32bit hash for the appearance of the RoomObject
            in frontview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetViewerAppearanceHash">
            <summary>
            Creates a 32bit hash for the appearance of the RoomObject
            for the current viewer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.ProcessAppearance(System.Boolean)">
            <summary>
            Call to possibly raise an AppearanceChanged 
            and ViewerAppearanceChanged event,
            if new AppearanceHash.
            </summary>
            <param name="Force"></param>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.UpdateFrameIndices">
            <summary>
            Updates the FrontFrameIndex and ViewerFrameIndex
            of resource and all suboverlays based on the current ViewerAngle property.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.RaiseViewerAppearanceChanged">
            <summary>
            Raise AppearanceChanged event if listener
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistanceSquared(Meridian59.Data.Models.RoomObject,Meridian59.Data.Models.RoomObject)">
            <summary>
            Static
            </summary>
            <param name="ObjectA"></param>
            <param name="ObjectB"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistanceSquared(Meridian59.Data.Models.RoomObject,Meridian59.Common.V3)">
            <summary>
            Static
            </summary>
            <param name="ObjectA"></param>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.RoomObject.GetDistance(Meridian59.Data.Models.RoomObject,Meridian59.Data.Models.RoomObject)">
            <summary>
            Static
            </summary>
            <param name="ObjectA"></param>
            <param name="ObjectB"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.StatList">
            <summary>
            Stat data list with your spells and skills.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatList.Type">
            <summary>
            The type of the stat
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatList.ObjectID">
            <summary>
            ID of the stat on the server.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatList.SkillPoints">
            <summary>
            SkillPoints
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatList.ResourceIconID">
            <summary>
            Unique resource ID of the icon.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatList.ResourceIconName">
            <summary>
            Name of the resource icon.
            Set in ResolveStrings()
            </summary>     
        </member>
        <member name="T:Meridian59.Data.Models.SpellObject">
            <summary>
            An object for the second spelllist with more info.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SpellObject.TargetsCount">
            <summary>
            How many concurrent targets this spell can have
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SpellObject.SchoolType">
            <summary>
            Type of school this spell belongs to
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.SpellObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.SpellObject.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Meridian59.Data.Models.LightingInfo,Meridian59.Common.Enums.AnimationType,System.Byte,System.Byte,Meridian59.Data.Models.Animation,System.Collections.Generic.IEnumerable{Meridian59.Data.Models.SubOverlay},System.Byte,Meridian59.Common.Enums.SchoolType)">
            <summary>
            Constructor by values
            </summary>
            <param name="ID"></param>
            <param name="Count"></param>
            <param name="OverlayFileRID"></param>
            <param name="NameRID"></param>
            <param name="Flags"></param>
            <param name="LightingInfo"></param>
            <param name="FirstAnimationType"></param>
            <param name="ColorTranslation"></param>
            <param name="Effect"></param>
            <param name="Animation"></param>
            <param name="SubOverlays"></param>
            <param name="TargetsCount"></param>
            <param name="SchoolType"></param>
        </member>
        <member name="M:Meridian59.Data.Models.SpellObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.SpellObject.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.SpellObject.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.SpherePosition">
            <summary>
            Sphere position in M59 style
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.SubOverlay">
            <summary>
            Suboverlay information (hotspot, color, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ResourceID">
            <summary>
            The ResourceID in stringdictionary
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.Animation">
            <summary>
            Attached animation
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.HotSpot">
            <summary>
            Index of hotspot to attach
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.FirstAnimationType">
            <summary>
            First animation type (either effect or color)
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ColorTranslation">
            <summary>
            Color palette index to apply
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.Effect">
            <summary>
            Effect index
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.Name">
            <summary>
            Resolved name
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.Resource">
            <summary>
            Resolved resource
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.FrontFrameIndex">
            <summary>
            Current BgfBitmap frame index in resource for front view
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ViewerFrameIndex">
            <summary>
            Current BgfBitmap frame index in resource for viewer view
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.FrontFrame">
            <summary>
            Current BgfBitmap in resource for front view
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ViewerFrame">
            <summary>
            Current BgfBitmap in resource for viewer view
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.FrontParent">
            <summary>
            The SubOverlay this is a child of in frontview.
            Used in double nested cases (subov on subov).
            Otherwise main overlay is parent.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ViewerParent">
            <summary>
            The SubOverlay this is a child of in viewerview.
            Used in double nested cases (subov on subov).
            Otherwise main overlay is parent
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.FrontHotspot">
            <summary>
            The hotspot this is attached to in frontview.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.SubOverlay.ViewerHotspot">
            <summary>
            The hotspot this is attached to in viewerview.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.GetAppearanceHash(System.Boolean)">
            <summary>
            Creates a 32bit hash for the appearance of the suboverlay.
            </summary>
            <param name="UseViewerFrame">Whether to use ViewerFrame or FrontFrame</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.UpdateFrameIndices(System.UInt16)">
            <summary>
            Updates the Viewer-, FrontFrame and indices
            if resource available.
            </summary>
            <param name="ViewerAngle">An viewer angle on the suboverlay.</param>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.UpdateHotspots(Meridian59.Data.Models.ObjectBase,System.Collections.Generic.IList{Meridian59.Data.Models.SubOverlay})">
            <summary>
            Updates the ViewerParent and ViewerHotspot property.
            </summary>
            <param name="Root">The object this suboverlay belongs to</param>
            <param name="SubOverlays">The current suboverlays of the object</param>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.UpdateHotspots(Meridian59.Data.Models.RoomObject,System.Collections.Generic.IList{Meridian59.Data.Models.SubOverlay})">
            <summary>
            Updates the ViewerParent, ViewerHotspot and
            FrontParent and FrontHotspot properties.
            </summary>
            <param name="Root"></param>
            <param name="SubOverlays"></param>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.OnAnimationPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handle animation change.
            Raise propertychange for animation property.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.Models.SubOverlay.ToString">
            <summary>
            Overwritten. Returns ResourceID value as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Data.Models.SubOverlay.RenderInfo">
            <summary>
            Set of information for rendering this SubOverlay.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.TradeOfferObject">
            <summary>
            A model for a trade-object used in NPC offers with price.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.TradeOfferObject.Price">
            <summary>
            Per unit price of the object.
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.TradeOfferObject.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.TradeOfferObject.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Meridian59.Data.Models.LightingInfo,Meridian59.Common.Enums.AnimationType,System.Byte,System.Byte,Meridian59.Data.Models.Animation,System.Collections.Generic.IEnumerable{Meridian59.Data.Models.SubOverlay},System.UInt32)">
            <summary>
            Constructor by values
            </summary>
            <param name="ID"></param>
            <param name="Count"></param>
            <param name="OverlayFileRID"></param>
            <param name="NameRID"></param>
            <param name="Flags"></param>
            <param name="LightingInfo"></param>
            <param name="FirstAnimationType"></param>
            <param name="ColorTranslation"></param>
            <param name="Effect"></param>
            <param name="Animation"></param>
            <param name="SubOverlays"></param>
            <param name="Price"></param>
        </member>
        <member name="M:Meridian59.Data.Models.TradeOfferObject.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Data.Models.TradeOfferObject.#ctor(System.Byte*@)">
            <summary>
            Constructor by pointer parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Data.Models.TradeOfferObject.Clear(System.Boolean)">
            <summary>
            
            </summary>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="T:Meridian59.Data.Models.UserCommand">
            <summary>
            This is an abstract baseclass for UserCommand classes.
            UserCommands are some kind of "submessages", often used for user interactions.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommand.CommandType">
            <summary>
            Type of this command
            </summary>
        </member>
        <member name="M:Meridian59.Data.Models.UserCommand.ExtractCommand(System.Boolean,Meridian59.Common.StringDictionary,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses a typed UserCommand subclass instance from a raw byte buffer.
            </summary>
            <param name="IsOutgoing">Outgoing (client->server) direction or not. This must be correct for some commands or will create parser errors.</param>
            <param name="StringResources">Reference to the string dictionary containing game strings.</param>
            <param name="Buffer">Buffer with bytes to read from</param>
            <param name="StartIndex">StartIndex for reading</param>
            <param name="Length">This is required to parse unknown UserCommandGeneric.</param>
            <returns>Subclass instance of UserCommand or UserCommandGeneric for unknown ones</returns>
        </member>
        <member name="T:Meridian59.Data.Models.UserCommandGuildAsk">
            <summary>
            Sent from server to client to make him show the
            guild creation window at Frular.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.UserCommandGuildCreate">
            <summary>
            Sent from client to server to create a guild.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.UserCommandGuildShieldInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommandGuildShieldInfo.CommandType">
            <summary>
            This command shares commandtype value with its request "UserCommandGuildShieldInfoReq".
            You have to decide based on message flowdirection, which one to parse.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommandGuildShieldInfoReq.CommandType">
            <summary>
            This command shares commandtype value with its response "UserCommandGuildShieldInfo".
            You have to decide based on message flowdirection, which one to parse.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommandGuildShieldList.CommandType">
            <summary>
            This command shares commandtype value with its request "UserCommandGuildShieldListReq".
            You have to decide based on message flowdirection, which one to parse.
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.UserCommandGuildShieldListReq.CommandType">
            <summary>
            This command shares commandtype value with its response "UserCommandGuildShieldList".
            You have to decide based on message flowdirection, which one to parse.
            </summary>
        </member>
        <member name="T:Meridian59.Data.Models.StatNumeric">
            <summary>
            Bar data used for character attributes and more
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.Type">
            <summary>
            The Stat type
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.Tag">
            <summary>
            The tag of this stat
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.ValueCurrent">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.ValueRenderMin">
            <summary>
            Minimum value for rendering
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.ValueRenderMax">
            <summary>
            Maximum value for rendering
            </summary>
        </member>
        <member name="P:Meridian59.Data.Models.StatNumeric.ValueMaximum">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="T:Meridian59.Data.DataController">
            <summary>
            Offers a bindable, observable and self updating data layer.
            This contains basically any information you need at runtime.
            Make sure to call the Message handlers.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RoomObjects">
            <summary>
            List of objects in your room
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RoomObjectsFiltered">
            <summary>
            Contains all objects from RoomObjects matching
            the currently set filter.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RoomObjectsLoot">
            <summary>
            Contains all objects from RoomObjects matching
            a distance-from-your-avater filter (these can be looted).
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Projectiles">
            <summary>
            List of current projectiles in room
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.OnlinePlayers">
            <summary>
            List of online players
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.InventoryObjects">
            <summary>
            Your inventory objects
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarCondition">
            <summary>
            Your condition values (HP, MP, Vigor)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarAttributes">
            <summary>
            Your attributes (STR, STAM, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarSkills">
            <summary>
            Your skills (slash, block, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarSpells">
            <summary>
            Your spells
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarQuests">
            <summary>
            The quests list
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RoomBuffs">
            <summary>
            Currently active room enchantments
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarBuffs">
            <summary>
            Currently active enchantments on your avatar
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.SpellObjects">
            <summary>
            Your known spells
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.BackgroundOverlays">
            <summary>
            List of background overlays (like sun)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.PlayerOverlays">
            <summary>
            First person weapon/shield/... overlay data
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.VisitedTargets">
            <summary>
            A list of visited targets for NextTarget function
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ClickedTargets">
            <summary>
            A list of recently clicked targets for click iteration.
            </summary>       
        </member>
        <member name="P:Meridian59.Data.DataController.IgnoreList">
            <summary>
            Messages from these players won't be added to the chatmessages list.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Groups">
            <summary>
            The user created groups for this server.
            Loaded for the connected server from its config section.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ChatMessages">
            <summary>
            List of received chat messages
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ChatCommandHistory">
            <summary>
            Saves last executed chatcommands
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.GameMessageLog">
            <summary>
            Log of message flow between client and server
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ActionButtons">
            <summary>
            The active actionbuttons / shortcuts.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RoomInformation">
            <summary>
            Information about the current room
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LightShading">
            <summary>
            Information about current directional light
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.BackgroundMusic">
            <summary>
            The current background music
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.GuildInfo">
            <summary>
            Information about the guild you belong to
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.GuildShieldInfo">
            <summary>
            Data for your or the currently selected guildshield
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.GuildHallsInfo">
            <summary>
            List of available guildhalls for sale
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.GuildAskData">
            <summary>
            Info transmitted for the GuildCreate window (e.g. cost)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.DiplomacyInfo">
            <summary>
            Diplomacy info between your guild and others
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AdminInfo">
            <summary>
            Admin info (for admin console) and more.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Trade">
            <summary>
            Info about a possible active trade
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Buy">
            <summary>
            Info about a possibly active Buy (from NPC) window
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.WelcomeInfo">
            <summary>
            Stores the welcome info transferred at login, containing selectable
            avatars and message of the day.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.CharCreationInfo">
            <summary>
            Info for the avatar creation wizard.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.StatChangeInfo">
            <summary>
            Info for the stat change wizard
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.NewsGroup">
            <summary>
            The last inspected newsgroup and its articles
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ObjectContents">
            <summary>
            The data of the last ObjectsContentMessage
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Effects">
            <summary>
            Currently active effects
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LookPlayer">
            <summary>
            The last inspected player
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LookObject">
            <summary>
            The last inspected nonplayer-object.
            This instance stays the same. Its properties change!
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LookSpell">
            <summary>
            The last inspected spell object.
            This instance stays the same. Its properties change!
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LookSkill">
            <summary>
            The last inspected skill object.
            This instance stays the same. Its properties change!
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ClientPreferences">
            <summary>
            Current client gameplay preferences (e.g. safety, tempsafe).
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ChatMessagesMaximum">
            <summary>
            Maximum entries in chat before remove
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ChatCommandHistoryIndex">
            <summary>
            Used in GetNext and GetPrevious.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ChatCommandHistoryMaximum">
            <summary>
            Maximum entries in executed chatcommand history
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LogOutgoingMessages">
            <summary>
            Whether to log outgoing messages
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LogIncomingMessages">
            <summary>
            Whether to log incoming messages
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.LogPingMessages">
            <summary>
            Whether to log Ping and PingEcho messages
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarID">
            <summary>
            The ID of your avatar
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.SelfTarget">
            <summary>
            Whether cast/uses are go on yourself.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TargetID">
            <summary>
            The ID of your currently selected object
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TargetObject">
            <summary>
            Your currently selected targetobject or NULL.
            Use TargetID to assign.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AvatarObject">
            <summary>
            The RoomObject of your avatar.
            Be careful: This is NULL at first and
            for a short moment whenever you change a room. 
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.IsNextAttackApplyCastOnHighlightedObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.IsResting">
            <summary>
            Whether you're currently resting or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.IsWaiting">
            <summary>
            Whether server is saving right now or not
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.IsAdminOrDM">
            <summary>
            True if AccountType is ADMIN or DM.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.MeridianTime">
            <summary>
            The current time in Meridian 59.
            With date set to 1/1/1.
            Updated when Tick() is called.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TPS">
            <summary>
            Ticks per second
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TickWorst">
            <summary>
            Worst tick duration
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TickAverage">
            <summary>
            Average tick duration
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.TickBest">
            <summary>
            Best tick duration
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.RTT">
            <summary>
            Roundtrip time
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ViewerPosition">
            <summary>
            Position of a viewer (camera)
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.UIMode">
            <summary>
            The current UI state
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.AccountType">
            <summary>
            The accounttype received with LoginOK
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.HitPoints">
            <summary>
            Returns your current hitpoints or 0 if not known.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ManaPoints">
            <summary>
            Returns your current manapoints or 0 if not known.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.VigorPoints">
            <summary>
            Returns your current vigorpoints or 0 if not known.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Hunger">
            <summary>
            Returns the delta between maximum vigor (usually 200) and your current vigor or 0 if not known.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Fatigue">
            <summary>
            Returns the delta between maximum vigor you can get by resting and your current vigor or 0 if not known.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.Injury">
            <summary>
            Returns the delta between your maximum hitpoints and your current hitpoints or 0 if not known.
            So this tells you how much you can heal.
            </summary>
        </member>
        <member name="P:Meridian59.Data.DataController.ManaMissing">
            <summary>
            Returns the delta between your maximum manapoints and your current manapoints or 0 if not known.
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.Reset">
            <summary>
            Reset the data to clear state
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.Invalidate">
            <summary>
            Invalidates all data not valid anymore
            after server-save cycle
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.Tick(System.Double,System.Double)">
            <summary>
            Updates all ITickable instances in the DataController.
            Call this regularly (e.g. once each thread-loop).
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.ResolveStrings(Meridian59.Common.StringDictionary,System.Boolean)">
            <summary>
            Executes ResolveStrings() on all stored datamodels.
            </summary>
            <param name="Strings">Strings to use for re-resolve</param>
            <param name="RaiseChangedEvent">Raise changed event or not</param>
        </member>
        <member name="M:Meridian59.Data.DataController.NextTarget">
            <summary>
            Switches your target to "next" one
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.ClickTarget(System.Collections.Generic.List{System.UInt32},System.Boolean)">
            <summary>
            Switches your target from a click
            </summary>
            <param name="RoomObjectIDs">Distance sorted list of overlapping IDs clicked at once.</param>
            <param name="UseFirst"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.GetInteractObject(System.Boolean,System.Boolean,Meridian59.Data.Models.ObjectFlags[])">
            <summary>
            Returns the currently highlighted object, or the current target or 
            else the closest object matching filterflags. Also resets 
            IsNextAttackApplyCastOnHighlightedObject back to false in case it was used.
            </summary>
            <param name="CheckFlagsOnTarget">
            If true, the current target or highlighted object must also match FilterFlags.
            If it does not, a possible closest candidate is returned instead (controlled by UseClosestInstead)
            If false, the current target or highlighted object will be returned no matter of FilterFlags.
            </param>
            <param name="UseClosestInstead">
            If true, will try to use the closest object matching flags in case the target object does not match flags.
            If false will return null if target is set but does not match filter.
            No effect until CheckFlagsOnTarget is also set to True.
            </param>
            <param name="FilterFlags">Optional Flags to filter for</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.DataController.GetClosestObjectInFront(Meridian59.Data.Models.ObjectFlags[])">
            <summary>
            Returns the closest roomobject in front of the avatar.
            </summary>
            <param name="FilterFlags">Optional Flags to filter for</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.DataController.ChatCommandHistoryAdd(System.String)">
            <summary>
            Adds a string at the beginning of the chatcommandhistory.
            May remove the last element.
            </summary>
            <param name="ChatCommand"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.ChatCommandHistoryGetNext">
            <summary>
            Tries to get the next element from the chatcommand history,
            if there is one more.
            </summary>
            <returns>ChatCommand string or NULL</returns>
        </member>
        <member name="M:Meridian59.Data.DataController.ChatCommandHistoryGetPrevious">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Data.DataController.OnRoomObjectsListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Executed when RoomObjects list changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.OnRoomObjectPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when a property on a roomobject changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.OnProjectilesListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Executed when Projectiles list changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.OnChatMessagesListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Executed when ChateMessages list changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.OnProjectilePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when a property on a projectile changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.OnRoomSectorMoved(System.Object,Meridian59.Files.ROO.SectorMovedEventArgs)">
            <summary>
            Executed when a sector in the room moves
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.ProcessViewerAngle">
            <summary>
            Update Viewer dependent properties on RoomObjects
            based on ViewerPosition in DataController
            </summary>
        </member>
        <member name="M:Meridian59.Data.DataController.HandleIncomingLoginModeMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Call with any incoming LoginModeMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Data.DataController.HandleIncomingGameModeMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Call with any incoming GameModeMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Meridian59.Files.ROO.RoomInfoFlags">
            <summary>
            Wrapper for RoomInfo flags
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RoomInfoFlags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Meridian59.Files.ROO.RoomInfoFlags.IsOverrideDepth1">
            <summary>
            True if SectorDepth1 "Shallow" in ROO should be overwritten with server-sent height.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RoomInfoFlags.IsOverrideDepth2">
            <summary>
            True if SectorDepth2 "Deep" in ROO should be overwritten with server-sent height.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RoomInfoFlags.IsOverrideDepth3">
            <summary>
            True if SectorDepth3 "Very deep" in ROO should be overwritten with server-sent height.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.BSPBuilder.GetLineEquation2DCoefficients(Meridian59.Common.V2,Meridian59.Common.V2,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the A, B, C coefficients of the general 2D line equation: Ax+By+C=0
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
        </member>
        <member name="T:Meridian59.Files.ROO.RooGrids">
            <summary>
            Several 2D grids as stored in ROO files
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.RooVersion">
            <summary>
            Controls which grids are used/written/read
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.Rows">
            <summary>
            Rows count of the 2D grids
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.Columns">
            <summary>
            Columns count of the 2D grids
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.GridMovement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.GridFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.GridMonster">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.RowsHighRes">
            <summary>
            Rows count of the high resolution grid
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.ColumnsHighRes">
            <summary>
            Columns count of the high resolution grid
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooGrids.GridHighRes">
            <summary>
            New high resolution grid with heights
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooGrids.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="RooVersion"></param>
            <param name="Rows"></param>
            <param name="Columns"></param>
            <param name="RowsHighRes"></param>
            <param name="ColumnsHighRes"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooGrids.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooGrids.#ctor(System.UInt32,System.Byte*@)">
            <summary>
            
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
        </member>
        <member name="T:Meridian59.Files.ROO.RooThingExtended">
            <summary>
            Extended RooThing with more info (new, barely used)
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.BowtieFlags">
            <summary>
            Bowtie flags
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.BowtieFlags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsBelowPos">
            <summary>
            Below wall is bowtie and positive sector is on top at endpoint 0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsBelowNeg">
            <summary>
            Below wall is bowtie and negative sector is on top at endpoint 0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsAbovePos">
            <summary>
            Above wall is bowtie and positive sector is on top at endpoint 0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsAboveNeg">
            <summary>
            Above wall is bowtie and negative sector is on top at endpoint 0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsBelowBowtie">
            <summary>
            Mask for bowtie variants on below wall.
            Contains bits of IsBelowPos and IsBelowNeg.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.BowtieFlags.IsAboveBowtie">
            <summary>
            Mask for bowtie variants on above wall.
            Contains bits of IsAbovePos and IsAboveNeg
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSectorFlags">
            <summary>
            Wrapper for sector flags
            </summary>
            <remarks>
            See original manual page 118
            </remarks>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSectorFlags.DepthType">
            <summary>
            Possible depth types a sector can have.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSectorFlags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.SectorDepth">
            <summary>
            Depth of this sector
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.ScrollSpeed">
            <summary>
            Scrollspeed assigned on this sector.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.ScrollDirection">
            <summary>
            Direction to scroll
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsScrollFloor">
            <summary>
            Scroll floor texture
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsScrollCeiling">
            <summary>
            Scroll ceiling texture
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsFlicker">
            <summary>
            Flicker light in sector
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsSlopedFloor">
            <summary>
            Sector has sloped floor
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsSlopedCeiling">
            <summary>
            Sector has sloped ceiling
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSectorFlags.IsHasAnimated">
            <summary>
            Has animated once and hence is dynamic geometry, required for new client
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooBSPItem.NodeType">
            <summary>
            Different types of nodes in a tree.
            Node = Has at least one child.
            Leaf = Has no children
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.RooVersion">
            <summary>
            RooVersion of the fileformat. Important for parsers.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.Type">
            <summary>
            Abstract. Type to set by deriving subclasses.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.BoundingBox">
            <summary>
            A 2D boundingbox of this BSP node (splitter or leaf).
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.X1">
            <summary>
            BoundingBox minimum X of this node (or leaf).
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.Y1">
            <summary>
            BoundingBox minimum Y of this node (or leaf).
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.X2">
            <summary>
            BoundingBox maximum X of this node (or leaf).
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooBSPItem.Y2">
            <summary>
            BoundingBox maximum Y of this node (or leaf).
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.#ctor(System.UInt32)">
            <summary>
            Constructor by values
            </summary>
            <param name="RooVersion"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.#ctor(System.UInt32,System.Byte*@)">
            <summary>
            Constructor by native parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.ResolveIndices(Meridian59.Files.ROO.RooFile)">
            <summary>
            Abstract. Must be implemented.
            </summary>
            <param name="RooFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.ExtractBSPItem(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooBSPItem.ExtractBSPItem(System.UInt32,System.Byte*@)">
            <summary>
            
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.ROO.RooFile">
            <summary>
            Meridian 59 map file. Containing BSP-Tree, Texture information and more.
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooFile.MaterialInfo">
            <summary>
            Bundles some info, used as return type in GetMaterialInfos()
            </summary>
        </member>
        <member name="E:Meridian59.Files.ROO.RooFile.WallTextureChanged">
            <summary>
            Raised when a texture on a wallside changed.
            </summary>
        </member>
        <member name="E:Meridian59.Files.ROO.RooFile.SectorTextureChanged">
            <summary>
            Raised when a texture on a floor or ceiling changed.
            </summary>
        </member>
        <member name="E:Meridian59.Files.ROO.RooFile.SectorMoved">
            <summary>
            Raised when Update() is called and a sector moved a bit.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.RooVersion">
            <summary>
            Version of this file/instance.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.Challenge">
            <summary>
            Checksum against room manipulation.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetClient">
            <summary>
            The offset of the client data sections start
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetServer">
            <summary>
            The offset of the server data section to start
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.EncryptionEnabled">
            <summary>
            Whether or not encryption is enabled.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.EncryptedStreamLength">
            <summary>
            Length of encrypted stream.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.ExpectedResponse">
            <summary>
            Used to verify decryption password.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.RoomSizeX">
            <summary>
            Length of the room.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.RoomSizeY">
            <summary>
            Width of the room.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetBSPTree">
            <summary>
            Offset of BSPTree section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetWalls">
            <summary>
            Offset of walls section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetWallsEditor">
            <summary>
            Offset of walls (used in windeu) section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetSideDefs">
            <summary>
            Offset of SideDefs section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetSectors">
            <summary>
            Offset of sectors section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.OffsetThings">
            <summary>
            Offset of Things section in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.BSPTree">
            <summary>
            The populated BSP tree for this room.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.Walls">
            <summary>
            Existing walls/linedefs in this room, as used by the client.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.WallsEditor">
            <summary>
            Existing walls/linedefs in this room, as used by WINDEU.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.SideDefs">
            <summary>
            Wall-sides in the room.
            Each Wall has 2 sides (with up to 3 parts).
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.Sectors">
            <summary>
            Sectors in a room are composed by referenced SubSectors (convex-polygons).
            SubSectors are part of the BSP-tree.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.Things">
            <summary>
            Things data.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.RoomID">
            <summary>
            RoomID (Note: This is mostly unset or uncorrect).
            WinDEU always saves it (save.cpp), but only loads it for NumThings > 2 (load.cpp)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.Grids">
            <summary>
            2D server grids for the room
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.BSPTreeNodes">
            <summary>
            Returns all BSP tree-nodes of type RooPartitionLine
            from BSPTree property.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.BSPTreeLeaves">
            <summary>
            Returns all BSP tree-nodes of type RooSubSector
            from BSPTree property.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.IsIndicesResolved">
            <summary>
            True if the indices read from file have been resolved to object references.
            See ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooFile.IsResourcesResolved">
            <summary>
            True if the required texture resources have been resolved to references.
            See ResolveResources().
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.#ctor(System.String)">
            <summary>
            Constructor by file
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetPassword">
            <summary>
            Gets password based on Version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.ResolveIndices">
            <summary>
            Resolves all index references to real object references
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.ResolveResources(Meridian59.Files.ResourceManager)">
            <summary>
            Uses a ResourceManager to resolve/load all resources (textures) references from
            </summary>
            <param name="M59ResourceManager"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.UncompressAll">
            <summary>
            Uncompresses all attached resources
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.DoCalculations">
            <summary>
            Runs all additional computations (i.e. wall heights)
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetHeightAt(System.Double,System.Double,Meridian59.Files.ROO.RooSubSector@,System.Boolean,System.Boolean)">
            <summary>
            Looks up the height of a point from the sector it's included in.
            </summary>
            <param name="x"></param>
            <param name="y"></param>        
            <param name="SubSector">The subsector the point was found in or NULL</param>
            <param name="IsFloor"></param>
            <param name="WithSectorDepth"></param>
            <returns>Height of point or -1 if no sector found for point</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetSubSectorAt(System.Double,System.Double)">
            <summary>
            Returns the subsector containing a given point in ROO coordinates.
            Starts searching from Root node.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>SubSector (leaf) or null</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetSideByServerID(System.Int32)">
            <summary>
            Returns the sidedef matching the given server id
            </summary>
            <param name="ServerID"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetBoundingBox2D(System.Boolean)">
            <summary>
            Calculates a two dimensional boundingbox for this room
            on the fly - either based on walls or editor walls.
            </summary>
            <param name="UseClientWalls"></param>
            <returns>
            If UseClientWalls=true, BoundingBox in 1:1024 scale based on RooWalls,
            else BoundingBox in 1:64 based on RooEditorWalls
            </returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetBoundingBox3D(System.Boolean)">
            <summary>
            Calculates a three dimensional boundingbox for this room
            on the fly - either based on walls or editor walls and on sectors.
            Note: Z is the height.
            </summary>
            <returns>
            If UseClientWalls=true, BoundingBox in 1:1024 scale based on RooWalls,
            else BoundingBox in 1:64 based on RooEditorWalls
            </returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetBoundingBox2DFromThings">
            <summary>
            Returns the two dimensional boundingbox as stored
            in Things section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.Tick(System.Double,System.Double)">
            <summary>
            Processes updates at runtime, like animations.
            Call regularly.
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetMaterialInfos">
            <summary>
            Returns a MaterialInfo dictionary with all materials used in this roofile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.VerifyMove(Meridian59.Common.V3@,Meridian59.Common.V2@,System.Double)">
            <summary>
            Checks a movement vector (Start->End) for wall collisions and
            returns a possibly adjusted movement vector to use instead.
            This might be a slide along a wall or a zero-vector for a full block.
            </summary>
            <param name="Start">Startpoint of movement. In FINENESS units (1:1024), Y is height.</param>
            <param name="End">Endpoint of movement. In FINENESS units (1:1024).</param>
            <param name="PlayerHeight">Height of the player for ceiling collisions</param>
            <returns>Same or adjusted delta vector between Start and end (in ROO coords)</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.VerifyMoveByList(Meridian59.Common.V3@,Meridian59.Common.V2@,System.Double)">
            <summary>
            
            </summary>
            <param name="Start"></param>
            <param name="End"></param>
            <param name="PlayerHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.VerifyMoveByTree(Meridian59.Files.ROO.RooBSPItem,Meridian59.Common.V3@,Meridian59.Common.V2@,System.Double,Meridian59.Files.ROO.RooWall)">
            <summary>
            Collisions with wall segments for user movements using the BSP tree.
            Therefore with logarithmic rather than linear costs.
            </summary>
            <param name="Node"></param>
            <param name="Start"></param>
            <param name="End"></param>
            <param name="PlayerHeight"></param>
            <param name="IgnoreWall"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.VerifySight(Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@)">
            <summary>
            Verifies Line of Sight from Start to End.
            Checking against Walls only (no sectors/ceilings).
            </summary>
            <param name="Start"></param>
            <param name="End"></param>
            <param name="I">Intersection</param>
            <returns>True if OK, false if collision.</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.VerifySightByTree(Meridian59.Files.ROO.RooBSPItem,Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@)">
            <summary>
            
            </summary>
            <param name="Node"></param>
            <param name="Start"></param>
            <param name="End"></param>
            <param name="I">Intersection Point</param>
            <returns>True if OK, false if collision.</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GenerateHeightMap(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Small helper function which tries to create a heightmap from roomdata.
            Not specifically used right now.
            </summary>
            <param name="Size"></param>
            <param name="IsFloor"></param>
            <param name="WithSectorDepths"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.OnSectorMoved(System.Object,System.EventArgs)">
            <summary>
            Executed when sector moved.
            Raised SectorMoved event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.OnSideTextureChanged(System.Object,Meridian59.Files.ROO.WallTextureChangedEventArgs)">
            <summary>
            Executed when walltexture changed, triggers event
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.OnSectorTextureChanged(System.Object,Meridian59.Files.ROO.SectorTextureChangedEventArgs)">
            <summary>
            Executed when sectortexture changed, triggers event
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            Handles some GameMode messages
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.Reset">
            <summary>
            Reset all properties to values from original ROO file
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.HandleChangeTexture(Meridian59.Protocol.GameMessages.ChangeTextureMessage)">
            <summary>
            Handle ChangeTextureMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.HandleSectorMove(Meridian59.Protocol.GameMessages.SectorMoveMessage)">
            <summary>
            Handle SectorMoveMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.HandleSectorChange(Meridian59.Protocol.GameMessages.SectorChangeMessage)">
            <summary>
            Handle SectorChangeMessage
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.HandleWallAnimateMessage(Meridian59.Protocol.GameMessages.WallAnimateMessage)">
            <summary>
            Handles a wall animate message, updates the according animation object
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetNameForTexture(Meridian59.Files.BGF.BgfFile,System.Int32)">
            <summary>
            Returns a name based on a name convention for textures.
            Basically the bgf filename, the frameindex added,
            and a dummy extension to potentially load it from a file
            Example: "grd00024-0.png"
            </summary>
            <param name="TextureFile"></param>
            <param name="FrameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooFile.GetNameForMaterial(Meridian59.Files.BGF.BgfFile,System.Int32,Meridian59.Common.V2)">
            <summary>
            Returns a name based on a name convention for Mogre from Bgf.
            </summary>
            <param name="TextureFile"></param>
            <param name="FrameIndex"></param>
            <param name="ScrollSpeed"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.ROO.RooWall">
            <summary>
            A wall on the map.
            See original "WallData" struct and bspload.c
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooWall.VertexData">
            <summary>
            Stores 3D VertexData for a side-part of a RooWall
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RooVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.Num">
            <summary>
            Number of this wall (1 based)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.NextWallNumInPlane">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.P1">
            <summary>
            First wall point (source)(oldclient FINENESS 1:1024)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.X1">
            <summary>
            Value of P1.X converted from and to integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.Y1">
            <summary>
            Value of P1.Y converted from and to integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.P2">
            <summary>
            Second wall point (dest)(oldclient FINENESS 1:1024)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.X2">
            <summary>
            Value of P2.X converted from and to integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.Y2">
            <summary>
            Value of P2.Y converted from and to integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.ClientLength">
            <summary>
            Length of the wall in server FINENESS (1:64).
            Note: Rather use the length of vector P1P2.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightXOffset">
            <summary>
            XOffset of the texture on the right side
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightYOffset">
            <summary>
            YOffset of the texture on the right side
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftXOffset">
            <summary>
            XOffset of the texture on the left side
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftYOffset">
            <summary>
            YOffset of the texture on the left side
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightSectorNum">
            <summary>
            Num (1 based) of sector to the right of this wall.
            0 is unset.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftSectorNum">
            <summary>
            Num (1 based) of the sector to the left of this wall.
            0 is unset.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightSideNum">
            <summary>
            Num (1 based) of the right side of this wall.
            0 is unset.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftSideNum">
            <summary>
            Num (1 based) of the left of left side of this wall.
            0 is unset.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightSector">
            <summary>
            Sector to the right of the wall.
            Will be resolved from RightSectorNum within ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftSector">
            <summary>
            Sector to the left of the wall.
            Will be resolved from LeftSectorNum within ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.RightSide">
            <summary>
            Right side of the wall.
            Will be resolved from RightSideNum within ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.LeftSide">
            <summary>
            Left side of the wall.
            Will be resolved from LeftSideNum within ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.BowtieFlags">
            <summary>
            Flags describing special intersection cases.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWall.NextWallInPlane">
            <summary>
            Next wall on same infinite line.
            Will be resolved from NextWallNumInPlane within ResolveIndices().
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.#ctor(System.UInt32,System.Int16,System.UInt16,System.UInt16,Meridian59.Common.V2,Meridian59.Common.V2,System.Int16,System.Int16,System.Int16,System.Int16,System.UInt16,System.UInt16)">
            <summary>
            Constructor by values
            </summary>
            <param name="RooVersion"></param>
            <param name="ServerID">Sometimes also called UserID, used to reference wall by server.</param>
            <param name="RightSideNum">Num of the right side of the wall (1=first, 0=unset)</param>
            <param name="LeftSideNum">Num of the left side of the wall (1=first, 0=unset)</param>
            <param name="P1">2D coordinates of startpoint, must be in 1:1024 units</param>
            <param name="P2">2D coordinates of endpoint, must be in 1:1024 units</param>
            <param name="RightXOffset"></param>
            <param name="LeftXOffset"></param>
            <param name="RightYOffset"></param>
            <param name="LeftYOffset"></param>
            <param name="RightSectorNum">Num of the sector right to the wall (1=first, 0=unset)</param>
            <param name="LeftSectorNum">Num of the sector left to the wall (1=first, 0=unset)</param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.#ctor(System.UInt32,System.Byte*@)">
            <summary>
            Constructor by pointerbased parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.ResolveIndices(Meridian59.Files.ROO.RooFile)">
            <summary>
            Creates object references from the Sector/Side Num references.
            </summary>
            <param name="RooFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.CalculateWallSideHeights">
            <summary>
            Fills in the Z coordinates for the wall.
            Make sure to call "ResolveIndices" before!
            Taken from "SetWallHeights" in bspload.c
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.GetP1P2">
            <summary>
            Gets line segment of wall (2D)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.IsBlockingMove(Meridian59.Common.V3@,Meridian59.Common.V2@,System.Double)">
            <summary>
            Checks if this wall blocks a
            move between Start and End
            </summary>
            <param name="Start">A 3D location</param>
            <param name="End">A 2D location</param>
            <param name="PlayerHeight">Height of the player for ceiling collisions</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.IsBlockingSight(Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@)">
            <summary>
            Checks if this wall blocks
            a view ray from Start to End
            </summary>
            <param name="Start"></param>
            <param name="End"></param>
            <param name="I">Possible Intersection point</param>
            <returns>True if blocked, false if OK</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.SlideAlong(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Modifies a 2D vector to slide along this wall
            Based on projection.
            </summary>
            <param name="Begin"></param>
            <param name="End"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.GetVertexData(Meridian59.Common.Enums.WallPartType,System.Boolean,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Returns ready to display render information for a sidepart of this wall.
            Note: Z component is the height.
            </summary>
            <param name="PartType">Which part (upper, middle, lower)</param>
            <param name="IsLeftSide">Left or Right side</param>
            <param name="TexWidth">Texture width</param>
            <param name="TexHeight">Texture height</param>
            <param name="TexShrink">Texture shrink</param>
            <param name="Scale">Additional scale for vertices</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWall.Split(Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            Splits this wall into two using infinite line given by Q1Q2.
            </summary>
            <param name="Q1"></param>
            <param name="Q2"></param>
            <returns>Item1: P1 to I. Item2: I to P2</returns>
        </member>
        <member name="T:Meridian59.Files.ROO.RooPartitionLine">
            <summary>
            A PartitionLine is a tree node in BSP-Tree.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.Type">
            <summary>
            PartitionLineType for RooPartitionLine
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.A">
            <summary>
            'a' variable for line equation ax+by+c=0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.B">
            <summary>
            'b' variable for line equation ax+by+c=0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.C">
            <summary>
            'c' variable for line equation ax+by+c=0
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.Right">
            <summary>
            Index of right child
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.Left">
            <summary>
            Index of left child
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.WallReference">
            <summary>
            Index of wall used as splitter
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.Wall">
            <summary>
            Reference to wall used as splitter or NULL.
            Will be filled in ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.RightChild">
            <summary>
            Reference to right child.
            Will be filled in ResolveIndices().
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooPartitionLine.LeftChild">
            <summary>
            Reference to left child.
            Will be filled in ResolveIndices().
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooPartitionLine.#ctor(System.UInt32,Meridian59.Common.BoundingBox2D,System.Double,System.Double,System.Double,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructor by values
            </summary>
            <param name="RooVersion"></param>
            <param name="BoundingBox"></param>
            <param name="A"></param>
            <param name="B"></param>
            <param name="C"></param>
            <param name="Right"></param>
            <param name="Left"></param>
            <param name="LineDefReference"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooPartitionLine.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooPartitionLine.#ctor(System.UInt32,System.Byte*@)">
            <summary>
            Constructor by native parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooPartitionLine.ResolveIndices(Meridian59.Files.ROO.RooFile)">
            <summary>
            
            </summary>
            <param name="RooFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooPartitionLine.GetDistance(Meridian59.Common.V2@)">
            <summary>
            Returns the distance of point P from this infinite splitter line.
            Uses the line equation coefficients from properties (A,B,C).
            Sign of value gives the side.
            </summary>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.ROO.RooWallEditor">
            <summary>
            This class implements a wall as it is saved and shown by the old roomedit.
            </summary>
            <remarks>
            They significantly differ from RooWall:
             (a) They can start or end at negative coordinates
             (b) Their Y axis/coordinate is flipped
             (c) Their scale is 1:64 rather than 1:1024
             (d) They can get split up into two or more RooWall in BSP building
            </remarks>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.P0">
            <summary>
            Start point of this line
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.P1">
            <summary>
            End point of this line.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.X0">
            <summary>
            Returns or sets X component of P0 as integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.Y0">
            <summary>
            Returns or sets Y component of P0 as integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.X1">
            <summary>
            Returns or sets X component of P1 as integer
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooWallEditor.Y1">
            <summary>
            Returns or sets Y component of P1 as integer
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWallEditor.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor by values
            </summary>
            <param name="FileSideDef1"></param>
            <param name="FileSideDef2"></param>
            <param name="Side1XOffset"></param>
            <param name="Side2XOffset"></param>
            <param name="Side1YOffset"></param>
            <param name="Side2YOffset"></param>
            <param name="Side1Sector"></param>
            <param name="Side2Sector"></param>
            <param name="X0"></param>
            <param name="Y0"></param>
            <param name="X1"></param>
            <param name="Y1"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWallEditor.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWallEditor.#ctor(System.Byte*@)">
            <summary>
            Constructor by native parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooWallEditor.ToRooWall(System.UInt32,Meridian59.Files.ROO.RooFile)">
            <summary>
            Creates a RooWall instance based on this RooWallEditor instance.
            </summary>
            <param name="RooVersion"></param>
            <param name="Room"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.ROO.RooThing">
            <summary>
            Basic RooThing with only X, Y position (old format)
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSector">
            <summary>
            A sector definition in a map file.
            </summary>
        </member>
        <member name="E:Meridian59.Files.ROO.RooSector.TextureChanged">
            <summary>
            Raised when texture changed on this sector floor or ceiling.
            </summary>
        </member>
        <member name="E:Meridian59.Files.ROO.RooSector.Moved">
            <summary>
            Raised when calling Tick() and the sector moved a bit.
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSector.walls">
            <summary>
            Adjacent walls
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSector.sides">
            <summary>
            Adjacent side-defs
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSector.leafs">
            <summary>
            Leafs of this sector
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSector.originalFlags">
            <summary>
            Original flags for this sector.
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSector.flags">
            <summary>
            Original flags for this sector.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.RooVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.HasSpeed">
            <summary>
            Version9 does not have the speed byte
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Num">
            <summary>
            The non-zero based number of the wall (generated when loading)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.ServerID">
            <summary>
            ID the server uses to reference this sector for changes
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.FloorTexture">
            <summary>
            grdXXXXX number of floor texture
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.OriginalFloorTexture">
            <summary>
            Original grdXXXXX number of floor texture (from ROO file)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.CeilingTexture">
            <summary>
            grdXXXXX number of ceiling texture
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.OriginalCeilingTexture">
            <summary>
            Original grdXXXXX number of ceiling texture (from ROO file)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureX">
            <summary>
            Texture offset X
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureY">
            <summary>
            Texture offset Y
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.FloorHeight">
            <summary>
            Floor height in server/new client FINENESS (1:64)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.CeilingHeight">
            <summary>
            Ceiling height in server/new client FINENESS (1:64)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Light1">
            <summary>
            Light value
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Flags">
            <summary>
            Additional flags
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Speed">
            <summary>
            Scrollspeed
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.SpeedFloor">
            <summary>
            Scrollspeed for floor texture expressed as V2 vector in Ogre style.
            Created from Speed and floor texture size.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.SpeedCeiling">
            <summary>
            Scrollspeed for ceiling texture expressed as V2 vector in Ogre style.
            Created from Speed and ceiling texture size.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.SlopeInfoFloor">
            <summary>
            Info about sloped floor (NULL for nonsloped)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.SlopeInfoCeiling">
            <summary>
            Info about sloped cleiling (NULL for nonsloped)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.ResourceFloor">
            <summary>
            Texture file for floor
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.ResourceCeiling">
            <summary>
            Texture file for ceiling
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.UserData">
            <summary>
            Some custom userdata.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MaterialNameFloor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MaterialNameCeiling">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureNameFloor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureNameCeiling">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureFloor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.TextureCeiling">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.IsAffectedByAmbientLight">
            <summary>
            Sectors with Light value from 128-255 are affected by ambient light.
            Others only by their own light.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.AmbientLightModifier">
            <summary>
            This is 0.0f for sector light values between 0 and 127, because
            they are not affected by AmbientLight.
            For 128 it is still 0, for 192 it is 1 and for 255 it's (almost) 2
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.OwnLight">
            <summary>
            This is 0.0f for sector light values between 128 and 255, because
            they are affected by AmbientLight.
            For 0 it is still 0, for 64 it is 0.5 and for 127 it's (almost) 1
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Walls">
            <summary>
            Adjacent walls. Will be filled when ResolveIndices() on RooWall is called.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Sides">
            <summary>
            Adjacent side-defs. Will be filled when ResolveIndices() on RooWall is called.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.Leafs">
            <summary>
            All leafs belonging to this sector
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.IsMoving">
            <summary>
            True if floor or ceiling are moving
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.IsMovingFloor">
            <summary>
            True if floor has active movement
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.IsMovingCeiling">
            <summary>
            True if ceiling has active movement
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MoveFloorHeight">
            <summary>
            Floor target height of move
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MoveCeilingHeight">
            <summary>
            Ceiling target height of move
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MoveFloorSpeed">
            <summary>
            Speed of a possible ongoing floor movement
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSector.MoveCeilingSpeed">
            <summary>
            Speed of a possible ongoing ceiling movement
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.#ctor(System.UInt32,System.Int16,System.UInt16,System.UInt16,System.Int16,System.Int16,System.Double,System.Double,System.Byte,System.Byte,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Create instance from values
            </summary>
            <param name="RooVersion"></param>
            <param name="ServerID"></param>
            <param name="FloorTexture"></param>
            <param name="CeilingTexture"></param>
            <param name="TextureX"></param>
            <param name="TextureY"></param>
            <param name="FloorHeight"></param>
            <param name="CeilingHeight"></param>
            <param name="Light1"></param>
            <param name="Light2"></param>
            <param name="Flags"></param>
            <param name="Unknown4"></param>
            <param name="HasSpeed"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.#ctor(System.UInt32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Create instance from parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <param name="HasSpeed"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.#ctor(System.UInt32,System.Byte*@,System.Boolean)">
            <summary>
            Create instance from parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="HasSpeed"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.ResolveResources(Meridian59.Files.ResourceManager,System.Boolean)">
            <summary>
            Gets references to used textures from a resource manager.
            </summary>
            <param name="M59ResourceManager"></param>
            <param name="RaiseChangedEvent"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.StartMove(Meridian59.Data.Models.SectorMove)">
            <summary>
            Starts a movement of the sector
            </summary>
            <param name="SectorMove"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.Tick(System.Double,System.Double)">
            <summary>
            Updates the movement
            </summary>
            <param name="Tick"></param>
            <param name="Span"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.CalculateFloorHeight(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the floorheight for a given point in legacy client FINENESS (1:1024),
            Note: There is no check if these coordinates are in the sector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="WithSectorDepth"></param>
            <returns>Height of the floor in legacy client FINENESS (1:1024)</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.CalculateCeilingHeight(System.Double,System.Double)">
            <summary>
            Returns the ceilingheight for a given point in legacy client FINENESS (1:1024),
            Note: There is no check if these coordinates are in the sector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Height of the ceiling in legacy client FINENESS (1:1024)</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.CalculateSlopeHeight(Meridian59.Files.ROO.RooSectorSlopeInfo,System.Double,System.Double)">
            <summary>
            Calculates the z coordinate of a point given by it's x,y components and 
            a plane equation in slopeinfo.
            </summary>
            <param name="SlopeInfo"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>Height of the point in legacy client FINENESS (1:1024)</returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.GetSectorScrollSpeed(System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Returns Ogre like U, V scrollspeed.
            </summary>
            <param name="IsFloor"></param>
            <param name="TextureWidth"></param>
            <param name="TextureHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.SetFloorTexture(System.UInt16,Meridian59.Files.BGF.BgfFile)">
            <summary>
            Sets the floor texture to another num
            </summary>
            <param name="TextureNum"></param>
            <param name="TextureFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.SetCeilingTexture(System.UInt16,Meridian59.Files.BGF.BgfFile)">
            <summary>
            Sets the ceiling texture to another num
            </summary>
            <param name="TextureNum"></param>
            <param name="TextureFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.ApplyChange(Meridian59.Data.Models.SectorChange)">
            <summary>
            Applies SectorChange information on this sector
            </summary>
            <param name="SectorChange"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSector.Reset">
            <summary>
            Reset all values to original values as stored in ROO
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSideDef">
            <summary>
            Represents a side of a wall.
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSideDef.wallsLeft">
            <summary>
            Walls using this side on the left
            </summary>
        </member>
        <member name="F:Meridian59.Files.ROO.RooSideDef.wallsRight">
            <summary>
            Walls using this side on the right
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDef.WallsLeft">
            <summary>
            All walls using this as left side
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDef.WallsRight">
            <summary>
            All walls using this as right side
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.SetLowerTexture(System.UInt16,Meridian59.Files.BGF.BgfFile)">
            <summary>
            Sets lower texture to another num
            </summary>
            <param name="TextureNum"></param>
            <param name="TextureFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.SetMiddleTexture(System.UInt16,Meridian59.Files.BGF.BgfFile,System.Boolean)">
            <summary>
            Sets middle texture to another num
            </summary>
            <param name="TextureNum"></param>
            <param name="TextureFile"></param>
            <param name="ResetAnimation"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.SetUpperTexture(System.UInt16,Meridian59.Files.BGF.BgfFile)">
            <summary>
            Sets lower texture to another num
            </summary>
            <param name="TextureNum"></param>
            <param name="TextureFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.ApplyChange(Meridian59.Data.Models.WallAnimationChange)">
            <summary>
            Applies wall animation changes on this sidedef
            </summary>
            <param name="WallAnimationChange"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.GetWallScrollSpeed(System.UInt32,System.UInt32)">
            <summary>
            Returns ogre U, V scrollspeed for given SideFlags and bgf
            </summary>
            <param name="TextureWidth"></param>
            <param name="TextureHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDef.Reset">
            <summary>
            Resets this side to original values from ROO file
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSideDefFlags">
            <summary>
            Wrapper for wallside flags
            </summary>
            <remarks>
            See original manual page 118
            </remarks>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSideDefFlags.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsBackwards">
            <summary>
            Draw bitmap right/left reversed
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsTransparent">
            <summary>
            Normal wall has some transparency
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsPassable">
            <summary>
            Wall can be walked through
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsMapNever">
            <summary>
            Don't show wall on map
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsMapAlways">
            <summary>
            Always show wall on map
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsNoLookThrough">
            <summary>
            Bitmap can't be seen through even though it's transparent
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsAboveBottomUp">
            <summary>
            Draw upper texture bottom-up
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsBelowTopDown">
            <summary>
            Draw lower texture top-down
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsNormalTopDown">
            <summary>
            Draw normal texture top-down
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsNoVTile">
            <summary>
            Don't tile texture vertically (must be transparent)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.IsHasAnimated">
            <summary>
            Has animated once and hence is dynamic geometry, required for new client
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.ScrollSpeed">
            <summary>
            Scrollspeed assigned on this wallside texture.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSideDefFlags.ScrollDirection">
            <summary>
            Direction to scroll
            </summary>
        </member>
        <member name="T:Meridian59.Files.ROO.RooSubSector">
            <summary>
            A SubSector is a tree leaf in BSP-Tree
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSubSector.Type">
            <summary>
            This is a a 'leaf' type node / subclass.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSubSector.SectorNum">
            <summary>
            The 1 based num of the sector this leaf is part of.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSubSector.Vertices">
            <summary>
            The polygon points describing this leaf.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ROO.RooSubSector.Sector">
            <summary>
            Reference to the Sector this leaf is part of.
            Will be resolved from SectorNum within ResolveIndices().
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.#ctor(System.UInt32,System.UInt16,Meridian59.Common.Polygon)">
            <summary>
            Constructor by values
            </summary>
            <param name="RooVersion"></param>
            <param name="SectorNum"></param>
            <param name="Vertices"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by managed parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.#ctor(System.UInt32,System.Byte*@)">
            <summary>
            Constructor by native parser
            </summary>
            <param name="RooVersion"></param>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.ResolveIndices(Meridian59.Files.ROO.RooFile)">
            <summary>
            Resolve all index references to object references
            </summary>
            <param name="RooFile"></param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.UpdateVertexPositions(System.Boolean)">
            <summary>
            Updates the FloorP or FloorUV properties.
            Note: Z component is the height here.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.UpdateVertexUV(System.Boolean)">
            <summary>
            Updates the FloorUV or CeilingUV properties.
            Must have called UpdateVertexPositions() before.
            </summary>
            <param name="IsFloor">Whether to create for floor or ceiling</param>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.UpdateNormals">
            <summary>
            Updates FloorNormal and CeilingNormal properties.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ROO.RooSubSector.IsBlockingLine(System.Boolean,Meridian59.Common.V3@,Meridian59.Common.V3@,Meridian59.Common.V3@)">
            <summary>
            Tests if the 3D line from S to E intersects this leaf.
            </summary>
            <param name="IsFloor">Check Floor or Ceiling</param>
            <param name="S">Start</param>
            <param name="E">End</param>
            <param name="I">Intersection point</param>
            <returns>True or False</returns>
        </member>
        <member name="T:Meridian59.Files.BGF.BgfBitmap">
            <summary>
            A single frame/image within a BGF file
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Num">
            <summary>
            Num of this frame, 1 based
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Version">
            <summary>
            The BGF file version of this BgfBitmap.
            Can trigger an uncompress/recompress when being set with different values.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Width">
            <summary>
            Width of the image in pixels
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Height">
            <summary>
            Height of the image in pixels
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.XOffset">
            <summary>
            XOffset to apply
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.YOffset">
            <summary>
            YOffset to apply
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.HotSpots">
            <summary>
            List of hotspots this frame has
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.CompressedLength">
            <summary>
            Compressed size (if compression enabled)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.UncompressedLength">
            <summary>
            Uncompressed size (which is simply Width * Height)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Pow2Width">
            <summary>
            The next greater power of 2 of Width.
            Updated when Width property is set.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Pow2Height">
            <summary>
            The next greater power of 2 of Height.
            Updated when Height property is set.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.Multiple4Width">
            <summary>
            The next greater multiple 4 of width.
            Updated when Width property is set.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.IsCompressed">
            <summary>
            Whether or not the PixelData is compressed (change it to compress/decompress)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmap.PixelData">
            <summary>
            This keeps the PixelData of this BgfBitmap instance as it is saved in BGF files.
            Either compressed or uncompressed, WITHOUT stride-bytes and up-side-down.
            Each byte represents a pixel and the value is the index of the pixel's color in the palette.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Meridian59.Files.BGF.BgfBitmapHotspot},System.Boolean,System.Int32,System.Byte[])">
            <summary>
            Constructor by values
            </summary>
            <param name="Num"></param>
            <param name="Version"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="XOffset"></param>
            <param name="YOffset"></param>
            <param name="HotSpots"></param>
            <param name="IsCompressed"></param>
            <param name="CompressedLength"></param>
            <param name="PixelData"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.#ctor(System.UInt32,System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Num"></param>
            <param name="Version"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.Compress(System.Byte[])">
            <summary>
            Returns a compressed byte[] of PixelData argument
            </summary>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.Decompress(System.Byte[])">
            <summary>
            Returns a decompressed byte[] of PixelData argument
            </summary>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.DecompressOld(System.Byte[])">
            <summary>
            Old Decompress method not using .NET compressor
            </summary>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FindHotspot(System.Byte)">
            <summary>
            Returns the Hotspot matching given Index.
            This is an absolute compare: -1 equals 1
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.PixelDataToBitmapBytes">
            <summary>
            Creates the full byte[] of a BMP file representing this BgfBitmap.
            Including BMP, DIB header and M59 default colorpalette.
            Warning: This is only useful when writing to BMP files.
            </summary>
            <returns>byte[] of a BMP file</returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FillPixelDataTo(System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Writes the default 8-Bit PixelData (indices) to a target byte[],
            adding stride zeros and can flip the rows.
            </summary>
            <param name="Target">Array to write to</param>
            <param name="StartIndex">Index to start writing in Target argument</param>
            <param name="FlipRows">Whether to make first pixelrow the last</param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FillPixelDataTo(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Writes the default 8-Bit PixelData (indices) to a target pointer.
            Adds stride zeros and can flip rows.
            </summary>
            <param name="Target">A memory pointer to start writing to.</param>
            <param name="FlipRows">Whether to make the first pixelrow the last.</param>
            <param name="UseMultiple4Width">Whether the target holds additional bytes to make rows multiple of 4</param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.GetPixelDataAsA1R5G5B5(System.Byte,System.Boolean)">
            <summary>
            Returns the pixels of this BgfBitmap with stride
            as A1R5G5B5 values.
            Requires initialized ColorTransformation.Provider.
            </summary>
            <param name="Palette">color palette index to use</param>
            <param name="Multiple4Stride"></param>
            <returns>16-Bit Pixels</returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.GetPixelDataAsA8R8G8B8(System.Byte,System.Boolean)">
            <summary>
            Returns the pixels of this BgfBitmap with stride
            as A8R8G8B8 values.
            Requires initialized ColorTransformation.Provider.
            </summary>
            <param name="Palette">Color Palette to use</param>
            <param name="Multiple4Stride">Whether to add empty pixels for multiple of 4</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FillPixelDataAsA8R8G8B8(System.UInt32*,System.Byte,System.UInt32)">
            <summary>
            Writes the pixels of this BgfBitmap as A8R8G8B8 values to a raw pointer.
            Requires initialized ColorTransformation palettes.
            </summary>
            <param name="Buffer">A buffer with 32bit pixel-values</param>
            <param name="Palette">Palette index to use</param>
            <param name="RowWidth">
            How many pixels a row in the targetbuffer has.
            Must be bigger or equal the BgfBitmap Width
            </param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FillPixelDataAsA8R8G8B8TransparencyBlack(System.UInt32*,System.UInt32)">
            <summary>
            Copy'n'Paste of FillPixelDataAsA8R8G8B8, but always using
            a modified DefaultPalette with black transparency color.
            Used in the OgreClient to avoid issues with alpha_to_coverage
            </summary>
            <param name="Buffer">A buffer with 32bit pixel-values</param>
            <param name="RowWidth">
            How many pixels a row in the targetbuffer has.
            Must be bigger or equal the BgfBitmap Width
            </param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.FillPixelDataAsA8R8G8B8TransparencyBlack(System.UInt32*,System.UInt32,System.Byte)">
            <summary>
            Like FillPixelDataAsA8R8G8B8TransparencyBlack(), but slower allowing to use any palette.
            </summary>
            <param name="Buffer">A buffer with 32bit pixel-values</param>
            <param name="RowWidth">
            How many pixels a row in the targetbuffer has.
            Must be bigger or equal the BgfBitmap Width
            </param>
            <param name="Palette"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.ConvertFromVale">
            <summary>
            Converts pixeldata from legacy color table of Vale of Sorrow into new table.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.Cut(System.Boolean)">
            <summary>
            Removes transparent pixel rows and columns from
            the image without changing its rendered appearance.
            </summary>
        </member>
        <member name="F:Meridian59.Files.BGF.BgfBitmap.BLANK">
            <summary>
            Blank, transparent dummy (1 pixel, 1x1)
            0xFE = transparent color index
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.BitmapToPixelData(System.Drawing.Bitmap)">
            <summary>
            Creates a PixelData byte[] without stride from a 256 indexedcolor Bitmap instance
            </summary>
            <returns>PixelData byte[] like it's stored in binary BGF</returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.GetBitmap(System.Byte)">
            <summary>
            Creates a 256 color Bitmap from BgfBitmap.
            Requires initialized ColorTransformation.Provider.
            </summary>
            <param name="Palette">Palette index for ColorTransformation.Provider</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.GetBitmapA8R8G8B8(System.Byte,System.Boolean)">
            <summary>
            Creates a 32-Bit color GDI+ Bitmap from BgfBitmap pixels (with transparency).
            Uses FillPixelDataAsA8R8G8B8() to fill pixels.
            </summary>
            <param name="Palette"></param>
            <param name="BlackTransparency">True for black instead of cyan RGB in transparency</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets this BgfBitmap to a given 256 color Bitmap
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.LightColorToCLRRGB(System.UInt16)">
            <summary>
            Converts a server ushort LightColor to a CLR RGB color
            </summary>
            <param name="LightColor">16-Bit lightcolor value (i.e. in class objectbase)</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmap.LightIntensityToCLRRGB(System.Byte)">
            <summary>
            Converts a GrayScale value (0-255) to a CLR RGB color
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.BGF.BgfBitmapHotspot">
            <summary>
            A hotspot (point) used as anchor to attach images on others
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmapHotspot.Index">
            <summary>
            Hotspot index (can be negative for underlay)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmapHotspot.X">
            <summary>
            X coordinate of the hotspot
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfBitmapHotspot.Y">
            <summary>
            Y coordinate of the hotspot
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmapHotspot.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmapHotspot.#ctor(System.SByte,System.Int32,System.Int32)">
            <summary>
            Constructor by values
            </summary>
            <param name="Index"></param>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmapHotspot.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmapHotspot.#ctor(System.Byte*@)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Buffer"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfBitmapHotspot.ToString">
            <summary>
            Overridden. Returns Index as string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Files.BGF.BgfFile">
            <summary>
            Access M59 .bgf files (BMP container with metainfo)
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.Load(System.String)">
            <summary>
            Load a file from disk
            </summary>
            <param name="Filename">Full path and filename of file to load</param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.Save(System.String)">
            <summary>
            Save the file to disk
            </summary>
            <param name="Filename">Full path and filename of file to write</param>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.Filename">
            <summary>
            Filename without path or extension
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.Name">
            <summary>
            A name which is stored inside the BGF.
            Max. 32 characters. All grdXXXXX.bgf have it set.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.Version">
            <summary>
            Version of this BGF file. (V9=CRUSH, V10=ZLIB)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.MaxIndices">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.ShrinkFactor">
            <summary>
            An integer scale-factor for included frames.
            The higher the resolution of the images, the higher the shrink usually.
            Dividing the imagesizes by this ShrinkFactor give the size of the texture in the world.
            Must be greater than zero.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.Frames">
            <summary>
            The list with included images (BgfBitmap)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFile.FrameSets">
            <summary>
            The list with included framesets/groups
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.#ctor(System.String)">
            <summary>
            Constructor from file
            </summary>
            <param name="Filename"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.IsFrameIndexLinkedInFrameSet(System.Int32)">
            <summary>
            Checks if a Frame (given by Index) is referenced in any FrameSet.
            </summary>
            <param name="Index">Index of frame to check</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.UpdateFrameIndexInFrameSets(System.Int32,System.Int32)">
            <summary>
            Updates all references of Frame given by OldIndex 
            to NewIndex in all FrameSets. Useful if you move
            a frame's position in the list and it has existing 
            references in FrameSets.
            </summary>
            <param name="OldIndex">The old index of the Frame</param>
            <param name="NewIndex">The new index of the Frame</param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.DecompressAllSingle">
            <summary>
            Iterates all BgfBitmaps and decompresses them if still compressed.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.DecompressAllParallel">
            <summary>
            Decompresses all still compressed frames in parallel.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.DecompressAll">
            <summary>
            Decompresses all still compressed frames either 
            parallel or single.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.CompressAll">
            <summary>
            Iterates all BgfBitmaps and compresses them if decompressed.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.GetFrame(System.Int32,System.UInt16)">
            <summary>
            Returns the BgfBitmap frame for given Group and Angle.
            </summary>
            <param name="Group"></param>
            <param name="Angle"></param>
            <returns>BgfBitmap or null</returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.GetFrameIndex(System.Int32,System.UInt16)">
            <summary>
            Resolves the index of a BgfBitmap frame for given Group and Angle
            from the FrameSets.
            </summary>
            <param name="Group"></param>
            <param name="Angle"></param>
            <returns>Index, -1 if not found</returns>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.AddFrameSet">
            <summary>
            Adds a new frameset/group with increased num at the end
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.ConvertFromVale">
            <summary>
            Converts all frames from vale colortable to new color table.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.Cut">
            <summary>
            Calls Cut() on all existing BgfBitmap instances
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.CutParallel">
            <summary>
            Calls Cut() on all existing BgfBitmap instances
            using Parallel looping.
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.LoadXml(System.String)">
            <summary>
            Loads this BgfFile instance from XML/BMP
            </summary>
            <param name="Filename"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFile.WriteXml(System.String)">
            <summary>
            Exports this BgfFile instance to XML/BMP
            </summary>
            <param name="Filename"></param>
        </member>
        <member name="T:Meridian59.Files.BGF.BgfFrameSet">
            <summary>
            A FrameSet(=Group) links frames together which represent the same object,
            at the same moment of time and motion, but from different angles.
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFrameSet.Num">
            <summary>
            The num of this group/frameset (1 based)
            </summary>
        </member>
        <member name="P:Meridian59.Files.BGF.BgfFrameSet.FrameIndices">
            <summary>
            List with frames that form this Group
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFrameSet.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFrameSet.#ctor(System.UInt32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructor by value
            </summary>
            <param name="Num"></param>
            <param name="FrameIndices"></param>
        </member>
        <member name="M:Meridian59.Files.BGF.BgfFrameSet.#ctor(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="Num"></param>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="T:Meridian59.Files.BsfFile">
            <summary>
            Access M59 .bsf files (PNG container)
            </summary>
        </member>
        <member name="F:Meridian59.Files.BsfFile.PngStartSignature">
            <summary>
            Default PNG start signature
            </summary>
        </member>
        <member name="F:Meridian59.Files.BsfFile.PngEndSignature">
            <summary>
            Default PNG end signature
            </summary>
        </member>
        <member name="T:Meridian59.Files.RSB.RsbResourceID">
            <summary>
            Extends ResourceID to be used in RsbFile
            </summary>
        </member>
        <member name="T:Meridian59.Files.RSB.RsbFile">
            <summary>
            Use to access M59 rsb files (string lists)
            </summary>
        </member>
        <member name="M:Meridian59.Files.RSB.RsbFile.Load(System.String)">
            <summary>
            Load string resources from file
            </summary>
            <param name="Filename">Full path and filename of string resource file</param>
        </member>
        <member name="M:Meridian59.Files.RSB.RsbFile.Save(System.String)">
            <summary>
            Save string resources to .rsb file
            </summary>
            <param name="Filename">Full path and filename of string resource file</param>
        </member>
        <member name="P:Meridian59.Files.RSB.RsbFile.Version">
            <summary>
            Fileformat version
            </summary>
        </member>
        <member name="P:Meridian59.Files.RSB.RsbFile.Filename">
            <summary>
            Filename without path or extension
            </summary>
        </member>
        <member name="P:Meridian59.Files.RSB.RsbFile.StringResources">
            <summary>
            A key/value pair dictionary with resource/string IDs.
            </summary>
        </member>
        <member name="M:Meridian59.Files.RSB.RsbFile.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.RSB.RsbFile.#ctor(System.Collections.Generic.IEnumerable{Meridian59.Files.RSB.RsbResourceID})">
            <summary>
            Constructor by values
            </summary>
            <param name="StringResources"></param>
        </member>
        <member name="M:Meridian59.Files.RSB.RsbFile.#ctor(System.String)">
            <summary>
            Constructor by file
            </summary>
            <param name="Filename"></param>
        </member>
        <member name="T:Meridian59.Files.ResourceManager">
            <summary>
            Handles access to legacy M59 resources (ROO, BGF, ...)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.StringResources">
            <summary>
            Provides the currently active string resources
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.RsbHash">
            <summary>
            Hash of the currently active string resources file
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.StringDictionaries">
            <summary>
            All string dictionaries (.rsb) files found
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Objects">
            <summary>
            The dictionary containing all bgf filenames related to objects (no grdXXXX.bgf)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.RoomTextures">
            <summary>
            The dictionary containing all bgf filenames related to roomtextures (grdXXXX.bgf)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Rooms">
            <summary>
            The dictionary containing the room resources (filenames)
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Wavs">
            <summary>
            WAV soundfiles
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Music">
            <summary>
            Music
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Mails">
            <summary>
            The mail objects.
            Adding or removing entries here will save/delete them also
            from the disk once InitConfig was called.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.Initialized">
            <summary>
            True if InitConfig was executed.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.StringsFolder">
            <summary>
            Folder containing all .rsb files for different servers.
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.RoomsFolder">
            <summary>
            Folder containing all .roo files
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.ObjectsFolder">
            <summary>
            Folder containing all object BGFs
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.RoomTexturesFolder">
            <summary>
            Folder containing all roomtexture BGFs
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.WavFolder">
            <summary>
            Folder containing all WAV soundfiles
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.MusicFolder">
            <summary>
            Folder containing music
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.MailFolder">
            <summary>
            Folder containing mails
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.NumLoadedObjects">
            <summary>
            Amount of loaded BGF objects
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.NumLoadedRoomTextures">
            <summary>
            Amount of loaded BGF room textures
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.NumLoadedRooms">
            <summary>
            Amount of loaded ROO files
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.NumLoadedWavs">
            <summary>
            Amount of loaded Wav/Sound files
            </summary>
        </member>
        <member name="P:Meridian59.Files.ResourceManager.NumLoadedMusic">
            <summary>
            Amount of loaded Mp3/Music files
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetStringDictionary(System.String)">
            <summary>
            Tries to retrieve a RSB file from the Strings dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File">Plain filename with extension (e.g. rsc0000.rsb)</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetObject(System.String)">
            <summary>
            Tries to retrieve a BGF file from the Objects dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File">Plain filename with extension (e.g. mushroom.bgf)</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetRoom(System.String)">
            <summary>
            Tries to retrieve a ROO file from the Rooms dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetRoomTexture(System.String)">
            <summary>
            Tries to retrieve a BGF file from the RoomTextures dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetRoomTexture(System.UInt16)">
            <summary>
            Tries to retrieve a BGF file from the RoomTextures dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="GrdNumber">The XXXXX number in grdXXXXX</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetWavFile(System.String)">
            <summary>
            Tries to retrieve a WAV file from the Wavs dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.GetMusicFile(System.String)">
            <summary>
            Tries to retrieve a MP3 file from the Music dictionary.
            Will load the file from disk, if not yet loaded.
            </summary>
            <param name="File"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.ConvertGrdNumberToFileName(System.UInt16,System.String)">
            <summary>
            Gets a BGF filename for a grd-number
            </summary>
            <param name="GridNumber">The gridnumber to get texture files for.</param>
            <param name="Extension">Append this file extension to result.</param>
            <returns>Filename like grd00032.bgf</returns>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.Init(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets pathes to required resources.
            Will also remove any existing resources from the current lists.
            </summary>
            <param name="PathStrings"></param>
            <param name="PathRooms"></param>
            <param name="PathObjects"></param>
            <param name="PathRoomTextures"></param>
            <param name="PathSounds"></param>
            <param name="PathMusic"></param>
            <param name="PathMails"></param>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.SelectStringDictionary(System.String,Meridian59.Common.Enums.LanguageCode)">
            <summary>
            Clears and reloads the strings from another dictionary file within the strings folder,
            which was previously initialized during Init()
            </summary>
            <param name="RsbFile">Plain filename, like rsc0000.rsb</param>
            <param name="Language"></param>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.Preload(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts preloading resources in several threads.
            </summary>
            <param name="Objects"></param>
            <param name="RoomTextures"></param>
            <param name="Rooms"></param>
            <param name="Sounds"></param>
            <param name="Music"></param>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.LoadThreadObjects">
            <summary>
            Stars loading all objects in a background thread.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.LoadThreadRoomTextures">
            <summary>
            Stars loading all roomtextures in a background thread.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.LoadThreadRooms">
            <summary>
            Stars loading all rooms in a background thread.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.LoadThreadSounds">
            <summary>
            Stars loading all sounds in a background thread.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.LoadThreadMusic">
            <summary>
            Stars loading all music in a background thread.
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Files.ResourceManager.OnMailsListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Executed when MailList changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Drawing2D.ColorTransformation">
            <summary>
            Provides Meridian59 color palettes
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ColorTransformation.NUMGUILDCOLORS">
            <summary>
            See GuildShieldInit() in merintr/guildshi.c
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ColorTransformation.RAMPS">
            <summary>
            These are the real color ramp indices (red, blue, ...) from the palette.
            Does not include rows with special purposes/colors.
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ColorTransformation.NEVERMAP_LIST">
            <summary>
            Palette indexes which are not found, computed or changed, ever.
            These are the magic four Windows colors, plus any colors reserved for
            special effects like luminant colors.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ColorTransformation.Palettes">
            <summary>
            All available, transformed colorpalettes
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ColorTransformation.LightPalettes">
            <summary>
            All brightened or darkened palette transformations
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ColorTransformation.DefaultPalette">
            <summary>
            The default palette
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ColorTransformation.DefaultPaletteBlackTransparency">
            <summary>
            A clone of DefaultPalette but with color 254 set to
            black instead of cyan.
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ColorTransformation.DefaultPaletteVale">
            <summary>
            The default palette used in Vale of Sorrow and before.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.RampXLat(System.UInt32[],System.Byte,System.UInt32[],System.Byte)">
            <summary>
            Writes all the colors (16) from one row to another
            </summary>
            <param name="FromPalette">Palette to read from.</param>
            <param name="FromRamp">Index of Row to read colors from.</param>
            <param name="ToPalette">Palette to write to.</param>
            <param name="ToRamp">Index of Row to write colors to.</param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.RampXLat(System.UInt32[],System.Byte[],System.UInt32[],System.Byte)">
            <summary>
            Writes all colors from the given table indices to target row.
            </summary>
            <param name="FromPalette">Palette to read from.</param>
            <param name="FromIndices">Indices to read from (array must have length of 16)</param>
            <param name="ToPalette">Palette to write to.</param>
            <param name="ToRamp">Index of Row to write colors to.</param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.HalfRampXLat(System.UInt32[],System.Byte,System.UInt32[],System.Byte,System.Byte)">
            <summary>
            Copies half a row starting at offset to a full destination row,
            uses a color twice.
            </summary>
            <param name="FromPalette"></param>
            <param name="FromRamp"></param>
            <param name="ToPalette"></param>
            <param name="ToRamp"></param>
            <param name="FromOffset"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.FilterXLat(System.UInt32[],System.UInt32,System.UInt32[])">
            <summary>
            
            </summary>
            <param name="FromPalette"></param>
            <param name="FilterColor"></param>
            <param name="ToPalette"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.LightXLat(System.UInt32[],System.Byte,System.Byte)">
            <summary>
            Brighten up or darken transformations based on light palettes
            </summary>
            <param name="Palette"></param>
            <param name="FromRamp"></param>
            <param name="Light"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.BlendXLat(System.UInt32[],System.UInt32[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Blends the palettes colors with given Color using the given Weights for blendcolor/original one.
            </summary>
            <param name="FromPalette"></param>
            <param name="ToPalette"></param>
            <param name="BlendColor"></param>
            <param name="WeightOriginal"></param>
            <param name="WeightBlend"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.ReplaceXLat(System.UInt32[],System.UInt32)">
            <summary>
            This simply replaces any entry in the palette with the given color.
            EXCEPT the transparent index.
            </summary>
            <param name="Palette"></param>
            <param name="Color"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.RampOffsetXLat(System.UInt32[],System.UInt32[],System.Int32)">
            <summary>
            Scrolls the palette rows noted in "ramps" (so not all!) up or down by RowOffset (pos/neg).
            </summary>
            <param name="FromPalette"></param>
            <param name="ToPalette"></param>
            <param name="RowOffset"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.ClonePalette(System.UInt32[])">
            <summary>
            Returns a cloned instance of ColorPalette
            </summary>
            <param name="Palette"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.GetClosestPaletteIndex(System.UInt32[],System.UInt32)">
            <summary>
            Returns the index in Palette of the color closest to InputColor.
            </summary>
            <param name="Palette">256 ARGB colors</param>
            <param name="InputColor">ARGB color</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.BlockIndices">
            <summary>
            Populates the NEVERMAP array.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.GetDefaultPalette(System.Boolean)">
            <summary>
            Returns the default colorpalette from embedded byte[] colortable
            </summary>
            <param name="UseVale">If true will use the super old colortable of vale of sorrow.</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.CreateLightPalettes">
            <summary>
            Precompute palettes for varying light levels based on defaultpalette.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.CreatePalettes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.GetGuildShieldColor(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="Color1"></param>
            <param name="Color2"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ColorTransformation.GetNameOfPalette(System.Byte)">
            <summary>
            Returns the name of the palette given by Index
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposer`2">
            <summary>
            Abstract class for composing images of objects
            </summary>
            <typeparam name="T">Class of Data (ObjectBase or above)</typeparam>
            <typeparam name="U">Type of composed image</typeparam>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.DefaultQuality">
            <summary>
            The texture quality
            </summary>
        </member>
        <member name="E:Meridian59.Drawing2D.ImageComposer`2.NewImageAvailable">
            <summary>
            Raised when new image was composed or retrieved from cache
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ImageComposer`2.DataSource">
            <summary>
            The Data used to create.
            Can trigger Refresh() when set.
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ImageComposer`2.Image">
            <summary>
            The composed image/texture/...
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.SetDataSource(Meridian59.Data.Models.ObjectBase)">
            <summary>
            
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Refresh">
            <summary>
            Create or retrieve an image of the DataSource,
            saves in Image property.
            May raise NewImageAvailable event.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.UpdateRenderInfo(Meridian59.Data.Models.ObjectBase)">
            <summary>
            Updates the renderinfo property from object data
            </summary>
            <param name="Data"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.DrawSubOverlays(System.Boolean)">
            <summary>
            Calls DrawSubOverlay for each suboverlay to process
            </summary>
            <param name="IsUnderlays"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.PrepareDraw">
            <summary>
            Override with draw preparations
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.DrawBackground">
            <summary>
            Override with background drawing
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.DrawMainOverlay">
            <summary>
            Override with code drawing mainoverlay
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.DrawSubOverlay(Meridian59.Data.Models.SubOverlay.RenderInfo)">
            <summary>
            Override with code drawing suboverlays
            </summary>
            <param name="RenderInfo"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.DrawPostEffects">
            <summary>
            Override with code drawing post effects
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.FinishDraw">
            <summary>
            Override with code to finish draw
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.GetAppearanceHash(System.UInt32)">
            <summary>
            Creates a appearance hash
            </summary>
            <param name="Seed"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.OnAppearanceChanged(System.Object,System.EventArgs)">
            <summary>
            Executed when appearance changed on T
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Executed when property changed on T
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.RaiseNewImageAvailable">
            <summary>
            Triggers NewImageAvailable event
            </summary>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposer`2.Cache">
            <summary>
            Cache providing entries
            </summary>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposer`2.Cache.Item">
            <summary>
            The type of the cache entries
            </summary>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposer`2.Cache.ItemEventArgs">
            <summary>
            EventArgs carrying an array of cache items
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.MAXSIMULREMOVE">
            <summary>
            Amount of items suggested for remove at once.
            </summary>
        </member>
        <member name="E:Meridian59.Drawing2D.ImageComposer`2.Cache.RemoveSuggested">
            <summary>
            Raised by 'Prune()' for entries without active references.
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.cache">
            <summary>
            Cache used in lookup
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.candidates">
            <summary>
            List of candidates to removed in Prune()
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.tickPrune">
            <summary>
            Last tick Prune() tried to remove items
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.exceeded">
            <summary>
            Keep track of once exceeded state to reduce further
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.IsEnabled">
            <summary>
            Whether to cache created images
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.CacheSize">
            <summary>
            Size of the cache in bytes (for 32-bit pixeldata)
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposer`2.Cache.CacheSizeMax">
            <summary>
            Maximum size of the cache in bytes (default: 32 MB)
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.ImageComposer`2.Cache.Count">
            <summary>
            Count of currently stored items
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.TryGetValue(System.UInt32,Meridian59.Drawing2D.ImageComposer{`0,`1}.Cache.Item@)">
            <summary>
            Tries to lookup an item from the cache
            </summary>
            <param name="Key"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.Add(System.UInt32,Meridian59.Drawing2D.ImageComposer{`0,`1}.Cache.Item)">
            <summary>
            Adds an item to the cache
            </summary>
            <param name="Key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.Remove(Meridian59.Drawing2D.ImageComposer{`0,`1}.Cache.Item)">
            <summary>
            Tries to remove a cache item
            </summary>
            <param name="Item"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.Clear">
            <summary>
            Clears all entries from the cache
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.Prune">
            <summary>
            Raises a 'RemoveSuggested' event for all cache entries without active references.
            Automatically called if the maximum cache size is exceeded.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposer`2.Cache.PrintCacheStats">
            <summary>
            Prints cache stats to console
            </summary>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposerNative`1">
            <summary>
            Implements ImageComposer with .NET GDI (Bitmap class)
            and draws images using own methods.
            </summary>
            <typeparam name="T">Classtype, ObjectBase or higher</typeparam>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposerGDI`1">
            <summary>
            Implements ImageComposer with .NET GDI (Bitmap class) and
            draws using GDI (Graphics class).
            </summary>
            <typeparam name="T">Classtype, ObjectBase or higher</typeparam>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposerGDI`1.DrawPostEffectTarget(System.Drawing.Bitmap)">
            <summary>
            Adds a red border next to non transparent pixels
            </summary>
            <param name="Bitmap"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposerGDI`1.DrawPostEffectDitherInvis(System.Drawing.Bitmap)">
            <summary>
            Makes any second non transparent pixel transparent
            in a checkd pattern look.
            </summary>
            <param name="Bitmap"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposerGDI`1.DrawPostEffectBlack(System.Drawing.Bitmap)">
            <summary>
            Makes any non transparent pixel black
            </summary>
            <param name="Bitmap"></param>
        </member>
        <member name="T:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap">
            <summary>
            Provides bitmaps with object names drawn into
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.FONT">
            <summary>
            The font used to draw object names
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.DUMMY">
            <summary>
            Dummy to get a Graphics instance to text measuring
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.MEASURE">
            <summary>
            Graphics instance for text size measuring
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.STRINGFORMAT">
            <summary>
            String alignment
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.ImageComposerGDI`1.NameBitmap.Get(Meridian59.Data.Models.ObjectBase)">
            <summary>
            Returns a A8R8G8B8 (pow2 sized) bitmap with the name of the object drawn in it.
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Drawing2D.MiniMap`1">
            <summary>
            Implements an abstract M59 minimap.
            </summary>
            <typeparam name="T">The type of the composed image.</typeparam>
        </member>
        <member name="E:Meridian59.Drawing2D.MiniMap`1.ImageChanged">
            <summary>
            Fired when there is an update image to show
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.DataController">
            <summary>
            Reference to the datalayer to get information from
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.Image">
            <summary>
            The current MiniMap image to display
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.Width">
            <summary>
            The width of the mapimage
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.Height">
            <summary>
            The width of the mapimage
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.Zoom">
            <summary>
            Zoomfactor, adjust for zoom in/out
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.MiniMap`1.ZoomInv">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.#ctor(Meridian59.Data.DataController,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="DataController"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="Zoom"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.Tick(System.Double,System.Double)">
            <summary>
            Call regularly from mainthread, will possibly update mapimage and trigger event
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.SetDimension(System.Int32,System.Int32)">
            <summary>
            Adjust the map dimension
            </summary>
            <param name="Width"></param>
            <param name="Height"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.PrepareDraw">
            <summary>
            Draw preparation
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.FinishDraw">
            <summary>
            Finish drawing
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.DrawWall(Meridian59.Files.ROO.RooWall,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a wall
            </summary>
            <param name="Wall"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.DrawObject(Meridian59.Data.Models.RoomObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw an object
            </summary>
            <param name="RoomObject"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.DrawObjectOutter(Meridian59.Data.Models.RoomObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw an object outter circle.
            Will be invoked before each DrawObject() with sligthly bigger rectangle.
            </summary>
            <param name="RoomObject"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.DrawAvatar(Meridian59.Data.Models.RoomObject,Meridian59.Common.V2,Meridian59.Common.V2,Meridian59.Common.V2)">
            <summary>
            
            </summary>
            <param name="RoomObject"></param>
            <param name="P1">Triangle point 1</param>
            <param name="P2">Triangle point 2</param>
            <param name="P3">Triangle point 3</param>
        </member>
        <member name="M:Meridian59.Drawing2D.MiniMap`1.RaiseImageChanged">
            <summary>
            Triggers ImageChanged event
            </summary>
        </member>
        <member name="T:Meridian59.Drawing2D.NameColors">
            <summary>
            Handles colors based on object flags.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.NameColors.GetColorFor(Meridian59.Data.Models.ObjectFlags)">
            <summary>
            Returns a 32bit color based on ObjectFlags.
            </summary>
            <param name="Flags"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.NameColors.GetColorComponentsFor(Meridian59.Data.Models.ObjectFlags,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            
            </summary>
            <param name="Flags"></param>
            <param name="A"></param>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
        </member>
        <member name="T:Meridian59.Drawing2D.PalettesGDI">
            <summary>
            Provides GDI+ palettes for Meridian
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.PalettesGDI.Palettes">
            <summary>
            The GDI+ colortable variants of core library palettes
            </summary>
        </member>
        <member name="F:Meridian59.Drawing2D.PalettesGDI.PaletteVale">
            <summary>
            The GDI+ colortable variant of the core library vale of sorrow palette
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.PalettesGDI.#cctor">
            <summary>
            Create GDI+ palettes from core library palettes.
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.PalettesGDI.GetColorPalette(System.UInt32[])">
            <summary>
            Creates a ColorTable object from raw uint[]
            </summary>
            <param name="Palette"></param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Drawing2D.PalettesGDI.GetPaletteBitmap(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Creates a bitmap of a palette with size 16x16. Each pixel has the
            color of the corresponding palette index.
            </summary>
            <param name="Palette"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Drawing2D.RenderInfo">
            <summary>
            Info for rendering this object to an image
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Dimension">
            <summary>
            Overall size of composed image
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.WorldSize">
            <summary>
            Size of the whole object in client world-scale
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.UVStart">
            <summary>
            UV coordinates of start
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.UVEnd">
            <summary>
            UV coordinates of end
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Quality">
            <summary>
            Quality of the image. Using different quality values does not necessarily
            affect image quality. More likely this specifies an upper maximum of quality.
            By default this is 1.0f which refers to a maximum of 1024x1024 imagesize.
            Set this to 0.5f for maximum of 512x512, to 0.25f for 256x256 and 2.0f for 2048x2048.
            Many composed objects however can be rendered with much less size without downscaling parts
            and therefore will be created at these lower sizes, no matter how you set this.
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Scaling">
            <summary>
            Scale between Dimension property and world size of this object 
            World size is at shrink = 1
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.MaxShrink">
            <summary>
            Maximum appearing Shrink value
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Origin">
            <summary>
            The origin of main image at current scale
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Size">
            <summary>
            The size of main image at current scale
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.Bgf">
            <summary>
            The main image
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.BgfColor">
            <summary>
            The color translation for main image,
            may differ from colortranslation of mainoverlay 
            if RootHotspotIndex is set.
            </summary>
        </member>
        <member name="P:Meridian59.Drawing2D.RenderInfo.SubBgf">
            <summary>
            Suboverlays
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.#ctor(Meridian59.Data.Models.ObjectBase,System.Boolean,System.Byte,System.Double,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Data"></param>
            <param name="ApplyYOffset"></param>
            <param name="RootHotspotIndex"></param>
            <param name="Quality"></param>
            <param name="ScalePow2"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="CenterVertical"></param>
            <param name="CenterHorizontal"></param>
            <param name="IsCustomShrink"></param>
            <param name="CustomShrink"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.#ctor(Meridian59.Data.Models.RoomObject,System.Boolean,System.Boolean,System.Byte,System.Double,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Data"></param>
            <param name="UseViewerFrame"></param>
            <param name="ApplyYOffset"></param>
            <param name="RootHotspotIndex"></param>
            <param name="Quality"></param>
            <param name="ScalePow2"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="CenterVertical"></param>
            <param name="CenterHorizontal"></param>
            <param name="IsCustomShrink"></param>
            <param name="CustomShrink"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.Refresh(Meridian59.Data.Models.ObjectBase,System.Boolean,System.Byte,System.Double,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Creates RenderInfo for an ObjectBase
            </summary>
            <param name="Data"></param>
            <param name="ApplyYOffset"></param>
            <param name="RootHotspotIndex"></param>
            <param name="Quality"></param>
            <param name="ScalePow2"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="CenterVertical"></param>
            <param name="CenterHorizontal"></param>
            <param name="IsCustomShrink"></param>
            <param name="CustomShrink"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.Refresh(Meridian59.Data.Models.RoomObject,System.Boolean,System.Boolean,System.Byte,System.Double,System.Boolean,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Creates RenderInfo for a RoomObject
            </summary>
            <param name="Data"></param>
            <param name="UseViewerFrame"></param>
            <param name="ApplyYOffset"></param>
            <param name="RootHotspotIndex"></param>
            <param name="Quality"></param>
            <param name="ScalePow2"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="CenterVertical"></param>
            <param name="CenterHorizontal"></param>
            <param name="IsCustomShrink"></param>
            <param name="CustomShrink"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.Clear">
            <summary>
            Resets the data
            </summary>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.Scale(System.Double)">
            <summary>
            Scales the renderinfo by Value
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.ScaleToBox(Meridian59.Common.V2,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Scales the renderinfo with respect to width/height ratio.
            Only one side will fit the given Dimension exactly afterwards.
            </summary>
            <param name="Dimension"></param>
            <param name="CenterHorizontal"></param>
            <param name="CenterVertical"></param>
            <param name="MakeFit"></param>
        </member>
        <member name="M:Meridian59.Drawing2D.RenderInfo.Translate(Meridian59.Common.V2)">
            <summary>
            Moves the origins by given translation.
            </summary>
            <param name="Translation"></param>
        </member>
        <member name="T:Meridian59.Native.Windows">
            <summary>
            PINVOKE wrapping for Windows API
            </summary>
        </member>
        <member name="T:Meridian59.Native.Windows.Kernel32">
            <summary>
            PINVOKE for kernel32.dll
            </summary>
        </member>
        <member name="T:Meridian59.Native.Windows.User32">
            <summary>
            PINVOKE for user32.dll
            </summary>
        </member>
        <member name="T:Meridian59.Native.Windows.WS2_32">
            <summary>
            PINVOKE for WS2_32.dll
            </summary>
        </member>
        <member name="T:Meridian59.Native.Windows.MSCOREE">
            <summary>
            PINVOKE for mscoree.dll
            </summary>
        </member>
        <member name="T:Meridian59.Native.Wrapper">
            <summary>
            Access functions based on hosting CLR.
            Might directly call Windows API on MS .NET
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.ConnectionListener">
            <summary>
            Accepts incoming TCP connections and enqueues the
            TcpClient instances into a threadsafe queue
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ConnectionListener.thread">
            <summary>
            Internal workthread accepting tcp connections
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ConnectionListener.listener">
            <summary>
            Will bind to TCP port and listen for incoming connections
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ConnectionListener.IncomingConnections">
            <summary>
            Contains the incoming connections which must be served
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ConnectionListener.#ctor(System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="Port"></param>
        </member>
        <member name="M:Meridian59.Protocol.ConnectionListener.Stop">
            <summary>
            Stops listening for incoming connections
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ConnectionListener.ThreadProc">
            <summary>
            Executed by internal worker thread
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ChangedStatsMessage">
            <summary>
            Sends modified data of StatChange wizard from client to server
            to actually change the stats.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ChangeObjectFlagsMessage">
            <summary>
            An update for an object's ObjectFlags (mostly roomobjects, but can also be inventory)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqStatChangeMessage">
            <summary>
            Sends initial data for StatChange wizard from server to client and
            makes him show up the dialog.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CounterOfferedMessage">
            <summary>
            This message carries your items echoed from server as response
            to your ReqCounterOffer. Trade was initiated by other party.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqInventoryMoveMessage">
            <summary>
            Requests to swap to inventory items given by their IDs.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.WithdrawAlListMessage">
            <summary>
            This message carries the items you have can
            withdraw from an object.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqWithDrawAlItemsMessage">
            <summary>
            Requests to withdraw certain items from ID
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqWithdrawAlMessage">
            <summary>
            Requests to open the withdraw list of an object
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.PasswordNotOKMessage">
            <summary>
            Sent in return to a password change request if not successful.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.PasswordOKMessage">
            <summary>
            Sent in return to a password change request if successful.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqCounterOfferMessage">
            <summary>
            This is like ReqOffer, but the trade was initiated by other party.
            So it's missing the TradePartner.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.AdminMessageLoginMode">
            <summary>
            Note: There is another variant, almost same name, in GameMode
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ClientPatchMessage">
            <summary>
            Sent from the server to the client in response to a not accepted
            DownloadVersion in previous 'ReqGameStateMessage'.
            This signals a client patch.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.NoCharactersMessage">
            <summary>
            Sent by the server after login if you don't have created any character slots.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.LoginModeMessageMessage">
            <summary>
            A message sent from server to client, (usually) carrying an errortext in protocol mode 'login'.
            Can also request the client to do an action.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginModeMessageMessage.Message">
            <summary>
            Message textx
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginModeMessageMessage.Action">
            <summary>
            Action the client should execute when receiving this message.
            Either LA_NOTHING or LA_LOGOFF constants in this class.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqAdminMessageLoginMode">
            <summary>
            Note: There is another variant, almost same name, in GameMode
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.GameMessage">
            <summary>
            Abstract base implementation of a GameMessage exchanged
            between server and client.
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.GameMessages.GameMessage.PropertyChanged">
            <summary>
            Not really used in Message classes.
            Most Properties will NOT raise changed events.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.TransferDirection">
            <summary>
            Transferdirection of the message
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.Header">
            <summary>
            TCP (or UDP) header used for this GameMessage
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.PI">
            <summary>
            The unique identifier for the type of the GameMessage.
            Interpretation depends on type of message (Login/Game)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.EncryptedPI">
            <summary>
            Stores the plain, received encrypted PI for later use
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.Description">
            <summary>
            A string description of the message.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.DataLength">
            <summary>
            Length of the data in bytes.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.HeaderBytes">
            <summary>
            Returns Header.Bytes
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.DataBytes">
            <summary>
            Creates a byte[] of length 'DataLength' with all data values serialized.
            Data does not include the message type (PI).
            Note: This just copies from 'Bytes' property.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GameMessage.BodyBytes">
            <summary>
            Creates a byte[] of length 'BodyLength' with all data values serialized.
            Body does include the message type (PI).
            Note: This just copies from 'Bytes' property. 
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.GameMessage.CloneToGeneric">
            <summary>
            Returns a clone of type GenericGameMessage
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.GameModeMessage">
            <summary>
            Abstract base implementation for messages in protocol mode 'game'
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.AcceptOfferMessage">
            <summary>
            Sent from client to server when a pending trade is accepted
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.AcceptOfferMessage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.AcceptOfferMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.AddBgOverlayMessage">
            <summary>
            Used to add the sun and moon
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.AddEnchantmentMessage">
            <summary>
            Tells the client about a new enchantment (room or player)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ArticleMessage">
            <summary>
            A single message in a globe
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ArticlesMessage">
            <summary>
            Part of the message overview/list in a news globe
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.BackgroundMessage">
            <summary>
            Tells the client about the sky background.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.BuyListMessage">
            <summary>
            The offer list you get from NPCs
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ChangeBgOverlayMessage">
            <summary>
            Change a background overlay (sun/moon)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ChangeMessage">
            <summary>
            An update for an object (mostly roomobjects, but can also be inventory)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CharactersMessage">
            <summary>
            The available characters in the selection screen
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CharInfoMessage">
            <summary>
            Carries data for character creation wizard
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CharInfoNotOkMessage">
            <summary>
            Tells the client about errors during character creation.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CounterOfferMessage">
            <summary>
            This message carries the items the other side offers
            you, if you initated the offer.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CreateMessage">
            <summary>
            Adds a new roomobject to the scene
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.EchoPingMessage">
            <summary>
            Response from the server to "Ping" message. 
            Contains a decode byte for message type decoding.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.AdminMessage">
            <summary>
            Text based response to "ReqAdmin" in admin panel
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.MailMessage">
            <summary>
            An ingame Mail download
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ObjectContentsMessage">
            <summary>
            This message transfers contents of guild hall chests and others.   
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.WallAnimateMessage">
            <summary>
            Tells the client to animate a wall (i.e. change texture)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.MoveMessage">
            <summary>
            Tells the client about an updated position of a RoomObject
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.GameMessages.MoveMessage.ROTATETODEST">
            <summary>
            The upper bit of the transferred speed byte
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MoveMessage.RotateToDestination">
            <summary>
            Tells whether the object should also be rotated
            to face the destination of the move.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.OfferedMessage">
            <summary>
            This message carries the items you have offered to someone
            back to you.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.OfferMessage">
            <summary>
            These message carries the items and partner you are offered
            in background. (Offer initiated by other party).
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.TurnMessage">
            <summary>
            Tells the client an object on the map has turned.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.UnuseMessage">
            <summary>
            Request to unuse an item.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.UseCharacterMessage">
            <summary>
            Tells the server which character should be logged in (selection screen).
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.UseListMessage">
            <summary>
            Tells the client which inventory items are currently equipped/used.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.UseMessage">
            <summary>
            Requests to "use" a certain item (i.e. doubleclick inventoryitem)
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.GenericGameMessage">
            <summary>
            A generic implementation able to hold any gamemessage (just a byte[] wrapper).
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.GenericGameMessage.Data">
            <summary>
            Data attached to this message.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.GenericGameMessage.#ctor(System.Byte,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="PI"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.GenericGameMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.LoginModeMessage">
            <summary>
            Abstract base implementation for messages in protocol mode 'login'
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.CreditsMessage">
            <summary>
            Early message sent by the server to the client to tell him the credits he has left. 
            Currently not used and set with fixed value.
            </summary>
            <remarks>
            See original 'blakserv/synched.c'.
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.CreditsMessage.Credits">
            <summary>
            Remaining credits
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.DownloadMessage">
            <summary>
            Sent from the server to the client in response to a not accepted
            DownloadVersion in previous 'ReqGameStateMessage'.
            This signals a resource update.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.GameStateMessage">
            <summary>
            Sent by the server to the client as positive response to ReqGame.
            This is the last message of protocol mode 'login'.
            After this any message will be of type protocol mode 'game'.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.GetClientMessage">
            <summary>
            Sent from the server to the client in response to a not accepted 
            major/minor client version received in previous 'LoginMessage'.
            This signals a client update.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.LoginMessage">
            <summary>
            First message sent from the client to the server in response to AP_GETLOGIN.
            Used to identify himself (including account credentials).
            </summary>
            <remarks>
            See 'clientd3d/login.c' and 'blakserv/synched.c'
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.MajorClientVersion">
            <summary>
            Major program version of the Meridian 59 client trying to login
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.MinorClientVersion">
            <summary>
            Minor program version of the Meridian 59 client trying to login
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.WindowsType">
            <summary>
            Basic type of windows.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.WindowsMajorVersion">
            <summary>
            Major windows version.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.WindowsMinorVersion">
            <summary>
            Minor windows version.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.RamSize">
            <summary>
            Amount of RAM the client computer has.
            Not working correctly: 32-Bit Integer has become too small for RAM > 4GB.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.CpuType">
            <summary>
            CPU type.
            </summary>
            <remarks>
            In original code CpuType is merged with ClientExecutable in a 32-Bit integer
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.ClientExecutableCRC">
            <summary>
            Used to transmit a CRC checksum of the old 'meridian.exe'.
            Probably designed to catch hackers, but the value is ignored on the serverside.
            </summary>
            <remarks>
            In original code CpuType is merged with ClientExecutable in a 32-Bit integer
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.HorizontalSystemResolution">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.VerticalSystemResolution">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.Display">
            <summary>
            This is an encoded value built from the resolution
            and the colordepth. Likely redunant with other properties.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.Bandwidth">
            <summary>
            Used to transmit user-bandwidth.
            Not active right now.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.ColorDepth">
            <summary>
            ColorDepth of the client computer.
            </summary>
            <remarks>
            The original code encodes this with 'PartnerNr' and 'Unused' into an integer
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.PartnerNr">
            <summary>
            An ID used to recognize old M59 resellers/partners.
            Not required.
            </summary>
            <remarks>
            The original code encodes this with 'PartnerNr' and 'Unused' into an integer
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.Unused">
            <summary>
            An ID used to recognize old M59 resellers/partners.
            Not required.
            </summary>
            <remarks>
            The original code encodes this with 'PartnerNr' and 'Unused' into an integer
            </remarks>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.Username">
            <summary>
            Username of the account to login.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.Password">
            <summary>
            Sets the password to use.
            This will update property 'PasswordHash'
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.PasswordHash">
            <summary>
            M59 MD5 of the last set of property 'Password'
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginMessage.RsbHash">
            <summary>
            MD5 hash of the .rsb string resource file.
            Server compares with live version on connection and
            may trigger a client update.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.LoginMessage.#ctor(System.String,System.String,Meridian59.Common.Hash128Bit,System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Constructor by values
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="RsbHash"></param>
            <param name="MajorClientVersion"></param>
            <param name="MinorClientVersion"></param>
            <param name="WindowsType"></param>
            <param name="WindowsMajorVersion"></param>
            <param name="WindowsMinorVersion"></param>
            <param name="RamSize"></param>
            <param name="CpuType"></param>
            <param name="ClientExecutableCRC"></param>
            <param name="HorizontalSystemResolution"></param>
            <param name="VerticalSystemResolution"></param>
            <param name="Display"></param>
            <param name="Bandwidth"></param>
            <param name="ColorDepth"></param>
            <param name="PartnerNr"></param>
            <param name="Unused"></param>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.LoginMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor by parser
            </summary>
            <param name="MessageBuffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.LoginOKMessage">
            <summary>
            Sent by the server to the client as positive response to LoginMessage.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginOKMessage.AccountType">
            <summary>
            Account type of this user.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.LoginOKMessage.SessionID">
            <summary>
            Blakserv session ID.
            NOT available in VANILLA and OPENMERIDIAN
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.ReqGameStateMessage">
            <summary>
            Sent to the server by the client to request a switch from
            protocol mode 'login' to protocol mode 'game'.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.GameMessages.ReqGameStateMessage.CATCHVALUE">
            <summary>
            See P_CATCH in 'clientd3d/client.h'
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.ReqGameStateMessage.DownloadVersion">
            <summary>
            The resource version to tell the server.
            This is from old 'meridian.ini' value 'Download='
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.ReqGameStateMessage.VersionCheckValue">
            <summary>
            Encoded Major/Minor/Catch Value.
            See EnterGame() in 'clientd3d/login.c'
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.ReqGameStateMessage.Hostname">
            <summary>
            Hostname, set with "cheater" by default
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.ReqGameStateMessage.#ctor(System.UInt32,System.Byte,System.Byte,System.String)">
            <summary>
            
            </summary>
            <param name="DownloadVersion"></param>
            <param name="MajorVersion"></param>
            <param name="MinorVersion"></param>
            <param name="Hostname"></param>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.ReqGameStateMessage.#ctor(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="MessageBuffer"></param>
            <param name="StartIndex"></param>
        </member>
        <member name="T:Meridian59.Protocol.GameMessages.MessageHeader">
            <summary>
            The header implementation of a GameMessage.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.GameMessages.MessageHeader.Tcp.HEADERLENGTH">
            <summary>
            The TCP headerlength (7)
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.GameMessages.MessageHeader.Udp.HEADERLENGTH">
            <summary>
            The UDP headerlength (11)
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.GameMessages.MessageHeader.PropertyChanged">
            <summary>
            Not really used in Message classes.
            Most Properties will NOT raise changed events.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.BodyLength">
            <summary>
            Length of body
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.HeaderCRC">
            <summary>
            The CRC value from header
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.HeaderSS">
            <summary>
            The serversave cycle value from header
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.MemoryStartAddress">
            <summary>
            Can store a memory pointer to the message
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.MessageHeader.#ctor(System.UInt16,System.UInt16,System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="Length"></param>
            <param name="CRC"></param>
            <param name="ServerSave"></param>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.MessageHeader.#ctor(System.Byte[],System.Int32,Meridian59.Protocol.Enums.MessageDirection)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="StartIndex"></param>
            <param name="Direction"></param>
        </member>
        <member name="M:Meridian59.Protocol.GameMessages.MessageHeader.#ctor(System.Byte*@,Meridian59.Protocol.Enums.MessageDirection)">
            <summary>
            Constructor
            </summary>
            <param name="Buffer"></param>
            <param name="Direction"></param>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.HasEmptyBody">
            <summary>
            True if body has length of zero.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.IsTCP">
            <summary>
            True for TCP instances
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.GameMessages.MessageHeader.HeaderBytes">
            <summary>
            Creates a byte[] with all header values serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Protocol.MessageParserUDP">
            <summary>
            Reads the bytes of game message from raw byte[] udp datagrams
            Subscribe the events!
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageParserUDP.MessageAvailable">
            <summary>
            Event when a complete message is available in the buffer.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageParserUDP.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageParserUDP.Read(System.Byte[],System.IntPtr,System.Int32)">
            <summary>
            Process a chunk (byte[]) of data with attached MemoryPosition.
            Use for reading external/hooked traffic.
            </summary>
            <param name="Buffer">Chunk of data to process</param>
            <param name="MemoryAddress"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParserUDP.OnProcessMessage(Meridian59.Protocol.Events.MessageBufferEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.MessageEnrichment">
            <summary>
            Reads messages from a ServerConnection and enriches their included models with their resources.
            </summary>
            <remarks>
            This class has its own thread and is supposed to work in a pipe (asyn producer/consumer pattern)
            together with ServerConnection and your application's mainthread.
            
            It basically resolves resources (loads them from harddisk) and decompresses them.
            All before the messages are passed to the application.
            
            Do not read pending GameMessages in the ReceiveQueue of the ServerConnection yourself if you use this class.
            Instead read them from the OutputQueue property of this class.
            </remarks>    
        </member>
        <member name="P:Meridian59.Protocol.MessageEnrichment.OutputQueue">
            <summary>
            Enriched GameMessages can be read from here.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageEnrichment.#ctor(Meridian59.Files.ResourceManager,Meridian59.Protocol.ServerConnection)">
            <summary>
            Constructor
            </summary>
            <param name="M59ResourceManager">Will be used to resolve/load resources</param>
            <param name="ServerConnection">Reads incoming messages from this ServerConnection</param>
        </member>
        <member name="M:Meridian59.Protocol.MessageEnrichment.ThreadProc">
            <summary>
            Internal thread procedure
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageEnrichment.HandleGameMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Top level handler for a new GameMessage from server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageEnrichment.HandleLoginModeMessage(Meridian59.Protocol.GameMessages.LoginModeMessage)">
            <summary>
            Will be executed for any new LoginMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageEnrichment.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            Will be executed for any new GameMode message from the server
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Meridian59.Protocol.Enums.ConnectionState">
            <summary>
            Possible connectionstates of the ServerConnection
            </summary>
            <remarks>
            Explanation of values:
            ----------------------
            Offline         =   Not connected at all
            Connected       =   Received the very first message (GetLoginMessage = AP_GET_LOGIN) after successful TCP connect
            Authenticated   =   Got a positive result to "LoginMessage", either "LoginOK" or "GetClient"
            Waiting         =   Received a "WaitMessage" (BP_WAIT), game is frozen during server save
            Online          =   Received a "GameStateMessage" (AP_GAME), this is also the transition from LoginMode to GameMode in the protocol messages
            Playing         =   Set when tracked an sent/outgoing "BP_USE_CHARACTER" message
            </remarks>
        </member>
        <member name="T:Meridian59.Protocol.Enums.MessageDirection">
            <summary>
            Transfer direction enum
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Enums.MessageTypeGameMode">
            <summary>
            These are the valid message types for protocol mode 'game'.
            See original 'proto.h'.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Enums.MessageTypeLoginMode">
            <summary>
            These are the valid message types for protocol mode 'login'.
            See original 'proto.h'.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Enums.ProtocolMode">
            <summary>
            Meridian network protocol knows two different modes.
            Parsing incoming messages depends on the current mode.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.CompletingSplittedMessageEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.CompletingSplittedMessageEventArgs">
            <summary>
            Event which carries data of a situation when a game message
            was split across TCP buffers.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.ConnectionStateChangedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.ConnectionStateChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.EmptyMessageFoundEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.EmptyMessageFoundEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.MessageBufferEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.MessageBufferEventArgs">
            <summary>
            Event containing a messagebuffer reference with exactly one message to parse,
            starting at the beginning of the buffer.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.MismatchMessageLengthFoundEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.MismatchMessageLengthFoundEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Events.SplittedMessageFoundEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.Events.SplittedMessageFoundEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.MessageController">
            <summary>
            Implements the basic tasks: Packet-Splitting, PI-Decoding, CRC-Creation
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.MessageAvailable">
            <summary>
            Raised when there is a new message available for processing
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.SplittedMessageFound">
            <summary>
            Raised when the parser has found an incomplete message in tcp packet
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.CompletingSplittedMessage">
            <summary>
            Raised when parser is completing a splitted message
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.MismatchMessageLengthFound">
            <summary>
            Raised when an header contained two mismatching body lengths
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.EmptyMessageFound">
            <summary>
            Raised when an header only message was received
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.ServerSaveChanged">
            <summary>
            Raised whenever the ServerSave value in the header has changed
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.HandlerError">
            <summary>
            Raised when an error has occured
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageController.ProtocolModeChanged">
            <summary>
            Raised when the protocol mode changes
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageController.stringResources">
            <summary>
            Reference to a populated dictionary with game strings.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.CurrentServerSave">
            <summary>
            Current ServerSave (header value)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.LastServerSave">
            <summary>
            Last ServerSave
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.Mode">
            <summary>
            The current protocol mode
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.PIDecoder">
            <summary>
            Instance of a PI decoder used to decode PacketIdentifiers
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.CRCCreator">
            <summary>
            Instance of a CRCreator used to encrypt outgoing Packet-CRCs
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.CRCCreatorEnabled">
            <summary>
            Whether the encrypted CRC generator is enabled
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.CRCCreatorHashTable">
            <summary>
            The current HashTable used by the CRC Creator
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.SessionID">
            <summary>
            Session-ID received in AP_LOGINOK (not available in VANILLA/OPENMERIDIAN)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.MessageController.SequenceNumber">
            <summary>
            Last SequenceNumber used when sending UDP
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.#ctor(Meridian59.Common.StringDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="StringResources">A dictionary to resolve Meridian59 strings from.</param>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.Reset">
            <summary>
            Resets the PacketController to initial state
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.SignMessage(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Sets the serversave cycle value in the message header.
            Also adds an scrambled CRC checksum to the message, depending on the protocol state.
            </summary>
            <param name="Message">Message to add encrypted CRC to</param>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.CheckServerSave(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Compares the ServerSave value with the current one and fires event if changed
            </summary>
            <param name="Packet"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.ExtractMessage(Meridian59.Protocol.Events.MessageBufferEventArgs)">
            <summary>
            Extract Message from a MessageBuffer (eventargs)
            </summary>
            <param name="e">MessageBufferEvent</param>
            <returns>Typed message or generic</returns>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.ExtractLoginModeMessage(Meridian59.Protocol.Events.MessageBufferEventArgs,Meridian59.Protocol.Enums.MessageTypeLoginMode)">
            <summary>
            Helper function for "ExtractMessage"
            </summary>
            <param name="e">LoginMode Buffer</param>
            <param name="PI">Decoded PI</param>
            <returns>Typed message or generic</returns>
        </member>
        <member name="M:Meridian59.Protocol.MessageController.ExtractGameModeMessage(Meridian59.Protocol.Events.MessageBufferEventArgs,Meridian59.Protocol.Enums.MessageTypeGameMode)">
            <summary>
            Helper function for "ExtractMessage"
            </summary>
            <param name="e">MessageBuffer to extract from</param>
            <param name="PI">Message type</param>
            <returns>Typed message or generic instance of GameMessage</returns>
        </member>
        <member name="T:Meridian59.Protocol.MessageControllerClient">
            <summary>
            MessageController for a client implementation
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageControllerClient.recvReader">
            <summary>
            Reader for incoming data
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.#ctor(Meridian59.Common.StringDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="StringResources"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.Reset">
            <summary>
            Reset to initial state
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.ReadRecv(System.IO.Stream,System.Int32)">
            <summary>
            Process available data in a stream
            </summary>
            <param name="Stream"></param>
            <param name="Available">How many bytes can be read from Stream</param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.OnRecvReaderProcessMessage(System.Object,Meridian59.Protocol.Events.MessageBufferEventArgs)">
            <summary>
            Handle a message from the messagebuffer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.OnRecvReaderMismatchMessageLengthFound(System.Object,Meridian59.Protocol.Events.MismatchMessageLengthFoundEventArgs)">
            <summary>
            Eventhandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.OnRecvReaderCompletingSplittedPacket(System.Object,Meridian59.Protocol.Events.CompletingSplittedMessageEventArgs)">
            <summary>
            Eventhandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerClient.OnRecvReaderSplittedPacketFound(System.Object,Meridian59.Protocol.Events.SplittedMessageFoundEventArgs)">
            <summary>
            Eventhandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.MessageControllerHook">
            <summary>
            MessageController for hook environment (read tx/rx)
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageControllerHook.sendReader">
            <summary>
            Reader für outgoing traffic
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageControllerHook.sendReaderUDP">
            <summary>
            Reader for outgoing UDP traffic
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageControllerHook.advanceHashTable">
            <summary>
            Whether or not to advance hashtable when processing outgoing message
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.#ctor(Meridian59.Common.StringDictionary,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="StringResources">Resources</param>
            <param name="AdvanceHashTable"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.Reset">
            <summary>
            Reset to initial state
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.ReadRecv(System.Byte[],System.IntPtr,System.Int32)">
            <summary>
            Reads a received traffic chunk from byte[]
            </summary>
            <param name="Buffer">The chunk to read</param>
            <param name="MemoryAddress">The memory address to attach with this chunk</param>
            <param name="Available">Amounts of data available to read</param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.ReadSend(System.Byte[],System.IntPtr,System.Int32)">
            <summary>
            Reads a sent traffic chunk from byte[]
            </summary>
            <param name="Buffer"></param>
            <param name="MemoryAddress"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.ReadSend(System.IO.Stream,System.Int32)">
            <summary>
            Reads a sent traffic chunk from stream
            </summary>
            <param name="Stream"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.ReadSendUDP(System.Byte[],System.IntPtr,System.Int32)">
            <summary>
            Reads a sent traffic chunk from byte[]
            </summary>
            <param name="Buffer"></param>
            <param name="MemoryAddress"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageControllerHook.OnSendReaderProcessMessage(System.Object,Meridian59.Protocol.Events.MessageBufferEventArgs)">
            <summary>
            Handle a message from the recv messagebuffer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.MessageParser">
            <summary>
            Reads the bytes of game message from raw byte[] chunks or a Stream instance.
            Subscribe the events!
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageParser.MessageAvailable">
            <summary>
            Event when a complete message is available in the buffer.
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageParser.SplittedMessageFound">
            <summary>
            Event when a splitted message appears
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageParser.CompletingSplittedMessage">
            <summary>
            Event when a splitted message is continued
            </summary>
        </member>
        <member name="E:Meridian59.Protocol.MessageParser.MismatchMessageLengthFound">
            <summary>
            Event when two lengths in header don't match
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.messageBuffer">
            <summary>
            Buffer to store exactly one complete Message in bytes
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.cursor">
            <summary>
            Cursor on "MessageBuffer" to currently write
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.readingHeader">
            <summary>
            Flag which readmode to chose
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.nextBodyLength">
            <summary>
            The BodyLength of the next/currently read message
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.processed">
            <summary>
            Cursor on a chunk of data
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.MessageParser.baseMemoryAddress">
            <summary>
            Base memory address of the last bufferchunk
            Only used by unmanaged read.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.Reset">
            <summary>
            Reset to initial state.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.Read(System.Byte[],System.IntPtr,System.Int32)">
            <summary>
            Process a chunk (byte[]) of data with attached MemoryPosition.
            Use for reading external/hooked traffic.
            </summary>
            <param name="Buffer">Chunk of data to process</param>
            <param name="MemoryAddress"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.Read(System.IO.Stream,System.Int32)">
            <summary>
            Process available bytes on a Stream object.
            Only works with the TCP header!
            </summary>
            <param name="Stream"></param>
            <param name="Available"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.OnProcessMessage(Meridian59.Protocol.Events.MessageBufferEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.OnSplittedPacketFound(Meridian59.Protocol.Events.SplittedMessageFoundEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.OnCompletingSplittedPacket(Meridian59.Protocol.Events.CompletingSplittedMessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.MessageParser.OnMismatchMessageLengthFound(Meridian59.Protocol.Events.MismatchMessageLengthFoundEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Meridian59.Protocol.DownloadHandler">
            <summary>
            Handles the downloading of client patch files and updater launch.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.DownloadHandler.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.DownloadHandler.DownloadClientPatcher(Meridian59.Data.Models.ClientPatchInfo)">
            <summary>
            Downloads the current version of the game patcher.
            Once done the client quits and the patcher launches.
            </summary>
            <param name="ClientPatchInfo"></param>
        </member>
        <member name="M:Meridian59.Protocol.DownloadHandler.Dispose(System.Boolean)">
            <summary>
            IDisposable implementation
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.SubMessage.SubMessage">
            <summary>
            A SubMessage is basically a GameMessage embedded into another Message, like "SystemMessage".
            In this case the Messagetype of SubMessage is the next following byte after the MessageType.
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.ServerConnection">
            <summary>
            Provides a connection established from a client to a server.
            This class has its own workthread with an async communication queue pattern.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.MODULENAME">
            <summary>
            ModuleName
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.PINGINTERVAL">
            <summary>
            Ping interval in milliseconds.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.SLEEPTIME">
            <summary>
            Time in ms for listenthread to sleep
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.DISCONNECTSLEEP">
            <summary>
            Time in ms to sleep after call to disconnect to let netthread end
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.serverAddress">
            <summary>
            Hostname or IP of server
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.serverPort">
            <summary>
            TCP port of connection
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.socket">
            <summary>
            Handles the TCP connection
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.socketUDP">
            <summary>
            Used for sending UDP datagrams
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.tcpStream">
            <summary>
            TCP stream between client and server
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.isRunning">
            <summary>
            Loop condition for listener thread
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.rtt">
            <summary>
            Current latency 
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.connectionState">
            <summary>
            Current connectionstate
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.stringResources">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.timPing">
            <summary>
            Timer for regularly sending pings in Game ProtocolMode
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.workThread">
            <summary>
            Internal network-listener thread
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.messageController">
            <summary>
            The packetcontroller used for parsing.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.lastPingSent">
            <summary>
            Saves the time the last ping was sent (for delta calculation)
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.ServerConnection.isQuitting">
            <summary>
            True after sending BP_REQ_QUIT and waiting for BP_QUIT.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.ConnectionState">
            <summary>
            Current connectionstate
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.RTT">
            <summary>
            Round-Trip-Time measured in milliseconds between last ping sent and its received pingreply
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.ReceiveQueue">
            <summary>
            The tcp-listener thread will put fully parsed/typed packets on this queue
            you should regularly take off the packets from here and process them by your thread
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.SendQueue">
            <summary>
            Insert packets to be sent in here.
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.IsOutgoingPacketLogEnabled">
            <summary>
            Whether or not put fully sent packets back in a queue (debug)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.OutgoingPacketLog">
            <summary>
            If enabled, this packetqueue contains all outgoing packets you
            inserted in sendqueue and that were actually sent (for logging purposes with crc/len/pi)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.ServerConnection.ExceptionQueue">
            <summary>
            Contains exceptions raised by internal thread.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.#ctor(Meridian59.Common.StringDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="StringResources">The StringResources to use.</param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Connect(System.String,System.UInt16)">
            <summary>
            Connect this instance to a Meridian 59 Server.
            This will spawn the internal workthread and also
            disconnect and cleanup first, if already connected.
            </summary>
            <param name="ServerAddr">IP or DNS to connect to</param>
            <param name="Port">TCP-Port to connect to</param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Disconnect">
            <summary>
            Close connection. This will block for some time to let the async
            network thread exit its loop.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Send(Meridian59.Protocol.GameMessages.GameMessage,System.Boolean)">
            <summary>
            Sends a GameMessage instance to the connected server.
            </summary>
            <param name="Message">The GameMessage instance to be sent</param>
            <param name="Flush">Flush TCP buffer or not</param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Flush">
            <summary>
            Use this with SendBuffered to finally flush the sendbuffer
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.ThreadProc">
            <summary>
            The internal thread procedure, handling recv and send.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.OnPingTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The timer will send a required PingPacket every 5 seconds by using this function
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.OnMessageControllerHandlerError(System.Object,Meridian59.Protocol.Events.HandlerErrorEventArgs)">
            <summary>
            Handler in case the MessageController throws an error.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.OnMessageControllerNewServerSave(System.Object,Meridian59.Protocol.Events.ServerSaveChangedEventArgs)">
            <summary>
            Handler in case the MessageController signals a new serversave.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.OnMessageControllerProtocolModeChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for protocolmode change in MessageController
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.OnMessageControllerNewMessageAvailable(System.Object,Meridian59.Protocol.Events.GameMessageEventArgs)">
            <summary>
            Process new GameMessage from MessageController
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleLoginModeMessage(Meridian59.Protocol.GameMessages.LoginModeMessage)">
            <summary>
            Internally handle some LoginModeMessages
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleGameModeMessage(Meridian59.Protocol.GameMessages.GameModeMessage)">
            <summary>
            Internally handle some GameModeMessages
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleGetLoginMessage(Meridian59.Protocol.GameMessages.GetLoginMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleGetClientMessage(Meridian59.Protocol.GameMessages.GetClientMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleLoginOKMessage(Meridian59.Protocol.GameMessages.LoginOKMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.HandleGameStateMessage(Meridian59.Protocol.GameMessages.GameStateMessage)">
            <summary>
            
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:Meridian59.Protocol.ServerConnection.Dispose(System.Boolean)">
            <summary>
            IDisposable implementation
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.CRCCreator">
            <summary>
            Implements encoding of message CRC
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.CRCCreator.CurrentHashTable">
            <summary>
            Currently used hash
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.CRCCreator.LastHashTable">
            <summary>
            Last used hash
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.CRCCreator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.CRCCreator.Reset">
            <summary>
            Resets the CRC creator to initial state.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.CRCCreator.AdvanceHashTable">
            <summary>
            Advances the HashTable to new values without creating a complete packetCRC
            DO NOT call this for an outgoing packet if you have already called "CreatePacketCRC"
            You would advance hashtable twice.
            This simply is a low cost variant for sniffed packets and advancing a mirrored/selfcreated hashtable in background.
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.CRCCreator.CreatePacketCRC(Meridian59.Protocol.GameMessages.GameMessage,System.UInt16@,System.Boolean)">
            <summary>
            Sets (and returns) a valid CRC on a GameMessage (and advances the hash if not in testmode).
            </summary>
            <param name="Message">Message to set CRC in header</param>
            <param name="BodyCRC">The plain CRC32</param>
            <param name="TestMode">If set to false, hash is not iterated</param>
            <returns>Shortened and encoded CRC also set on Message</returns>
        </member>
        <member name="M:Meridian59.Protocol.CRCCreator.CreatePacketCRCUDP(Meridian59.Protocol.GameMessages.GameMessage)">
            <summary>
            Sets (and returns) a valid CRC on a GameMessage for UDP
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="T:Meridian59.Protocol.PIDecoder">
            <summary>
            Use to decode incoming Message types
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.FALLBACKSTRING">
            <summary>
            This string is used if the server transmits a zero resourceid.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.XORValue">
            <summary>
            This value is involved in decoding.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.ANDValue">
            <summary>
            This value is involved in decoding.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.stringBytes">
            <summary>
            The bytes of the local iterate-string in use.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.cursor">
            <summary>
            A cursor on the local iterate-string
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.currentDecodeByte">
            <summary>
            The byte involved in the decoding of next PI
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.enabled">
            <summary>
            A flag wether or not we received at least one PingReply with an Decode-Byte
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIDecoder.stringResources">
            <summary>
            Stores reference to StringResources used to get local-iterate strings from (ID proposed in PingReply packet)
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.PIDecoder.#ctor(Meridian59.Common.StringDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="StringResources">A threadsafe dictionary used to resolve Meridian Strings from.</param>
        </member>
        <member name="M:Meridian59.Protocol.PIDecoder.Reset">
            <summary>
            Reset the PIDecoder to initial state
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.PIDecoder.Decode(System.Byte)">
            <summary>
            Returns the decoded message type
            </summary>
            <param name="MessageType">Encoded message type</param>
            <returns></returns>
        </member>
        <member name="M:Meridian59.Protocol.PIDecoder.Update(System.Byte,System.UInt32)">
            <summary>
            Update the PIDecoder from values attached to PingReply message
            </summary>
            <param name="NewDecodeByte">Is attached on PingReply</param>
            <param name="ResourceID">Is attached on PingReply</param>
        </member>
        <member name="T:Meridian59.Protocol.PIEncoder">
            <summary>
            Encodes message types
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.StaticFallbackHashString">
            <summary>
            This string is usually used as local iterate-string (it's resource ID (20194) is transmitted in PingReply Packet).
            If the class can't access the stringlist to resolve the local iterate-strings from this will be used as fallback
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.ResourceID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.SeedByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.XORValue">
            <summary>
            This value is involved.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.ANDValue">
            <summary>
            This value is involved.
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.hashString">
            <summary>
            The bytes of the local iterate-string in use (+ 0x00 termination)
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.cursor">
            <summary>
            A cursor on the local iterate-string
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.enabled">
            <summary>
            A flag wether or not we received at least one PingReply with an Decode-Byte
            </summary>
        </member>
        <member name="F:Meridian59.Protocol.PIEncoder.stringResources">
            <summary>
            Stores reference to StringResources used to get local-iterate strings from (ID proposed in PingReply packet)
            </summary>
        </member>
        <member name="P:Meridian59.Protocol.PIEncoder.CurrentEncodeByte">
            <summary>
            The byte involved in the decoding of next PI
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.PIEncoder.#ctor(Meridian59.Common.StringDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="StringResources">A threadsafe dictionary used to resolve Meridian Strings from.</param>
        </member>
        <member name="M:Meridian59.Protocol.PIEncoder.Reset">
            <summary>
            Reset the PIEncoder to initial state
            </summary>
        </member>
        <member name="M:Meridian59.Protocol.PIEncoder.Encode(System.Byte)">
            <summary>
            Encode the Message type of a GameMessage based on the PIEncoder state
            </summary>
            <param name="MessageType">The GameMessage to encode type</param>
        </member>
        <member name="M:Meridian59.Protocol.PIEncoder.Update">
            <summary>
            Update the PIDecoder from values attached to PingReply message
            </summary>
        </member>
        <member name="T:Meridian59.Protocol.Structs.HashTable">
            <summary>
            A struct to store 160-Bit hashes in 5x 32-Bit blocks.
            </summary>
        </member>
        <member name="T:Meridian59.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:Meridian59.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:Meridian59.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:Meridian59.Properties.Resources.BitmapColorTable">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:Meridian59.Properties.Resources.BitmapColorTableVale">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:Meridian59.Properties.Resources.Glow">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
    </members>
</doc>
